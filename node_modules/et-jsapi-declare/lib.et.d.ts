/// <reference path="lib.kso.d.ts" />

declare namespace Et {

	interface Adjustments {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number, Val: number): void;

		Item(Index: number): number;

	}

	interface CalloutFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		AutomaticLength(): void;

		CustomDrop(Drop: number): void;

		CustomLength(Length: number): void;

		PresetDrop(DropType: Kso.MsoCalloutDropType): void;

		Accent: Kso.MsoTriState;

		Angle: Kso.MsoCalloutAngleType;

		AutoAttach: Kso.MsoTriState;

		readonly AutoLength: Kso.MsoTriState;

		Border: Kso.MsoTriState;

		readonly Drop: number;

		readonly DropType: Kso.MsoCalloutDropType;

		Gap: number;

		readonly Length: number;

		Type: Kso.MsoCalloutType;

	}

	interface ColorFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		RGB: number;

		SchemeColor: number;

		readonly Type: Kso.MsoColorType;

		TintAndShade: number;

		ObjectThemeColor: Kso.MsoThemeColorIndex;

		Brightness: number;

	}

	interface LineFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		BackColor: ColorFormat;

		BeginArrowheadLength: Kso.MsoArrowheadLength;

		BeginArrowheadStyle: Kso.MsoArrowheadStyle;

		BeginArrowheadWidth: Kso.MsoArrowheadWidth;

		DashStyle: Kso.MsoLineDashStyle;

		EndArrowheadLength: Kso.MsoArrowheadLength;

		EndArrowheadStyle: Kso.MsoArrowheadStyle;

		EndArrowheadWidth: Kso.MsoArrowheadWidth;

		ForeColor: ColorFormat;

		Pattern: Kso.MsoPatternType;

		Style: Kso.MsoLineStyle;

		Transparency: number;

		Visible: Kso.MsoTriState;

		Weight: number;

		InsetPen: Kso.MsoTriState;

	}

	interface ShapeNode {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly EditingType: Kso.MsoEditingType;

		readonly Points: any;

		readonly SegmentType: Kso.MsoSegmentType;

	}

	interface ShapeNodes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ShapeNode;

		Delete(Index: number): void;

		/**
		 * @param X2 默认值为 0
		 * @param Y2 默认值为 0
		 * @param X3 默认值为 0
		 * @param Y3 默认值为 0
		 */
		Insert(Index: number, SegmentType: Kso.MsoSegmentType, EditingType: Kso.MsoEditingType, X1: number, Y1: number, X2?: number, Y2?: number, X3?: number, Y3?: number): void;

		SetEditingType(Index: number, EditingType: Kso.MsoEditingType): void;

		SetPosition(Index: number, X1: number, Y1: number): void;

		SetSegmentType(Index: number, SegmentType: Kso.MsoSegmentType): void;

	}

	interface PictureFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementBrightness(Increment: number): void;

		IncrementContrast(Increment: number): void;

		Brightness: number;

		ColorType: Kso.MsoPictureColorType;

		Contrast: number;

		CropBottom: number;

		CropLeft: number;

		CropRight: number;

		CropTop: number;

		TransparencyColor: number;

		TransparentBackground: Kso.MsoTriState;

		readonly Crop: Kso.Crop;

	}

	interface ShadowFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementOffsetX(Increment: number): void;

		IncrementOffsetY(Increment: number): void;

		ForeColor: ColorFormat;

		Obscured: Kso.MsoTriState;

		OffsetX: number;

		OffsetY: number;

		Transparency: number;

		Type: Kso.MsoShadowType;

		Visible: Kso.MsoTriState;

		Style: Kso.MsoShadowStyle;

		Blur: number;

		Size: number;

		RotateWithShape: Kso.MsoTriState;

	}

	interface TextEffectFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		ToggleVerticalText(): void;

		Alignment: Kso.MsoTextEffectAlignment;

		FontBold: Kso.MsoTriState;

		FontItalic: Kso.MsoTriState;

		FontName: string;

		FontSize: number;

		KernedPairs: Kso.MsoTriState;

		NormalizedHeight: Kso.MsoTriState;

		PresetShape: Kso.MsoPresetTextEffectShape;

		PresetTextEffect: Kso.MsoPresetTextEffect;

		RotatedChars: Kso.MsoTriState;

		Text: string;

		Tracking: number;

	}

	interface ThreeDFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementRotationX(Increment: number): void;

		IncrementRotationY(Increment: number): void;

		ResetRotation(): void;

		SetThreeDFormat(PresetThreeDFormat: Kso.MsoPresetThreeDFormat): void;

		SetExtrusionDirection(PresetExtrusionDirection: Kso.MsoPresetExtrusionDirection): void;

		Depth: number;

		readonly ExtrusionColor: ColorFormat;

		ExtrusionColorType: Kso.MsoExtrusionColorType;

		Perspective: Kso.MsoTriState;

		readonly PresetExtrusionDirection: Kso.MsoPresetExtrusionDirection;

		PresetLightingDirection: Kso.MsoPresetLightingDirection;

		PresetLightingSoftness: Kso.MsoPresetLightingSoftness;

		PresetMaterial: Kso.MsoPresetMaterial;

		readonly PresetThreeDFormat: Kso.MsoPresetThreeDFormat;

		RotationX: number;

		RotationY: number;

		Visible: Kso.MsoTriState;

		SetPresetCamera(PresetCamera: Kso.MsoPresetCamera): void;

		IncrementRotationZ(Increment: number): void;

		IncrementRotationHorizontal(Increment: number): void;

		IncrementRotationVertical(Increment: number): void;

		PresetLighting: Kso.MsoLightRigType;

		Z: number;

		BevelTopType: Kso.MsoBevelType;

		BevelTopInset: number;

		BevelTopDepth: number;

		BevelBottomType: Kso.MsoBevelType;

		BevelBottomInset: number;

		BevelBottomDepth: number;

		readonly PresetCamera: Kso.MsoPresetCamera;

		RotationZ: number;

		ContourWidth: number;

		readonly ContourColor: ColorFormat;

		FieldOfView: number;

		ProjectText: Kso.MsoTriState;

		LightAngle: number;

	}

	interface FillFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Background(): void;

		OneColorGradient(Style: Kso.MsoGradientStyle, Variant: number, Degree: number): void;

		Patterned(Pattern: Kso.MsoPatternType): void;

		PresetGradient(Style: Kso.MsoGradientStyle, Variant: number, PresetGradientType: Kso.MsoPresetGradientType): void;

		PresetTextured(PresetTexture: Kso.MsoPresetTexture): void;

		Solid(): void;

		TwoColorGradient(Style: Kso.MsoGradientStyle, Variant: number): void;

		UserPicture(PictureFile: string): void;

		UserTextured(TextureFile: string): void;

		BackColor: ColorFormat;

		ForeColor: ColorFormat;

		readonly GradientColorType: Kso.MsoGradientColorType;

		readonly GradientDegree: number;

		readonly GradientStyle: Kso.MsoGradientStyle;

		readonly GradientVariant: number;

		readonly Pattern: Kso.MsoPatternType;

		readonly PresetGradientType: Kso.MsoPresetGradientType;

		readonly PresetTexture: Kso.MsoPresetTexture;

		readonly TextureName: string;

		readonly TextureType: Kso.MsoTextureType;

		Transparency: number;

		readonly Type: Kso.MsoFillType;

		Visible: Kso.MsoTriState;

		readonly GradientStops: Kso.GradientStops;

		TextureOffsetX: number;

		TextureOffsetY: number;

		TextureAlignment: Kso.MsoTextureAlignment;

		TextureHorizontalScale: number;

		TextureVerticalScale: number;

		TextureTile: Kso.MsoTriState;

		RotateWithObject: Kso.MsoTriState;

		readonly PictureEffects: Kso.PictureEffects;

		GradientAngle: number;

	}

	interface DiagramNodes {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): DiagramNode;

		SelectAll(): void;

		readonly Parent: any;

		readonly Count: number;

	}

	interface DiagramNode {
		readonly Application: any;

		readonly Creator: number;

		/**
		 * @param pos 默认值为 2
		 * @param nodeType 默认值为 1
		 */
		AddNode(pos?: Kso.MsoRelativeNodePosition, nodeType?: Kso.MsoDiagramNodeType): DiagramNode;

		Delete(): void;

		MoveNode(pTargetNode: DiagramNode, pos: Kso.MsoRelativeNodePosition): void;

		ReplaceNode(pTargetNode: DiagramNode): void;

		/**
		 * @param swapChildren 默认值为 true
		 */
		SwapNode(pTargetNode: DiagramNode, swapChildren?: boolean): void;

		/**
		 * @param pos 默认值为 2
		 */
		CloneNode(copyChildren: boolean, pTargetNode: DiagramNode, pos?: Kso.MsoRelativeNodePosition): DiagramNode;

		TransferChildren(pReceivingNode: DiagramNode): void;

		NextNode(): DiagramNode;

		PrevNode(): DiagramNode;

		readonly Parent: any;

		readonly Children: DiagramNodeChildren;

		readonly Shape: Shape;

		readonly Root: DiagramNode;

		readonly Diagram: Kso.MsoDiagram;

		Layout: Kso.MsoOrgChartLayoutType;

		readonly TextShape: Shape;

	}

	interface DiagramNodeChildren {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): DiagramNode;

		/**
		 * @param Index 默认值为 -1
		 * @param nodeType 默认值为 1
		 */
		AddNode(Index?: any, nodeType?: Kso.MsoDiagramNodeType): DiagramNode;

		SelectAll(): void;

		readonly Parent: any;

		readonly Count: number;

		readonly FirstChild: DiagramNode;

		readonly LastChild: DiagramNode;

	}

	interface Shape {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Apply(): void;

		Delete(): void;

		Duplicate(): Shape;

		Flip(FlipCmd: Kso.MsoFlipCmd): void;

		IncrementLeft(Increment: number): void;

		IncrementRotation(Increment: number): void;

		IncrementTop(Increment: number): void;

		PickUp(): void;

		RerouteConnections(): void;

		ScaleHeight(Factor: number, RelativeToOriginalSize: Kso.MsoTriState, Scale?: any): void;

		ScaleWidth(Factor: number, RelativeToOriginalSize: Kso.MsoTriState, Scale?: any): void;

		Select(Replace?: any): void;

		SetShapesDefaultProperties(): void;

		Ungroup(): ShapeRange;

		ZOrder(ZOrderCmd: Kso.MsoZOrderCmd): void;

		readonly Adjustments: Adjustments;

		readonly TextFrame: TextFrame;

		AutoShapeType: Kso.MsoAutoShapeType;

		readonly Callout: CalloutFormat;

		readonly ConnectionSiteCount: number;

		readonly Connector: Kso.MsoTriState;

		readonly ConnectorFormat: ConnectorFormat;

		readonly Fill: FillFormat;

		readonly GroupItems: GroupShapes;

		Height: number;

		readonly HorizontalFlip: Kso.MsoTriState;

		Left: number;

		readonly Line: LineFormat;

		LockAspectRatio: Kso.MsoTriState;

		Name: string;

		readonly Nodes: ShapeNodes;

		Rotation: number;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly TextEffect: TextEffectFormat;

		readonly ThreeD: ThreeDFormat;

		Top: number;

		readonly Type: Kso.MsoShapeType;

		readonly VerticalFlip: Kso.MsoTriState;

		readonly Vertices: any;

		Visible: Kso.MsoTriState;

		Width: number;

		readonly ZOrderPosition: number;

		readonly Hyperlink: Hyperlink;

		BlackWhiteMode: Kso.MsoBlackWhiteMode;

		readonly DrawingObject: any;

		OnAction: string;

		Locked: boolean;

		readonly TopLeftCell: Range;

		readonly BottomRightCell: Range;

		Placement: XlPlacement;

		Copy(): void;

		Cut(): void;

		CopyPicture(Appearance?: any, Format?: any): void;

		readonly ControlFormat: ControlFormat;

		readonly LinkFormat: LinkFormat;

		readonly OLEFormat: OLEFormat;

		readonly FormControlType: XlFormControl;

		AlternativeText: string;

		readonly Script: Kso.Script;

		readonly DiagramNode: DiagramNode;

		readonly HasDiagramNode: Kso.MsoTriState;

		readonly Diagram: Diagram;

		readonly HasDiagram: Kso.MsoTriState;

		readonly Child: Kso.MsoTriState;

		readonly ParentGroup: Shape;

		readonly CanvasItems: Kso.CanvasShapes;

		readonly ID: number;

		CanvasCropLeft(Increment: number): void;

		CanvasCropTop(Increment: number): void;

		CanvasCropRight(Increment: number): void;

		CanvasCropBottom(Increment: number): void;

		readonly Chart: Chart;

		readonly HasChart: Kso.MsoTriState;

		readonly TextFrame2: TextFrame2;

		ShapeStyle: Kso.MsoShapeStyleIndex;

		BackgroundStyle: Kso.MsoBackgroundStyleIndex;

		readonly SoftEdge: Kso.SoftEdgeFormat;

		readonly Glow: Kso.GlowFormat;

		readonly Reflection: Kso.ReflectionFormat;

		readonly HasSmartArt: Kso.MsoTriState;

		readonly SmartArt: Kso.SmartArt;

		Title: string;

		readonly IdentificationText: string;

		readonly HasWebShape: Kso.MsoTriState;

		SaveAsPicture(Filename: any): void;

	}

	interface Application {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: Application;

		readonly ActiveCell: Range;

		readonly ActiveChart: Chart;

		readonly ActiveDialog: DialogSheet;

		readonly ActiveMenuBar: MenuBar;

		ActivePrinter: string;

		readonly ActiveSheet: Worksheet;

		readonly ActiveWindow: Window;

		readonly ActiveWorkbook: Workbook;

		readonly AddIns: AddIns;

		readonly Assistant: Kso.Assistant;

		Calculate(): void;

		readonly Cells: Range;

		readonly Charts: Sheets;

		readonly Columns: Range;

		readonly CommandBars: Kso.CommandBars;

		readonly DDEAppReturnCode: number;

		DDEExecute(Channel: number, String: string): void;

		DDEInitiate(App: string, Topic: string): number;

		DDEPoke(Channel: number, Item: any, Data: any): void;

		DDERequest(Channel: number, Item: string): any;

		DDETerminate(Channel: number): void;

		readonly DialogSheets: Sheets;

		Evaluate(Name: any): any;

		_Evaluate(Name: any): any;

		ExecuteExcel4Macro(String: string): any;

		Intersect(Arg1: Range, Arg2: Range, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): Range;

		readonly MenuBars: MenuBars;

		readonly Modules: Modules;

		readonly Names: Names;

		Range(Cell1: any, Cell2?: any): Range;

		readonly Rows: Range;

		Run(Macro?: any, Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		_Run2(Macro?: any, Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		readonly Selection: any;

		SendKeys(Keys: any, Wait?: any): void;

		readonly Sheets: Sheets;

		ShortcutMenus(Index: number): Menu;

		readonly ThisWorkbook: Workbook;

		readonly Toolbars: Toolbars;

		Union(Arg1: Range, Arg2: Range, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): Range;

		readonly Windows: Windows;

		readonly Workbooks: Workbooks;

		readonly WorksheetFunction: WorksheetFunction;

		readonly Worksheets: Sheets;

		readonly Excel4IntlMacroSheets: Sheets;

		readonly Excel4MacroSheets: Sheets;

		ActivateMicrosoftApp(Index: XlMSApplication): void;

		AddChartAutoFormat(Chart: any, Name: string, Description?: any): void;

		AddCustomList(ListArray: any, ByRow?: any): void;

		AlertBeforeOverwriting: boolean;

		AltStartupPath: string;

		AskToUpdateLinks: boolean;

		EnableAnimations: boolean;

		readonly AutoCorrect: AutoCorrect;

		readonly Build: number;

		CalculateBeforeSave: boolean;

		Calculation: XlCalculation;

		Caller(Index?: any): any;

		readonly CanPlaySounds: boolean;

		readonly CanRecordSounds: boolean;

		Caption: string;

		CellDragAndDrop: boolean;

		CentimetersToPoints(Centimeters: number): number;

		CheckSpelling(Word: string, CustomDictionary?: any, IgnoreUppercase?: any): boolean;

		ClipboardFormats(Index?: any): any;

		DisplayClipboardWindow: boolean;

		ColorButtons: boolean;

		CommandUnderlines: XlCommandUnderlines;

		ConstrainNumeric: boolean;

		ConvertFormula(Formula: any, FromReferenceStyle: XlReferenceStyle, ToReferenceStyle?: any, ToAbsolute?: any, RelativeTo?: any): any;

		CopyObjectsWithCells: boolean;

		Cursor: XlMousePointer;

		readonly CustomListCount: number;

		CutCopyMode: XlCutCopyMode;

		DataEntryMode: number;

		Dummy1(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

		Dummy2(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any): any;

		Dummy3(): any;

		Dummy4(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any): any;

		Dummy5(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any): any;

		Dummy6(): any;

		Dummy7(): any;

		Dummy8(Arg1?: any): any;

		Dummy9(): any;

		Dummy10(arg?: any): boolean;

		Dummy11(): void;

		readonly _Default: string;

		DefaultFilePath: string;

		DeleteChartAutoFormat(Name: string): void;

		DeleteCustomList(ListNum: number): void;

		readonly Dialogs: Dialogs;

		DisplayAlerts: boolean;

		DisplayFormulaBar: boolean;

		DisplayFullScreen: boolean;

		DisplayNoteIndicator: boolean;

		DisplayCommentIndicator: XlCommentDisplayMode;

		DisplayExcel4Menus: boolean;

		DisplayRecentFiles: boolean;

		DisplayScrollBars: boolean;

		DisplayStatusBar: boolean;

		DoubleClick(): void;

		EditDirectlyInCell: boolean;

		EnableAutoComplete: boolean;

		EnableCancelKey: XlEnableCancelKey;

		EnableSound: boolean;

		EnableTipWizard: boolean;

		FileConverters(Index1?: any, Index2?: any): any;

		readonly FileSearch: Kso.FileSearch;

		readonly FileFind: Kso.Find;

		_FindFile(): void;

		FixedDecimal: boolean;

		FixedDecimalPlaces: number;

		GetCustomListContents(ListNum: number): any;

		GetCustomListNum(ListArray: any): number;

		GetOpenFilename(FileFilter?: any, FilterIndex?: any, Title?: any, ButtonText?: any, MultiSelect?: any): any;

		GetSaveAsFilename(InitialFilename?: any, FileFilter?: any, FilterIndex?: any, Title?: any, ButtonText?: any): any;

		Goto(Reference?: any, Scroll?: any): void;

		Height: number;

		Help(HelpFile?: any, HelpContextID?: any): void;

		IgnoreRemoteRequests: boolean;

		InchesToPoints(Inches: number): number;

		InputBox(Prompt: string, Title?: any, Default?: any, Left?: any, Top?: any, HelpFile?: any, HelpContextID?: any, Type?: any): any;

		Interactive: boolean;

		International(Index?: any): any;

		Iteration: boolean;

		LargeButtons: boolean;

		Left: number;

		readonly LibraryPath: string;

		_MacroOptions(Macro?: any, Description?: any, HasMenu?: any, MenuText?: any, HasShortcutKey?: any, ShortcutKey?: any, Category?: any, StatusBar?: any, HelpContextID?: any, HelpFile?: any): void;

		MailLogoff(): void;

		MailLogon(Name?: any, Password?: any, DownloadNewMail?: any): void;

		readonly MailSession: any;

		readonly MailSystem: XlMailSystem;

		readonly MathCoprocessorAvailable: boolean;

		MaxChange: number;

		MaxIterations: number;

		readonly MemoryFree: number;

		readonly MemoryTotal: number;

		readonly MemoryUsed: number;

		readonly MouseAvailable: boolean;

		MoveAfterReturn: boolean;

		MoveAfterReturnDirection: XlDirection;

		readonly RecentFiles: RecentFiles;

		readonly Name: string;

		NextLetter(): Workbook;

		readonly NetworkTemplatesPath: string;

		readonly ODBCErrors: ODBCErrors;

		ODBCTimeout: number;

		OnCalculate: string;

		OnData: string;

		OnDoubleClick: string;

		OnEntry: string;

		OnKey(Key: string, Procedure?: any): void;

		OnRepeat(Text: string, Procedure: string): void;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		OnTime(EarliestTime: any, Procedure: string, LatestTime?: any, Schedule?: any): void;

		OnUndo(Text: string, Procedure: string): void;

		OnWindow: string;

		readonly OperatingSystem: string;

		readonly OrganizationName: string;

		readonly Path: string;

		readonly PathSeparator: string;

		PreviousSelections(Index?: any): any;

		PivotTableSelection: boolean;

		PromptForSummaryInfo: boolean;

		Quit(): void;

		RecordMacro(BasicCode?: any, XlmCode?: any): void;

		readonly RecordRelative: boolean;

		ReferenceStyle: XlReferenceStyle;

		RegisteredFunctions(Index1?: any, Index2?: any): any;

		RegisterXLL(Filename: string): boolean;

		Repeat(): void;

		ResetTipWizard(): void;

		RollZoom: boolean;

		Save(Filename?: any): void;

		SaveWorkspace(Filename?: any): void;

		ScreenUpdating: boolean;

		SetDefaultChart(FormatName?: any, Gallery?: any): void;

		SheetsInNewWorkbook: number;

		ShowChartTipNames: boolean;

		ShowChartTipValues: boolean;

		StandardFont: string;

		StandardFontSize: number;

		readonly StartupPath: string;

		StatusBar: any;

		readonly TemplatesPath: string;

		ShowToolTips: boolean;

		Top: number;

		DefaultSaveFormat: XlFileFormat;

		TransitionMenuKey: string;

		TransitionMenuKeyAction: number;

		TransitionNavigKeys: boolean;

		Undo(): void;

		readonly UsableHeight: number;

		readonly UsableWidth: number;

		UserControl: boolean;

		UserName: string;

		readonly Value: string;

		readonly Version: string;

		Visible: boolean;

		Volatile(Volatile?: any): void;

		_Wait(Time: any): void;

		Width: number;

		readonly WindowsForPens: boolean;

		WindowState: XlWindowState;

		UILanguage: number;

		DefaultSheetDirection: number;

		CursorMovement: number;

		ControlCharacters: boolean;

		_WSFunction(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		EnableEvents: boolean;

		DisplayInfoWindow: boolean;

		Wait(Time: any): boolean;

		ExtendList: boolean;

		readonly OLEDBErrors: OLEDBErrors;

		GetPhonetic(Text?: any): string;

		readonly COMAddIns: Kso.COMAddIns;

		readonly DefaultWebOptions: DefaultWebOptions;

		readonly ProductCode: string;

		readonly UserLibraryPath: string;

		AutoPercentEntry: boolean;

		readonly LanguageSettings: Kso.LanguageSettings;

		readonly Dummy101: any;

		Dummy12(p1: PivotTable, p2: PivotTable): void;

		readonly AnswerWizard: Kso.AnswerWizard;

		CalculateFull(): void;

		FindFile(): boolean;

		readonly CalculationVersion: number;

		ShowWindowsInTaskbar: boolean;

		FeatureInstall: Kso.MsoFeatureInstall;

		readonly Ready: boolean;

		Dummy13(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		FindFormat: CellFormat;

		ReplaceFormat: CellFormat;

		readonly UsedObjects: UsedObjects;

		readonly CalculationState: XlCalculationState;

		CalculationInterruptKey: XlCalculationInterruptKey;

		readonly Watches: Watches;

		DisplayFunctionToolTips: boolean;

		AutomationSecurity: Kso.MsoAutomationSecurity;

		FileDialog(fileDialogType: Kso.MsoFileDialogType): Kso.FileDialog;

		Dummy14(): void;

		CalculateFullRebuild(): void;

		DisplayPasteOptions: boolean;

		DisplayInsertOptions: boolean;

		GenerateGetPivotData: boolean;

		readonly AutoRecover: AutoRecover;

		readonly Hwnd: number;

		readonly Hinstance: number;

		CheckAbort(KeepAbort?: any): void;

		readonly ErrorCheckingOptions: ErrorCheckingOptions;

		AutoFormatAsYouTypeReplaceHyperlinks: boolean;

		readonly SmartTagRecognizers: SmartTagRecognizers;

		readonly NewWorkbook: Kso.NewFile;

		readonly SpellingOptions: SpellingOptions;

		readonly Speech: Speech;

		MapPaperSize: boolean;

		ShowStartupDialog: boolean;

		DecimalSeparator: string;

		ThousandsSeparator: string;

		UseSystemSeparators: boolean;

		readonly ThisCell: Range;

		readonly RTD: RTD;

		DisplayDocumentActionTaskPane: boolean;

		DisplayXMLSourcePane(XmlMap?: any): void;

		readonly ArbitraryXMLSupportAvailable: boolean;

		Support(Object: any, ID: number, arg?: any): any;

		Dummy20(grfCompareFunctions: number): any;

		MeasurementUnit: number;

		ShowSelectionFloaties: boolean;

		ShowMenuFloaties: boolean;

		ShowDevTools: boolean;

		EnableLivePreview: boolean;

		DisplayDocumentInformationPanel: boolean;

		AlwaysUseClearType: boolean;

		WarnOnFunctionNameConflict: boolean;

		FormulaBarHeight: number;

		DisplayFormulaAutoComplete: boolean;

		GenerateTableRefs: XlGenerateTableRefs;

		readonly Assistance: Kso.Assistance;

		CalculateUntilAsyncQueriesDone(): void;

		EnableLargeOperationAlert: boolean;

		LargeOperationCellThousandCount: number;

		DeferAsyncQueries: boolean;

		readonly MultiThreadedCalculation: MultiThreadedCalculation;

		SharePointVersion(bstrUrl: string): number;

		readonly ActiveEncryptionSession: number;

		HighQualityModeForGraphics: boolean;

		readonly FileExportConverters: FileExportConverters;

		readonly SmartArtLayouts: Kso.SmartArtLayouts;

		readonly SmartArtQuickStyles: Kso.SmartArtQuickStyles;

		readonly SmartArtColors: Kso.SmartArtColors;

		readonly AddIns2: AddIns2;

		PrintCommunication: boolean;

		MacroOptions(Macro?: any, Description?: any, HasMenu?: any, MenuText?: any, HasShortcutKey?: any, ShortcutKey?: any, Category?: any, StatusBar?: any, HelpContextID?: any, HelpFile?: any, ArgumentDescriptions?: any): void;

		UseClusterConnector: boolean;

		ClusterConnector: string;

		readonly Quitting: boolean;

		Dummy22: boolean;

		Dummy23: boolean;

		readonly ProtectedViewWindows: ProtectedViewWindows;

		readonly ActiveProtectedViewWindow: ProtectedViewWindow;

		readonly IsSandboxed: boolean;

		SaveISO8601Dates: boolean;

		readonly HinstancePtr: any;

		FileValidation: Kso.MsoFileValidationMode;

		FileValidationPivot: XlFileValidationPivotMode;

		ShowQuickAnalysis: boolean;

		readonly QuickAnalysis: QuickAnalysis;

		FlashFill: boolean;

		EnableMacroAnimations: boolean;

		ChartDataPointTrack: boolean;

		FlashFillMode: boolean;

		MergeInstances: boolean;

		EnableCheckFileExtensions: boolean;

		readonly DebugTools: DebugTools;

	}

	interface Range {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): any;

		AddIndent: any;

		/**
		 * @param ReferenceStyle 默认值为 1
		 */
		Address(RowAbsolute?: any, ColumnAbsolute?: any, ReferenceStyle?: XlReferenceStyle, External?: any, RelativeTo?: any): string;

		/**
		 * @param ReferenceStyle 默认值为 1
		 */
		AddressLocal(RowAbsolute?: any, ColumnAbsolute?: any, ReferenceStyle?: XlReferenceStyle, External?: any, RelativeTo?: any): string;

		AdvancedFilter(Action: XlFilterAction, CriteriaRange?: any, CopyToRange?: any, Unique?: any): any;

		/**
		 * @param Order 默认值为 1
		 */
		ApplyNames(Names?: any, IgnoreRelativeAbsolute?: any, UseRowColumnNames?: any, OmitColumn?: any, OmitRow?: any, Order?: XlApplyNamesOrder, AppendLast?: any): any;

		ApplyOutlineStyles(): any;

		readonly Areas: Areas;

		AutoComplete(String: string): string;

		/**
		 * @param Type 默认值为 0
		 */
		AutoFill(Destination: Range, Type?: XlAutoFillType): any;

		/**
		 * @param Operator 默认值为 1
		 */
		AutoFilter(Field?: any, Criteria1?: any, Operator?: XlAutoFilterOperator, Criteria2?: any, VisibleDropDown?: any): any;

		AutoFit(): any;

		/**
		 * @param Format 默认值为 1
		 */
		AutoFormat(Format?: XlRangeAutoFormat, Number?: any, Font?: any, Alignment?: any, Border?: any, Pattern?: any, Width?: any): any;

		AutoOutline(): any;

		/**
		 * @param Weight 默认值为 2
		 * @param ColorIndex 默认值为 -4105
		 */
		_BorderAround(LineStyle?: any, Weight?: Kso.XlBorderWeight, ColorIndex?: Kso.XlColorIndex, Color?: any): any;

		readonly Borders: Borders;

		Calculate(): any;

		readonly Cells: Range;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		Clear(): any;

		ClearContents(): any;

		ClearFormats(): any;

		ClearNotes(): any;

		ClearOutline(): any;

		readonly Column: number;

		ColumnDifferences(Comparison: any): Range;

		readonly Columns: Range;

		ColumnWidth: any;

		Consolidate(Sources?: any, Function?: any, TopRow?: any, LeftColumn?: any, CreateLinks?: any): any;

		Copy(Destination?: any): any;

		CopyFromRecordset(Data: any, MaxRows?: any, MaxColumns?: any): number;

		/**
		 * @param Appearance 默认值为 1
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		readonly Count: number;

		CreateNames(Top?: any, Left?: any, Bottom?: any, Right?: any): any;

		/**
		 * @param Appearance 默认值为 1
		 */
		CreatePublisher(Edition?: any, Appearance?: XlPictureAppearance, ContainsPICT?: any, ContainsBIFF?: any, ContainsRTF?: any, ContainsVALU?: any): any;

		readonly CurrentArray: Range;

		readonly CurrentRegion: Range;

		Cut(Destination?: any): any;

		/**
		 * @param Type 默认值为 -4132
		 * @param Date 默认值为 1
		 */
		DataSeries(Rowcol?: any, Type?: XlDataSeriesType, Date?: XlDataSeriesDate, Step?: any, Stop?: any, Trend?: any): any;

		_Default(RowIndex?: any, ColumnIndex?: any, RHS?: any): void;

		_Default(RowIndex?: any, ColumnIndex?: any): any;

		Delete(Shift?: any): any;

		readonly Dependents: Range;

		DialogBox(): any;

		readonly DirectDependents: Range;

		readonly DirectPrecedents: Range;

		/**
		 * @param Appearance 默认值为 1
		 * @param ChartSize 默认值为 1
		 */
		EditionOptions(Type: XlEditionType, Option: XlEditionOptionsOption, Name?: any, Reference?: any, Appearance?: XlPictureAppearance, ChartSize?: XlPictureAppearance, Format?: any): any;

		End(Direction: XlDirection): Range;

		readonly EntireColumn: Range;

		readonly EntireRow: Range;

		FillDown(): any;

		FillLeft(): any;

		FillRight(): any;

		FillUp(): any;

		/**
		 * @param SearchDirection 默认值为 1
		 */
		Find(What: any, After?: any, LookIn?: any, LookAt?: any, SearchOrder?: any, SearchDirection?: XlSearchDirection, MatchCase?: any, MatchByte?: any, SearchFormat?: any): Range;

		FindNext(After?: any): Range;

		FindPrevious(After?: any): Range;

		readonly Font: Font;

		Formula: any;

		FormulaArray: any;

		FormulaLabel: XlFormulaLabel;

		FormulaHidden: any;

		FormulaLocal: any;

		FormulaR1C1: any;

		FormulaR1C1Local: any;

		FunctionWizard(): any;

		GoalSeek(Goal: any, ChangingCell: Range): boolean;

		Group(Start?: any, End?: any, By?: any, Periods?: any): any;

		readonly HasArray: any;

		readonly HasFormula: any;

		readonly Height: any;

		Hidden: any;

		HorizontalAlignment: any;

		IndentLevel: any;

		InsertIndent(InsertAmount: number): void;

		Insert(Shift?: any, CopyOrigin?: any): any;

		readonly Interior: Interior;

		Item(RowIndex: any, ColumnIndex: any, RHS: any): void;

		Item(RowIndex: any, ColumnIndex?: any): any;

		Justify(): any;

		readonly Left: any;

		readonly ListHeaderRows: number;

		ListNames(): any;

		readonly LocationInTable: XlLocationInTable;

		Locked: any;

		Merge(Across?: any): void;

		UnMerge(): void;

		readonly MergeArea: Range;

		MergeCells: any;

		Name: any;

		NavigateArrow(TowardPrecedent?: any, ArrowNumber?: any, LinkNumber?: any): any;

		readonly Next: Range;

		NoteText(Text?: any, Start?: any, Length?: any): string;

		NumberFormat: any;

		NumberFormatLocal: any;

		Offset(RowOffset?: any, ColumnOffset?: any): Range;

		Orientation: any;

		OutlineLevel: any;

		PageBreak: number;

		Parse(ParseLine?: any, Destination?: any): any;

		/**
		 * @param Paste 默认值为 -4104
		 * @param Operation 默认值为 -4142
		 */
		_PasteSpecial(Paste?: XlPasteType, Operation?: XlPasteSpecialOperation, SkipBlanks?: any, Transpose?: any): any;

		readonly PivotField: PivotField;

		readonly PivotItem: PivotItem;

		readonly PivotTable: PivotTable;

		readonly Precedents: Range;

		readonly PrefixCharacter: any;

		readonly Previous: Range;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): any;

		PrintPreview(EnableChanges?: any): any;

		readonly QueryTable: QueryTable;

		Range(Cell1: any, Cell2?: any): Range;

		RemoveSubtotal(): any;

		Replace(What: any, Replacement: any, LookAt?: any, SearchOrder?: any, MatchCase?: any, MatchByte?: any, SearchFormat?: any, ReplaceFormat?: any): boolean;

		Resize(RowSize?: any, ColumnSize?: any): Range;

		readonly Row: number;

		RowDifferences(Comparison: any): Range;

		RowHeight: any;

		readonly Rows: Range;

		Run(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		Select(): any;

		Show(): any;

		ShowDependents(Remove?: any): any;

		ShowDetail: any;

		ShowErrors(): any;

		ShowPrecedents(Remove?: any): any;

		ShrinkToFit: any;

		/**
		 * @param Order1 默认值为 1
		 * @param Order2 默认值为 1
		 * @param Order3 默认值为 1
		 * @param Header 默认值为 2
		 * @param Orientation 默认值为 2
		 * @param SortMethod 默认值为 1
		 * @param DataOption1 默认值为 0
		 * @param DataOption2 默认值为 0
		 * @param DataOption3 默认值为 0
		 */
		Sort(Key1?: any, Order1?: XlSortOrder, Key2?: any, Type?: any, Order2?: XlSortOrder, Key3?: any, Order3?: XlSortOrder, Header?: XlYesNoGuess, OrderCustom?: any, MatchCase?: any, Orientation?: XlSortOrientation, SortMethod?: XlSortMethod, DataOption1?: XlSortDataOption, DataOption2?: XlSortDataOption, DataOption3?: XlSortDataOption): any;

		/**
		 * @param SortMethod 默认值为 1
		 * @param Order1 默认值为 1
		 * @param Order2 默认值为 1
		 * @param Order3 默认值为 1
		 * @param Header 默认值为 2
		 * @param Orientation 默认值为 2
		 * @param DataOption1 默认值为 0
		 * @param DataOption2 默认值为 0
		 * @param DataOption3 默认值为 0
		 */
		SortSpecial(SortMethod?: XlSortMethod, Key1?: any, Order1?: XlSortOrder, Type?: any, Key2?: any, Order2?: XlSortOrder, Key3?: any, Order3?: XlSortOrder, Header?: XlYesNoGuess, OrderCustom?: any, MatchCase?: any, Orientation?: XlSortOrientation, DataOption1?: XlSortDataOption, DataOption2?: XlSortDataOption, DataOption3?: XlSortDataOption): any;

		readonly SoundNote: SoundNote;

		SpecialCells(Type: XlCellType, Value?: any): Range;

		Style: any;

		/**
		 * @param Format 默认值为 -4158
		 */
		SubscribeTo(Edition: string, Format?: XlSubscribeToFormat): any;

		/**
		 * @param SummaryBelowData 默认值为 1
		 */
		Subtotal(GroupBy: number, Function: XlConsolidationFunction, TotalList: any, Replace?: any, PageBreaks?: any, SummaryBelowData?: XlSummaryRow): any;

		readonly Summary: any;

		Table(RowInput?: any, ColumnInput?: any): any;

		readonly Text: any;

		/**
		 * @param DataType 默认值为 1
		 * @param TextQualifier 默认值为 1
		 */
		TextToColumns(Destination?: any, DataType?: XlTextParsingType, TextQualifier?: XlTextQualifier, ConsecutiveDelimiter?: any, Tab?: any, Semicolon?: any, Comma?: any, Space?: any, Other?: any, OtherChar?: any, FieldInfo?: any, DecimalSeparator?: any, ThousandsSeparator?: any, TrailingMinusNumbers?: any): any;

		readonly Top: any;

		Ungroup(): any;

		UseStandardHeight: any;

		UseStandardWidth: any;

		readonly Validation: Validation;

		Value(RangeValueDataType?: any, RHS?: any): void;

		Value(RangeValueDataType?: any): any;

		Value2: any;

		VerticalAlignment: any;

		readonly Width: any;

		readonly Worksheet: Worksheet;

		WrapText: any;

		AddComment(Text?: any): Comment;

		readonly Comment: Comment;

		ClearComments(): void;

		readonly Phonetic: Phonetic;

		readonly FormatConditions: FormatConditions;

		ReadingOrder: number;

		readonly Hyperlinks: Hyperlinks;

		readonly Phonetics: Phonetics;

		SetPhonetic(): void;

		ID: string;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): any;

		readonly PivotCell: PivotCell;

		Dirty(): void;

		readonly Errors: Errors;

		readonly SmartTags: SmartTags;

		Speak(SpeakDirection?: any, SpeakFormulas?: any): void;

		/**
		 * @param Paste 默认值为 -4104
		 * @param Operation 默认值为 -4142
		 */
		PasteSpecial(Paste?: XlPasteType, Operation?: XlPasteSpecialOperation, SkipBlanks?: any, Transpose?: any): any;

		readonly AllowEdit: boolean;

		readonly ListObject: ListObject;

		readonly XPath: XPath;

		readonly ServerActions: Actions;

		/**
		 * @param Header 默认值为 2
		 */
		RemoveDuplicates(Columns?: any, Header?: XlYesNoGuess): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): any;

		readonly MDX: string;

		ExportAsFixedFormat(Type: XlFixedFormatType, Filename?: any, Quality?: any, IncludeDocProperties?: any, IgnorePrintAreas?: any, From?: any, To?: any, OpenAfterPublish?: any, FixedFormatExtClassPtr?: any): void;

		readonly CountLarge: any;

		CalculateRowMajorOrder(): any;

		readonly SparklineGroups: SparklineGroups;

		ClearHyperlinks(): void;

		readonly DisplayFormat: DisplayFormat;

		/**
		 * @param Weight 默认值为 2
		 * @param ColorIndex 默认值为 -4105
		 */
		BorderAround(LineStyle?: any, Weight?: Kso.XlBorderWeight, ColorIndex?: Kso.XlColorIndex, Color?: any, ThemeColor?: any): any;

		AllocateChanges(): void;

		DiscardChanges(): void;

		FlashFill(): void;

		readonly HasSpill: any;

		readonly SpillingToRange: Range;

		readonly SpillParent: Range;

		Formula2: any;

		Formula2Local: any;

		Formula2R1C1: any;

		Formula2R1C1Local: any;

	}

	interface Areas {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): Range;

		_Default(Index: number): Range;

	}

	interface Borders {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Color: any;

		ColorIndex: any;

		readonly Count: number;

		Item(Index: XlBordersIndex): Border;

		LineStyle: any;

		Value: any;

		Weight: any;

		_Default(Index: XlBordersIndex): Border;

		ThemeColor: any;

		TintAndShade: any;

	}

	interface Border {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Color: any;

		ColorIndex: any;

		LineStyle: any;

		Weight: any;

		ThemeColor: any;

		TintAndShade: any;

	}

	interface Characters {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Caption: string;

		readonly Count: number;

		Delete(): any;

		readonly Font: Font;

		Insert(String: string): any;

		Text: string;

		PhoneticCharacters: string;

	}

	interface Font {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Background: any;

		Bold: any;

		Color: any;

		ColorIndex: any;

		FontStyle: any;

		Italic: any;

		Name: any;

		OutlineFont: any;

		Shadow: any;

		Size: any;

		Strikethrough: any;

		Subscript: any;

		Superscript: any;

		Underline: any;

		ThemeColor: any;

		TintAndShade: any;

		ThemeFont: XlThemeFont;

	}

	interface Interior {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Color: any;

		ColorIndex: any;

		InvertIfNegative: any;

		Pattern: any;

		PatternColor: any;

		PatternColorIndex: any;

		ThemeColor: any;

		TintAndShade: any;

		PatternThemeColor: any;

		PatternTintAndShade: any;

		readonly Gradient: any;

	}

	interface PivotField {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Calculation: XlPivotFieldCalculation;

		readonly ChildField: PivotField;

		ChildItems(Index?: any): any;

		CurrentPage: any;

		readonly DataRange: Range;

		readonly DataType: XlPivotFieldDataType;

		_Default: string;

		Function: XlConsolidationFunction;

		readonly GroupLevel: any;

		HiddenItems(Index?: any): any;

		readonly LabelRange: Range;

		Name: string;

		NumberFormat: string;

		Orientation: Kso.XlPivotFieldOrientation;

		ShowAllItems: boolean;

		readonly ParentField: PivotField;

		ParentItems(Index?: any): any;

		PivotItems(Index?: any): any;

		Position: any;

		readonly SourceName: string;

		Subtotals(Index?: any, RHS?: any): void;

		Subtotals(Index?: any): any;

		BaseField: any;

		BaseItem: any;

		readonly TotalLevels: any;

		Value: string;

		VisibleItems(Index?: any): any;

		CalculatedItems(): CalculatedItems;

		Delete(): void;

		DragToColumn: boolean;

		DragToHide: boolean;

		DragToPage: boolean;

		DragToRow: boolean;

		DragToData: boolean;

		Formula: string;

		readonly IsCalculated: boolean;

		readonly MemoryUsed: number;

		ServerBased: boolean;

		_AutoSort(Order: number, Field: string): void;

		AutoShow(Type: number, Range: number, Count: number, Field: string): void;

		readonly AutoSortOrder: number;

		readonly AutoSortField: string;

		readonly AutoShowType: number;

		readonly AutoShowRange: number;

		readonly AutoShowCount: number;

		readonly AutoShowField: string;

		LayoutBlankLine: boolean;

		LayoutSubtotalLocation: XlSubtototalLocationType;

		LayoutPageBreak: boolean;

		LayoutForm: XlLayoutFormType;

		SubtotalName: string;

		Caption: string;

		DrilledDown: boolean;

		readonly CubeField: CubeField;

		CurrentPageName: string;

		StandardFormula: string;

		HiddenItemsList: any;

		DatabaseSort: boolean;

		readonly IsMemberProperty: boolean;

		readonly PropertyParentField: PivotField;

		PropertyOrder: number;

		EnableItemSelection: boolean;

		CurrentPageList: any;

		AddPageItem(Item: string, ClearList?: any): void;

		Hidden: boolean;

		DrillTo(Field: string): void;

		UseMemberPropertyAsCaption: boolean;

		MemberPropertyCaption: string;

		DisplayAsTooltip: boolean;

		DisplayInReport: boolean;

		readonly DisplayAsCaption: boolean;

		LayoutCompactRow: boolean;

		IncludeNewItemsInFilter: boolean;

		VisibleItemsList: any;

		readonly PivotFilters: PivotFilters;

		readonly AutoSortPivotLine: PivotLine;

		readonly AutoSortCustomSubtotal: number;

		readonly ShowingInAxis: boolean;

		EnableMultiplePageItems: boolean;

		readonly AllItemsVisible: boolean;

		ClearManualFilter(): void;

		ClearAllFilters(): void;

		ClearValueFilters(): void;

		ClearLabelFilters(): void;

		AutoSort(Order: number, Field: string, PivotLine?: any, CustomSubtotal?: any): void;

		readonly SourceCaption: string;

		ShowDetail: boolean;

		RepeatLabels: boolean;

	}

	interface CalculatedItems {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Add(Name: string, Formula: string): PivotItem;

		Item(Index: any): PivotItem;

		_Default(Field: any): PivotItem;

		Add(Name: string, Formula: string, UseStandardFormula?: any): PivotItem;

	}

	interface PivotItem {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: PivotField;

		ChildItems(Index?: any): any;

		readonly DataRange: Range;

		_Default: string;

		readonly LabelRange: Range;

		Name: string;

		readonly ParentItem: PivotItem;

		readonly ParentShowDetail: boolean;

		Position: number;

		ShowDetail: boolean;

		readonly SourceName: any;

		Value: string;

		Visible: boolean;

		Delete(): void;

		readonly IsCalculated: boolean;

		readonly RecordCount: number;

		Formula: string;

		Caption: string;

		DrilledDown: boolean;

		StandardFormula: string;

		readonly SourceNameStandard: string;

		DrillTo(Field: string): void;

	}

	interface CubeField {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly CubeFieldType: XlCubeFieldType;

		readonly _Caption: string;

		readonly Name: string;

		readonly Value: string;

		Orientation: Kso.XlPivotFieldOrientation;

		Position: number;

		readonly TreeviewControl: TreeviewControl;

		DragToColumn: boolean;

		DragToHide: boolean;

		DragToPage: boolean;

		DragToRow: boolean;

		DragToData: boolean;

		HiddenLevels: number;

		readonly HasMemberProperties: boolean;

		LayoutForm: XlLayoutFormType;

		readonly PivotFields: PivotFields;

		_AddMemberPropertyField(Property: string, PropertyOrder?: any): void;

		EnableMultiplePageItems: boolean;

		LayoutSubtotalLocation: XlSubtototalLocationType;

		ShowInFieldList: boolean;

		Delete(): void;

		AddMemberPropertyField(Property: string, PropertyOrder?: any, PropertyDisplayedIn?: any): void;

		IncludeNewItemsInFilter: boolean;

		readonly CubeFieldSubType: XlCubeFieldSubType;

		readonly AllItemsVisible: boolean;

		ClearManualFilter(): void;

		CreatePivotFields(): void;

		CurrentPageName: string;

		readonly IsDate: boolean;

		Caption: string;

		FlattenHierarchies: boolean;

		HierarchizeDistinct: boolean;

	}

	interface TreeviewControl {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Hidden: any;

		Drilled: any;

	}

	interface PivotFields {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: PivotTable;

		readonly Count: number;

		Item(Index: any): any;

	}

	interface PivotTable {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AddFields(RowFields?: any, ColumnFields?: any, PageFields?: any, AddToTable?: any): any;

		ColumnFields(Index?: any): any;

		ColumnGrand: boolean;

		readonly ColumnRange: Range;

		ShowPages(PageField?: any): any;

		readonly DataBodyRange: Range;

		DataFields(Index?: any): any;

		readonly DataLabelRange: Range;

		_Default: string;

		HasAutoFormat: boolean;

		HiddenFields(Index?: any): any;

		InnerDetail: string;

		Name: string;

		PageFields(Index?: any): any;

		readonly PageRange: Range;

		readonly PageRangeCells: Range;

		PivotFields(Index?: any): any;

		readonly RefreshDate: string;

		readonly RefreshName: string;

		RefreshTable(): boolean;

		RowFields(Index?: any): any;

		RowGrand: boolean;

		readonly RowRange: Range;

		SaveData: boolean;

		SourceData: any;

		readonly TableRange1: Range;

		readonly TableRange2: Range;

		Value: string;

		VisibleFields(Index?: any): any;

		CacheIndex: number;

		CalculatedFields(): CalculatedFields;

		DisplayErrorString: boolean;

		DisplayNullString: boolean;

		EnableDrilldown: boolean;

		EnableFieldDialog: boolean;

		EnableWizard: boolean;

		ErrorString: string;

		GetData(Name: string): number;

		ListFormulas(): void;

		ManualUpdate: boolean;

		MergeLabels: boolean;

		NullString: string;

		PivotCache(): PivotCache;

		readonly PivotFormulas: PivotFormulas;

		PivotTableWizard(SourceType?: any, SourceData?: any, TableDestination?: any, TableName?: any, RowGrand?: any, ColumnGrand?: any, SaveData?: any, HasAutoFormat?: any, AutoPage?: any, Reserved?: any, BackgroundQuery?: any, OptimizeCache?: any, PageFieldOrder?: any, PageFieldWrapCount?: any, ReadData?: any, Connection?: any): void;

		SubtotalHiddenPageItems: boolean;

		PageFieldOrder: number;

		PageFieldStyle: string;

		PageFieldWrapCount: number;

		PreserveFormatting: boolean;

		/**
		 * @param Mode 默认值为 0
		 */
		_PivotSelect(Name: string, Mode?: XlPTSelectionMode): void;

		PivotSelection: string;

		SelectionMode: XlPTSelectionMode;

		TableStyle: string;

		Tag: string;

		Update(): void;

		VacatedStyle: string;

		Format(Format: XlPivotFormatType): void;

		PrintTitles: boolean;

		readonly CubeFields: CubeFields;

		GrandTotalName: string;

		SmallGrid: boolean;

		RepeatItemsOnEachPrintedPage: boolean;

		TotalsAnnotation: boolean;

		/**
		 * @param Mode 默认值为 0
		 */
		PivotSelect(Name: string, Mode?: XlPTSelectionMode, UseStandardName?: any): void;

		PivotSelectionStandard: string;

		GetPivotData(DataField?: any, Field1?: any, Item1?: any, Field2?: any, Item2?: any, Field3?: any, Item3?: any, Field4?: any, Item4?: any, Field5?: any, Item5?: any, Field6?: any, Item6?: any, Field7?: any, Item7?: any, Field8?: any, Item8?: any, Field9?: any, Item9?: any, Field10?: any, Item10?: any, Field11?: any, Item11?: any, Field12?: any, Item12?: any, Field13?: any, Item13?: any, Field14?: any, Item14?: any): Range;

		readonly DataPivotField: PivotField;

		EnableDataValueEditing: boolean;

		AddDataField(Field: any, Caption?: any, Function?: any): PivotField;

		readonly MDX: string;

		ViewCalculatedMembers: boolean;

		readonly CalculatedMembers: CalculatedMembers;

		DisplayImmediateItems: boolean;

		Dummy15(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		EnableFieldList: boolean;

		VisualTotals: boolean;

		ShowPageMultipleItemLabel: boolean;

		readonly Version: XlPivotTableVersionList;

		CreateCubeFile(File: string, Measures?: any, Levels?: any, Members?: any, Properties?: any): string;

		DisplayEmptyRow: boolean;

		DisplayEmptyColumn: boolean;

		ShowCellBackgroundFromOLAP: boolean;

		readonly PivotColumnAxis: PivotAxis;

		readonly PivotRowAxis: PivotAxis;

		ShowDrillIndicators: boolean;

		PrintDrillIndicators: boolean;

		DisplayMemberPropertyTooltips: boolean;

		DisplayContextTooltips: boolean;

		ClearTable(): void;

		CompactRowIndent: number;

		LayoutRowDefault: XlLayoutRowType;

		DisplayFieldCaptions: boolean;

		RowAxisLayout(RowLayout: XlLayoutRowType): void;

		SubtotalLocation(Location: XlSubtototalLocationType): void;

		readonly ActiveFilters: PivotFilters;

		InGridDropZones: boolean;

		ClearAllFilters(): void;

		TableStyle2: any;

		ShowTableStyleLastColumn: boolean;

		ShowTableStyleRowStripes: boolean;

		ShowTableStyleColumnStripes: boolean;

		ShowTableStyleRowHeaders: boolean;

		ShowTableStyleColumnHeaders: boolean;

		ConvertToFormulas(ConvertFilters: boolean): void;

		AllowMultipleFilters: boolean;

		CompactLayoutRowHeader: string;

		CompactLayoutColumnHeader: string;

		FieldListSortAscending: boolean;

		SortUsingCustomLists: boolean;

		ChangeConnection(conn: WorkbookConnection): void;

		ChangePivotCache(PivotCache: any): void;

		Location: string;

		EnableWriteback: boolean;

		Allocation: XlAllocation;

		AllocationValue: XlAllocationValue;

		AllocationMethod: XlAllocationMethod;

		AllocationWeightExpression: string;

		AllocateChanges(): void;

		CommitChanges(): void;

		DiscardChanges(): void;

		RefreshDataSourceValues(): void;

		RepeatAllLabels(Repeat: XlPivotFieldRepeatLabels): void;

		readonly ChangeList: PivotTableChangeList;

		readonly Slicers: Slicers;

		AlternativeText: string;

		Summary: string;

		VisualTotalsForSets: boolean;

		ShowValuesRow: boolean;

		CalculatedMembersInFilters: boolean;

		PivotValueCell(rowline?: any, columnline?: any): PivotValueCell;

		readonly Hidden: boolean;

		readonly PivotChart: Shape;

		DrillDown(PivotItem: PivotItem, PivotLine?: any): void;

		DrillUp(PivotItem: PivotItem, PivotLine?: any, LevelUniqueName?: any): void;

		DrillTo(PivotItem: PivotItem, CubeField: CubeField, PivotLine?: any): void;

		Dummy2(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

	}

	interface CalculatedFields {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Add(Name: string, Formula: string): PivotField;

		Item(Index: any): PivotField;

		_Default(Field: any): PivotField;

		Add(Name: string, Formula: string, UseStandardFormula?: any): PivotField;

	}

	interface PivotCache {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BackgroundQuery: boolean;

		Connection: any;

		EnableRefresh: boolean;

		readonly Index: number;

		readonly MemoryUsed: number;

		OptimizeCache: boolean;

		readonly RecordCount: number;

		Refresh(): void;

		readonly RefreshDate: string;

		readonly RefreshName: string;

		RefreshOnFileOpen: boolean;

		Sql: any;

		SavePassword: boolean;

		SourceData: any;

		CommandText: any;

		CommandType: XlCmdType;

		readonly QueryType: XlQueryType;

		MaintainConnection: boolean;

		RefreshPeriod: number;

		Recordset: any;

		ResetTimer(): void;

		LocalConnection: any;

		CreatePivotTable(TableDestination: any, TableName?: any, ReadData?: any, DefaultVersion?: any): PivotTable;

		UseLocalConnection: boolean;

		readonly ADOConnection: any;

		readonly IsConnected: boolean;

		MakeConnection(): void;

		readonly OLAP: boolean;

		readonly SourceType: XlPivotTableSourceType;

		MissingItemsLimit: XlPivotTableMissingItems;

		SourceConnectionFile: string;

		readonly SourceDataFile: string;

		RobustConnect: XlRobustConnect;

		SaveAsODC(ODCFileName: string, Description?: any, Keywords?: any): void;

		readonly WorkbookConnection: WorkbookConnection;

		readonly Version: XlPivotTableVersionList;

		UpgradeOnRefresh: boolean;

		CreatePivotChart(ChartDestination: any, XlChartType?: any, Left?: any, Top?: any, Width?: any, Height?: any): Shape;

	}

	interface WorkbookConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Name: string;

		Description: string;

		_Default: string;

		readonly Type: XlConnectionType;

		readonly OLEDBConnection: OLEDBConnection;

		readonly ODBCConnection: ODBCConnection;

		readonly Ranges: Ranges;

		Delete(): void;

		Refresh(): void;

		readonly ModelConnection: ModelConnection;

		readonly WorksheetDataConnection: WorksheetDataConnection;

		RefreshWithRefreshAll: boolean;

		readonly TextConnection: TextConnection;

		readonly DataFeedConnection: DataFeedConnection;

		readonly InModel: boolean;

		readonly ModelTables: ModelTables;

	}

	interface OLEDBConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ADOConnection: any;

		BackgroundQuery: boolean;

		CancelRefresh(): void;

		CommandText: any;

		CommandType: XlCmdType;

		Connection: any;

		EnableRefresh: boolean;

		LocalConnection: any;

		MaintainConnection: boolean;

		MakeConnection(): void;

		Refresh(): void;

		readonly RefreshDate: string;

		readonly Refreshing: boolean;

		RefreshOnFileOpen: boolean;

		RefreshPeriod: number;

		RobustConnect: XlRobustConnect;

		SaveAsODC(ODCFileName: string, Description?: any, Keywords?: any): void;

		SavePassword: boolean;

		SourceConnectionFile: string;

		SourceDataFile: string;

		readonly OLAP: boolean;

		UseLocalConnection: boolean;

		MaxDrillthroughRecords: number;

		readonly IsConnected: boolean;

		ServerCredentialsMethod: XlCredentialsMethod;

		ServerSSOApplicationID: string;

		AlwaysUseConnectionFile: boolean;

		ServerFillColor: boolean;

		ServerFontStyle: boolean;

		ServerNumberFormat: boolean;

		ServerTextColor: boolean;

		RetrieveInOfficeUILang: boolean;

		Reconnect(): void;

		readonly CalculatedMembers: CalculatedMembers;

		LocaleID: number;

	}

	interface CalculatedMembers {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): CalculatedMember;

		_Default(Index: any): CalculatedMember;

		_Add(Name: string, Formula: string, SolveOrder?: any, Type?: any): CalculatedMember;

		Add(Name: string, Formula: any, SolveOrder?: any, Type?: any, Dynamic?: any, DisplayFolder?: any, HierarchizeDistinct?: any): CalculatedMember;

		AddCalculatedMember(Name: string, Formula: any, SolveOrder?: any, Type?: any, DisplayFolder?: any, MeasureGroup?: any, ParentHierarchy?: any, ParentMember?: any, NumberFormat?: any): CalculatedMember;

	}

	interface CalculatedMember {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly Formula: string;

		readonly SourceName: string;

		readonly SolveOrder: number;

		readonly IsValid: boolean;

		readonly _Default: string;

		Delete(): void;

		readonly Type: XlCalculatedMemberType;

		readonly Dynamic: boolean;

		readonly DisplayFolder: string;

		HierarchizeDistinct: boolean;

		FlattenHierarchies: boolean;

		readonly MeasureGroup: string;

		readonly ParentHierarchy: string;

		readonly ParentMember: string;

		readonly NumberFormat: XlCalcMemNumberFormatType;

	}

	interface ODBCConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BackgroundQuery: boolean;

		CancelRefresh(): void;

		CommandText: any;

		CommandType: XlCmdType;

		Connection: any;

		EnableRefresh: boolean;

		Refresh(): void;

		readonly RefreshDate: string;

		readonly Refreshing: boolean;

		RefreshOnFileOpen: boolean;

		RefreshPeriod: number;

		RobustConnect: XlRobustConnect;

		SaveAsODC(ODCFileName: string, Description?: any, Keywords?: any): void;

		SavePassword: boolean;

		SourceConnectionFile: string;

		SourceData: any;

		SourceDataFile: string;

		ServerCredentialsMethod: XlCredentialsMethod;

		ServerSSOApplicationID: string;

		AlwaysUseConnectionFile: boolean;

	}

	interface Ranges {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): Range;

		Item(Index: any): Range;

		readonly Count: number;

	}

	interface ModelConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		CommandText: any;

		CommandType: XlCmdType;

		readonly ADOConnection: any;

		readonly CalculatedMembers: CalculatedMembers;

	}

	interface WorksheetDataConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Connection: any;

		CommandText: any;

		CommandType: XlCmdType;

	}

	interface TextConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Connection: any;

		TextFileHeaderRow: boolean;

		TextFileColumnDataTypes: any;

		TextFileCommaDelimiter: boolean;

		TextFileConsecutiveDelimiter: boolean;

		TextFileDecimalSeparator: string;

		TextFileFixedColumnWidths: any;

		TextFileOtherDelimiter: string;

		TextFileParseType: XlTextParsingType;

		TextFilePlatform: XlPlatform;

		TextFilePromptOnRefresh: boolean;

		TextFileSemicolonDelimiter: boolean;

		TextFileSpaceDelimiter: boolean;

		TextFileStartRow: number;

		TextFileTabDelimiter: boolean;

		TextFileTextQualifier: XlTextQualifier;

		TextFileThousandsSeparator: string;

		TextFileTrailingMinusNumbers: boolean;

		TextFileVisualLayout: XlTextVisualLayoutType;

	}

	interface DataFeedConnection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AlwaysUseConnectionFile: boolean;

		CommandText: any;

		CommandType: XlCmdType;

		Connection: any;

		EnableRefresh: boolean;

		readonly RefreshDate: string;

		readonly Refreshing: boolean;

		RefreshOnFileOpen: boolean;

		RefreshPeriod: number;

		SavePassword: boolean;

		ServerCredentialsMethod: XlCredentialsMethod;

		SourceConnectionFile: string;

		SourceDataFile: string;

		CancelRefresh(): void;

		Refresh(): void;

		SaveAsODC(ODCFileName: string, Description?: any, Keywords?: any): void;

	}

	interface ModelTables {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelTable;

		_Default(Index: any): ModelTable;

	}

	interface ModelTable {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly SourceName: string;

		readonly ModelTableColumns: ModelTableColumns;

		readonly SourceWorkbookConnection: WorkbookConnection;

		Refresh(): void;

		readonly RecordCount: number;

	}

	interface ModelTableColumns {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelTableColumn;

		_Default(Index: any): ModelTableColumn;

	}

	interface ModelTableColumn {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly DataType: number;

	}

	interface PivotFormulas {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Add(Formula: string): PivotFormula;

		Item(Index: any): PivotFormula;

		_Default(Index: any): PivotFormula;

		Add(Formula: string, UseStandardFormula?: any): PivotFormula;

	}

	interface PivotFormula {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		_Default: string;

		Formula: string;

		Value: string;

		Index: number;

		StandardFormula: string;

	}

	interface CubeFields {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): CubeField;

		_Default(Index: any): CubeField;

		AddSet(Name: string, Caption: string): CubeField;

		GetMeasure(AttributeHierarchy: any, Function: XlConsolidationFunction, Caption?: any): CubeField;

	}

	interface PivotAxis {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly PivotLines: PivotLines;

	}

	interface PivotLines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): PivotLine;

		Item(Index: any): PivotLine;

		readonly Count: number;

	}

	interface PivotLine {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly LineType: XlPivotLineType;

		readonly Position: number;

		readonly PivotLineCells: PivotLineCells;

		readonly PivotLineCellsFull: PivotLineCells;

	}

	interface PivotLineCells {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): PivotCell;

		Item(Index: any): PivotCell;

		readonly Count: number;

		readonly Full: boolean;

	}

	interface PivotCell {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly PivotCellType: XlPivotCellType;

		readonly PivotTable: PivotTable;

		readonly DataField: PivotField;

		readonly PivotField: PivotField;

		readonly PivotItem: PivotItem;

		readonly RowItems: PivotItemList;

		readonly ColumnItems: PivotItemList;

		readonly Range: Range;

		readonly Dummy18: string;

		readonly CustomSubtotalFunction: XlConsolidationFunction;

		readonly PivotRowLine: PivotLine;

		readonly PivotColumnLine: PivotLine;

		AllocateChange(): void;

		DiscardChange(): void;

		readonly DataSourceValue: any;

		readonly CellChanged: XlCellChangedState;

		readonly MDX: string;

		readonly ServerActions: Actions;

	}

	interface PivotItemList {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): PivotItem;

		_Default(Field: any): PivotItem;

	}

	interface Actions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): Action;

		Item(Index: any): Action;

		readonly Count: number;

	}

	interface Action {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly Caption: string;

		readonly Type: XlActionType;

		readonly Coordinate: string;

		readonly Content: string;

		Execute(): void;

	}

	interface PivotFilters {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): PivotFilter;

		Item(Index: any): PivotFilter;

		readonly Count: number;

		Add(Type: XlPivotFilterType, DataField?: any, Value1?: any, Value2?: any, Order?: any, Name?: any, Description?: any, MemberPropertyField?: any): PivotFilter;

		Add2(Type: XlPivotFilterType, DataField?: any, Value1?: any, Value2?: any, Order?: any, Name?: any, Description?: any, MemberPropertyField?: any, WholeDayFilter?: any): PivotFilter;

	}

	interface PivotFilter {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Order: number;

		readonly FilterType: XlPivotFilterType;

		readonly Name: string;

		readonly Description: string;

		Delete(): void;

		readonly Active: boolean;

		readonly PivotField: PivotField;

		readonly DataField: PivotField;

		readonly DataCubeField: CubeField;

		readonly Value1: any;

		readonly Value2: any;

		readonly MemberPropertyField: PivotField;

		readonly IsMemberPropertyFilter: boolean;

		WholeDayFilter: boolean;

	}

	interface PivotTableChangeList {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): ValueChange;

		Item(Index: any): ValueChange;

		readonly Count: number;

		Add(Tuple: string, Value: number, AllocationValue?: any, AllocationMethod?: any, AllocationWeightExpression?: any): ValueChange;

	}

	interface ValueChange {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Order: number;

		readonly VisibleInPivotTable: boolean;

		readonly PivotCell: PivotCell;

		readonly Tuple: string;

		readonly Value: number;

		readonly AllocationValue: XlAllocationValue;

		readonly AllocationMethod: XlAllocationMethod;

		readonly AllocationWeightExpression: string;

		Delete(): void;

	}

	interface Slicers {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Slicer;

		_Default(Index: any): Slicer;

		Add(SlicerDestination: any, Level?: any, Name?: any, Caption?: any, Top?: any, Left?: any, Width?: any, Height?: any): Slicer;

	}

	interface Slicer {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Name: string;

		Caption: string;

		Top: number;

		Left: number;

		DisableMoveResizeUI: boolean;

		Width: number;

		Height: number;

		RowHeight: number;

		ColumnWidth: number;

		NumberOfColumns: number;

		DisplayHeader: boolean;

		Locked: boolean;

		readonly SlicerCache: SlicerCache;

		readonly SlicerCacheLevel: SlicerCacheLevel;

		readonly Shape: Shape;

		Style: any;

		Delete(): void;

		Cut(): void;

		Copy(): void;

		readonly ActiveItem: SlicerItem;

		readonly TimelineViewState: TimelineViewState;

		readonly SlicerCacheType: XlSlicerCacheType;

	}

	interface SlicerCache {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Index: number;

		readonly OLAP: boolean;

		readonly SourceType: XlPivotTableSourceType;

		readonly WorkbookConnection: WorkbookConnection;

		readonly Slicers: Slicers;

		readonly PivotTables: SlicerPivotTables;

		readonly SlicerCacheLevels: SlicerCacheLevels;

		Name: string;

		readonly VisibleSlicerItems: SlicerItems;

		VisibleSlicerItemsList: any;

		readonly SlicerItems: SlicerItems;

		CrossFilterType: XlSlicerCrossFilterType;

		SortItems: XlSlicerSort;

		readonly SourceName: string;

		SortUsingCustomLists: boolean;

		ShowAllItems: boolean;

		ClearManualFilter(): void;

		Delete(): void;

		readonly TimelineState: TimelineState;

		ClearAllFilters(): void;

		readonly SlicerCacheType: XlSlicerCacheType;

		readonly FilterCleared: boolean;

		readonly List: boolean;

		RequireManualUpdate: boolean;

		readonly ListObject: ListObject;

		ClearDateFilter(): void;

	}

	interface SlicerPivotTables {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): PivotTable;

		_Default(Index: any): PivotTable;

		AddPivotTable(PivotTable: PivotTable): void;

		RemovePivotTable(PivotTable: any): void;

	}

	interface SlicerCacheLevels {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Level?: any): SlicerCacheLevel;

		_Default(Level?: any): SlicerCacheLevel;

	}

	interface SlicerCacheLevel {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly SlicerItems: SlicerItems;

		readonly Count: number;

		readonly Ordinal: number;

		readonly Name: string;

		CrossFilterType: XlSlicerCrossFilterType;

		SortItems: XlSlicerSort;

		readonly VisibleSlicerItemsList: any;

	}

	interface SlicerItems {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): SlicerItem;

		_Default(Index: any): SlicerItem;

	}

	interface SlicerItem {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: SlicerCache;

		readonly Caption: string;

		readonly Name: string;

		readonly SourceName: any;

		readonly SourceNameStandard: string;

		readonly Value: string;

		Selected: boolean;

		readonly HasData: boolean;

	}

	interface TimelineState {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly StartDate: any;

		readonly EndDate: any;

		readonly FilterType: XlPivotFilterType;

		readonly FilterValue1: any;

		readonly FilterValue2: any;

		readonly SingleRangeFilterState: boolean;

		SetFilterDateRange(StartDate: any, EndDate: any): XlFilterStatus;

	}

	interface ListObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		Publish(Target: any, LinkSource: boolean): string;

		Refresh(): void;

		Unlink(): void;

		Unlist(): void;

		/**
		 * @param iConflictType 默认值为 0
		 */
		UpdateChanges(iConflictType?: XlListConflict): void;

		Resize(Range: Range): void;

		readonly _Default: string;

		readonly Active: boolean;

		readonly DataBodyRange: Range;

		readonly DisplayRightToLeft: boolean;

		readonly HeaderRowRange: Range;

		readonly InsertRowRange: Range;

		readonly ListColumns: ListColumns;

		readonly ListRows: ListRows;

		Name: string;

		readonly QueryTable: QueryTable;

		readonly Range: Range;

		ShowAutoFilter: boolean;

		ShowTotals: boolean;

		readonly SourceType: XlListObjectSourceType;

		readonly TotalsRowRange: Range;

		readonly SharePointURL: string;

		readonly XmlMap: XmlMap;

		DisplayName: string;

		ShowHeaders: boolean;

		readonly AutoFilter: AutoFilter;

		TableStyle: any;

		ShowTableStyleFirstColumn: boolean;

		ShowTableStyleLastColumn: boolean;

		ShowTableStyleRowStripes: boolean;

		ShowTableStyleColumnStripes: boolean;

		readonly Sort: Sort;

		Comment: string;

		ExportToVisio(): void;

		AlternativeText: string;

		Summary: string;

		readonly TableObject: TableObject;

		readonly Slicers: Slicers;

		ShowAutoFilterDropDown: boolean;

	}

	interface ListColumns {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Position?: any): ListColumn;

		_Default(Index: any): ListColumn;

		Item(Index: any): ListColumn;

		readonly Count: number;

	}

	interface ListColumn {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		readonly _Default: string;

		readonly ListDataFormat: ListDataFormat;

		readonly Index: number;

		Name: string;

		readonly Range: Range;

		TotalsCalculation: XlTotalsCalculation;

		readonly XPath: XPath;

		readonly SharePointFormula: string;

		readonly DataBodyRange: Range;

		readonly Total: Range;

	}

	interface ListDataFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: XlListDataType;

		readonly Choices: any;

		readonly DecimalPlaces: number;

		readonly DefaultValue: any;

		readonly IsPercent: boolean;

		readonly lcid: number;

		readonly MaxCharacters: number;

		readonly MaxNumber: any;

		readonly MinNumber: any;

		readonly Required: boolean;

		readonly Type: XlListDataType;

		readonly ReadOnly: boolean;

		readonly AllowFillIn: boolean;

	}

	interface XPath {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		readonly Value: string;

		readonly Map: XmlMap;

		SetValue(Map: XmlMap, XPath: string, SelectionNamespace?: any, Repeating?: any): void;

		Clear(): void;

		readonly Repeating: boolean;

	}

	interface XmlMap {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		Name: string;

		readonly IsExportable: boolean;

		ShowImportExportValidationErrors: boolean;

		SaveDataSourceDefinition: boolean;

		AdjustColumnWidth: boolean;

		PreserveColumnFilter: boolean;

		PreserveNumberFormatting: boolean;

		AppendOnImport: boolean;

		readonly RootElementName: string;

		readonly RootElementNamespace: XmlNamespace;

		readonly Schemas: XmlSchemas;

		readonly DataBinding: XmlDataBinding;

		Delete(): void;

		Import(Url: string, Overwrite?: any): XlXmlImportResult;

		ImportXml(XmlData: string, Overwrite?: any): XlXmlImportResult;

		Export(Url: string, Overwrite?: any): XlXmlExportResult;

		ExportXml(): {RHS: XlXmlExportResult, Data: string};

		readonly WorkbookConnection: WorkbookConnection;

	}

	interface XmlNamespace {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		readonly Uri: string;

		readonly Prefix: string;

	}

	interface XmlSchemas {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): XmlSchema;

		Item(Index: any): XmlSchema;

		readonly Count: number;

	}

	interface XmlSchema {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Namespace: XmlNamespace;

		readonly XML: string;

		readonly Name: string;

	}

	interface XmlDataBinding {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		Refresh(): XlXmlImportResult;

		LoadSettings(Url: string): void;

		ClearSettings(): void;

		readonly SourceUrl: string;

	}

	interface ListRows {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Add(Position?: any): ListRow;

		_Default(Index: any): ListRow;

		Item(Index: any): ListRow;

		readonly Count: number;

		Add(Position?: any, AlwaysInsert?: any): ListRow;

	}

	interface ListRow {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		readonly Index: number;

		readonly InvalidData: boolean;

		readonly Range: Range;

	}

	interface QueryTable {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Name: string;

		FieldNames: boolean;

		RowNumbers: boolean;

		FillAdjacentFormulas: boolean;

		HasAutoFormat: boolean;

		RefreshOnFileOpen: boolean;

		readonly Refreshing: boolean;

		readonly FetchedRowOverflow: boolean;

		BackgroundQuery: boolean;

		CancelRefresh(): void;

		RefreshStyle: XlCellInsertionMode;

		EnableRefresh: boolean;

		SavePassword: boolean;

		readonly Destination: Range;

		Connection: any;

		Sql: any;

		PostText: string;

		readonly ResultRange: Range;

		Delete(): void;

		Refresh(BackgroundQuery?: any): boolean;

		readonly Parameters: Parameters;

		Recordset: any;

		SaveData: boolean;

		TablesOnlyFromHTML: boolean;

		EnableEditing: boolean;

		TextFilePlatform: number;

		TextFileStartRow: number;

		TextFileParseType: XlTextParsingType;

		TextFileTextQualifier: XlTextQualifier;

		TextFileConsecutiveDelimiter: boolean;

		TextFileTabDelimiter: boolean;

		TextFileSemicolonDelimiter: boolean;

		TextFileCommaDelimiter: boolean;

		TextFileSpaceDelimiter: boolean;

		TextFileOtherDelimiter: string;

		TextFileColumnDataTypes: any;

		TextFileFixedColumnWidths: any;

		PreserveColumnInfo: boolean;

		PreserveFormatting: boolean;

		AdjustColumnWidth: boolean;

		CommandText: any;

		CommandType: XlCmdType;

		TextFilePromptOnRefresh: boolean;

		readonly QueryType: XlQueryType;

		MaintainConnection: boolean;

		TextFileDecimalSeparator: string;

		TextFileThousandsSeparator: string;

		RefreshPeriod: number;

		ResetTimer(): void;

		WebSelectionType: XlWebSelectionType;

		WebFormatting: XlWebFormatting;

		WebTables: string;

		WebPreFormattedTextToColumns: boolean;

		WebSingleBlockTextImport: boolean;

		WebDisableDateRecognition: boolean;

		WebConsecutiveDelimitersAsOne: boolean;

		WebDisableRedirections: boolean;

		EditWebPage: any;

		SourceConnectionFile: string;

		SourceDataFile: string;

		RobustConnect: XlRobustConnect;

		TextFileTrailingMinusNumbers: boolean;

		SaveAsODC(ODCFileName: string, Description?: any, Keywords?: any): void;

		readonly ListObject: ListObject;

		TextFileVisualLayout: XlTextVisualLayoutType;

		readonly WorkbookConnection: WorkbookConnection;

		readonly Sort: Sort;

	}

	interface Parameters {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name: string, iDataType?: any): Parameter;

		readonly Count: number;

		Item(Index: any): Parameter;

		_Default(Index: any): Parameter;

		Delete(): void;

	}

	interface Parameter {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		DataType: XlParameterDataType;

		readonly Type: XlParameterType;

		readonly PromptString: string;

		readonly Value: any;

		readonly SourceRange: Range;

		Name: string;

		SetParam(Type: XlParameterType, Value: any): void;

		RefreshOnChange: boolean;

	}

	interface Sort {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Rng: Range;

		Header: XlYesNoGuess;

		MatchCase: boolean;

		Orientation: XlSortOrientation;

		SortMethod: XlSortMethod;

		readonly SortFields: SortFields;

		SetRange(Rng: Range): void;

		Apply(): void;

	}

	interface SortFields {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Key: Range, SortOn?: any, Order?: any, CustomOrder?: any, DataOption?: any): SortField;

		Item(Index: any): SortField;

		readonly Count: number;

		Clear(): void;

		_Default(Index: any): SortField;

	}

	interface SortField {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		SortOn: XlSortOn;

		readonly SortOnValue: any;

		readonly Key: Range;

		Order: XlSortOrder;

		CustomOrder: any;

		DataOption: XlSortDataOption;

		Priority: number;

		Delete(): void;

		ModifyKey(Key: Range): void;

		SetIcon(Icon: Icon): void;

	}

	interface Icon {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: IconSet;

		readonly Index: number;

	}

	interface IconSet {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ID: XlIconSet;

		readonly Count: number;

		_Default(Index: any): Icon;

		Item(Index: any): Icon;

	}

	interface AutoFilter {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Range: Range;

		readonly Filters: Filters;

		readonly FilterMode: boolean;

		readonly Sort: Sort;

		ApplyFilter(): void;

		ShowAllData(): void;

	}

	interface Filters {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Default(Index: number): Filter;

		Item(Index: number): Filter;

	}

	interface Filter {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly On: boolean;

		readonly Criteria1: any;

		readonly _Operator: XlAutoFilterOperator;

		readonly Criteria2: any;

		Operator: XlAutoFilterOperator;

		readonly Count: number;

	}

	interface TableObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		RowNumbers: boolean;

		readonly FetchedRowOverflow: boolean;

		RefreshStyle: XlCellInsertionMode;

		EnableRefresh: boolean;

		readonly Destination: Range;

		readonly ResultRange: Range;

		Delete(): void;

		Refresh(): boolean;

		EnableEditing: boolean;

		PreserveColumnInfo: boolean;

		PreserveFormatting: boolean;

		AdjustColumnWidth: boolean;

		readonly ListObject: ListObject;

		readonly WorkbookConnection: WorkbookConnection;

	}

	interface TimelineViewState {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		ShowHeader: boolean;

		ShowSelectionLabel: boolean;

		ShowTimeLevel: boolean;

		ShowHorizontalScrollbar: boolean;

		Level: XlTimelineLevel;

	}

	interface PivotValueCell {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly PivotCell: PivotCell;

		readonly Value: any;

		ShowDetail(): void;

		readonly ServerActions: Actions;

	}

	interface SoundNote {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): any;

		Import(Filename: string): any;

		Play(): any;

		Record(): any;

	}

	interface Validation {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Type: XlDVType, AlertStyle?: any, Operator?: any, Formula1?: any, Formula2?: any): void;

		readonly AlertStyle: number;

		IgnoreBlank: boolean;

		IMEMode: number;

		InCellDropdown: boolean;

		Delete(): void;

		ErrorMessage: string;

		ErrorTitle: string;

		InputMessage: string;

		InputTitle: string;

		readonly Formula1: string;

		readonly Formula2: string;

		Modify(Type?: any, AlertStyle?: any, Operator?: any, Formula1?: any, Formula2?: any): void;

		readonly Operator: number;

		ShowError: boolean;

		ShowInput: boolean;

		readonly Type: number;

		readonly Value: boolean;

	}

	interface Worksheet {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		Copy(Before?: any, After?: any): void;

		Delete(): void;

		readonly CodeName: string;

		_CodeName: string;

		readonly Index: number;

		Move(Before?: any, After?: any): void;

		Name: string;

		readonly Next: any;

		OnDoubleClick: string;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		readonly PageSetup: PageSetup;

		readonly Previous: any;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		_Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		readonly ProtectContents: boolean;

		readonly ProtectDrawingObjects: boolean;

		readonly ProtectionMode: boolean;

		readonly ProtectScenarios: boolean;

		_SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		Select(Replace?: any): void;

		Unprotect(Password?: any): void;

		Visible: XlSheetVisibility;

		readonly Shapes: Shapes;

		TransitionExpEval: boolean;

		Arcs(Index?: any): any;

		AutoFilterMode: boolean;

		SetBackgroundPicture(Filename: string): void;

		Buttons(Index?: any): any;

		Calculate(): void;

		EnableCalculation: boolean;

		readonly Cells: Range;

		ChartObjects(Index?: any): any;

		CheckBoxes(Index?: any): any;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): void;

		readonly CircularReference: Range;

		ClearArrows(): void;

		readonly Columns: Range;

		readonly ConsolidationFunction: XlConsolidationFunction;

		readonly ConsolidationOptions: any;

		readonly ConsolidationSources: any;

		DisplayAutomaticPageBreaks: boolean;

		Drawings(Index?: any): any;

		DrawingObjects(Index?: any): any;

		DropDowns(Index?: any): any;

		EnableAutoFilter: boolean;

		EnableSelection: XlEnableSelection;

		EnableOutlining: boolean;

		EnablePivotTable: boolean;

		Evaluate(Name: any): any;

		_Evaluate(Name: any): any;

		readonly FilterMode: boolean;

		ResetAllPageBreaks(): void;

		GroupBoxes(Index?: any): any;

		GroupObjects(Index?: any): any;

		Labels(Index?: any): any;

		Lines(Index?: any): any;

		ListBoxes(Index?: any): any;

		readonly Names: Names;

		OLEObjects(Index?: any): any;

		OnCalculate: string;

		OnData: string;

		OnEntry: string;

		OptionButtons(Index?: any): any;

		readonly Outline: Outline;

		Ovals(Index?: any): any;

		Paste(Destination?: any, Link?: any): void;

		_PasteSpecial(Format?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any): void;

		Pictures(Index?: any): any;

		PivotTables(Index?: any): any;

		PivotTableWizard(SourceType?: any, SourceData?: any, TableDestination?: any, TableName?: any, RowGrand?: any, ColumnGrand?: any, SaveData?: any, HasAutoFormat?: any, AutoPage?: any, Reserved?: any, BackgroundQuery?: any, OptimizeCache?: any, PageFieldOrder?: any, PageFieldWrapCount?: any, ReadData?: any, Connection?: any): PivotTable;

		Range(Cell1: any, Cell2?: any): Range;

		Rectangles(Index?: any): any;

		readonly Rows: Range;

		Scenarios(Index?: any): any;

		ScrollArea: string;

		ScrollBars(Index?: any): any;

		ShowAllData(): void;

		ShowDataForm(): void;

		Spinners(Index?: any): any;

		readonly StandardHeight: number;

		StandardWidth: number;

		TextBoxes(Index?: any): any;

		TransitionFormEntry: boolean;

		readonly Type: XlSheetType;

		readonly UsedRange: Range;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		readonly QueryTables: QueryTables;

		DisplayPageBreaks: boolean;

		readonly Comments: Comments;

		readonly Hyperlinks: Hyperlinks;

		ClearCircles(): void;

		CircleInvalid(): void;

		_DisplayRightToLeft: number;

		readonly AutoFilter: AutoFilter;

		DisplayRightToLeft: boolean;

		readonly Scripts: Kso.Scripts;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		_CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any, IgnoreFinalYaa?: any, SpellScript?: any): void;

		readonly Tab: Tab;

		readonly MailEnvelope: Kso.MsoEnvelope;

		SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any, Local?: any): void;

		readonly CustomProperties: CustomProperties;

		readonly SmartTags: SmartTags;

		readonly Protection: Protection;

		PasteSpecial(Format?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any, NoHTMLFormatting?: any): void;

		Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any, AllowFormattingCells?: any, AllowFormattingColumns?: any, AllowFormattingRows?: any, AllowInsertingColumns?: any, AllowInsertingRows?: any, AllowInsertingHyperlinks?: any, AllowDeletingColumns?: any, AllowDeletingRows?: any, AllowSorting?: any, AllowFiltering?: any, AllowUsingPivotTables?: any): void;

		readonly ListObjects: ListObjects;

		XmlDataQuery(XPath: string, SelectionNamespaces?: any, Map?: any): Range;

		XmlMapQuery(XPath: string, SelectionNamespaces?: any, Map?: any): Range;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any, IgnorePrintAreas?: any): void;

		EnableFormatConditionsCalculation: boolean;

		readonly Sort: Sort;

		ExportAsFixedFormat(Type: XlFixedFormatType, Filename?: any, Quality?: any, IncludeDocProperties?: any, IgnorePrintAreas?: any, From?: any, To?: any, OpenAfterPublish?: any, FixedFormatExtClassPtr?: any): void;

		readonly PrintedCommentPages: number;

		ExportToPNG(FilePath: any): void;

	}

	interface PageSetup {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BlackAndWhite: boolean;

		BottomMargin: number;

		CenterFooter: string;

		CenterHeader: string;

		CenterHorizontally: boolean;

		CenterVertically: boolean;

		ChartSize: XlObjectSize;

		Draft: boolean;

		FirstPageNumber: number;

		FitToPagesTall: any;

		FitToPagesWide: any;

		FooterMargin: number;

		HeaderMargin: number;

		LeftFooter: string;

		LeftHeader: string;

		LeftMargin: number;

		Order: XlOrder;

		Orientation: XlPageOrientation;

		PaperSize: XlPaperSize;

		PrintArea: string;

		PrintGridlines: boolean;

		PrintHeadings: boolean;

		PrintNotes: boolean;

		PrintQuality(Index?: any, RHS?: any): void;

		PrintQuality(Index?: any): any;

		PrintTitleColumns: string;

		PrintTitleRows: string;

		RightFooter: string;

		RightHeader: string;

		RightMargin: number;

		TopMargin: number;

		Zoom: any;

		PrintComments: XlPrintLocation;

		PrintErrors: XlPrintErrors;

		readonly CenterHeaderPicture: Graphic;

		readonly CenterFooterPicture: Graphic;

		readonly LeftHeaderPicture: Graphic;

		readonly LeftFooterPicture: Graphic;

		readonly RightHeaderPicture: Graphic;

		readonly RightFooterPicture: Graphic;

		OddAndEvenPagesHeaderFooter: boolean;

		DifferentFirstPageHeaderFooter: boolean;

		ScaleWithDocHeaderFooter: boolean;

		AlignMarginsHeaderFooter: boolean;

		readonly Pages: Pages;

		readonly EvenPage: Page;

		readonly FirstPage: Page;

	}

	interface Graphic {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Brightness: number;

		ColorType: Kso.MsoPictureColorType;

		Contrast: number;

		CropBottom: number;

		CropLeft: number;

		CropRight: number;

		CropTop: number;

		Filename: string;

		Height: number;

		LockAspectRatio: Kso.MsoTriState;

		Width: number;

	}

	interface Pages {
		Item(Index: any): Page;

		_Default(Index: any): Page;

		readonly Count: number;

	}

	interface Page {
		readonly LeftHeader: HeaderFooter;

		readonly CenterHeader: HeaderFooter;

		readonly RightHeader: HeaderFooter;

		readonly LeftFooter: HeaderFooter;

		readonly CenterFooter: HeaderFooter;

		readonly RightFooter: HeaderFooter;

	}

	interface HeaderFooter {
		Text: string;

		readonly Picture: Graphic;

	}

	interface Shapes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		_Default(Index: any): Shape;

		AddCallout(Type: Kso.MsoCalloutType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddConnector(Type: Kso.MsoConnectorType, BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		AddCurve(SafeArrayOfPoints: any): Shape;

		AddLabel(Orientation: Kso.MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		AddLine(BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		AddPicture(Filename: string, LinkToFile: Kso.MsoTriState, SaveWithDocument: Kso.MsoTriState, Left: number, Top: number, Width: number, Height: number): Shape;

		AddPolyline(SafeArrayOfPoints: any): Shape;

		AddShape(Type: Kso.MsoAutoShapeType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddTextEffect(PresetTextEffect: Kso.MsoPresetTextEffect, Text: string, FontName: string, FontSize: number, FontBold: Kso.MsoTriState, FontItalic: Kso.MsoTriState, Left: number, Top: number): Shape;

		AddTextbox(Orientation: Kso.MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		BuildFreeform(EditingType: Kso.MsoEditingType, X1: number, Y1: number): FreeformBuilder;

		Range(Index: any): ShapeRange;

		SelectAll(): void;

		AddFormControl(Type: XlFormControl, Left: number, Top: number, Width: number, Height: number): Shape;

		AddOLEObject(ClassType?: any, Filename?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any, Left?: any, Top?: any, Width?: any, Height?: any): Shape;

		AddDiagram(Type: Kso.MsoDiagramType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddCanvas(Left: number, Top: number, Width: number, Height: number): Shape;

		AddChart(XlChartType?: any, Left?: any, Top?: any, Width?: any, Height?: any): Shape;

		AddSmartArt(Layout: Kso.SmartArtLayout, Left?: any, Top?: any, Width?: any, Height?: any): Shape;

		AddChart2(Style?: any, XlChartType?: any, Left?: any, Top?: any, Width?: any, Height?: any, NewLayout?: any): Shape;

		AddPicture2(Filename: string, LinkToFile: Kso.MsoTriState, SaveWithDocument: Kso.MsoTriState, Left: number, Top: number, Width: number, Height: number, Compress: Kso.MsoPictureCompress): Shape;

	}

	interface FreeformBuilder {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AddNodes(SegmentType: Kso.MsoSegmentType, EditingType: Kso.MsoEditingType, X1: number, Y1: number, X2?: any, Y2?: any, X3?: any, Y3?: any): void;

		ConvertToShape(): Shape;

	}

	interface ShapeRange {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		_Default(Index: any): Shape;

		Align(AlignCmd: Kso.MsoAlignCmd, RelativeTo: Kso.MsoTriState): void;

		Apply(): void;

		Delete(): void;

		Distribute(DistributeCmd: Kso.MsoDistributeCmd, RelativeTo: Kso.MsoTriState): void;

		Duplicate(): ShapeRange;

		Flip(FlipCmd: Kso.MsoFlipCmd): void;

		IncrementLeft(Increment: number): void;

		IncrementRotation(Increment: number): void;

		IncrementTop(Increment: number): void;

		Group(): Shape;

		PickUp(): void;

		RerouteConnections(): void;

		Regroup(): Shape;

		ScaleHeight(Factor: number, RelativeToOriginalSize: Kso.MsoTriState, Scale?: any): void;

		ScaleWidth(Factor: number, RelativeToOriginalSize: Kso.MsoTriState, Scale?: any): void;

		Select(Replace?: any): void;

		SetShapesDefaultProperties(): void;

		Ungroup(): ShapeRange;

		ZOrder(ZOrderCmd: Kso.MsoZOrderCmd): void;

		readonly Adjustments: Adjustments;

		readonly TextFrame: TextFrame;

		AutoShapeType: Kso.MsoAutoShapeType;

		readonly Callout: CalloutFormat;

		readonly ConnectionSiteCount: number;

		readonly Connector: Kso.MsoTriState;

		readonly ConnectorFormat: ConnectorFormat;

		readonly Fill: FillFormat;

		readonly GroupItems: GroupShapes;

		Height: number;

		readonly HorizontalFlip: Kso.MsoTriState;

		Left: number;

		readonly Line: LineFormat;

		LockAspectRatio: Kso.MsoTriState;

		Name: string;

		readonly Nodes: ShapeNodes;

		Rotation: number;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly TextEffect: TextEffectFormat;

		readonly ThreeD: ThreeDFormat;

		Top: number;

		readonly Type: Kso.MsoShapeType;

		readonly VerticalFlip: Kso.MsoTriState;

		readonly Vertices: any;

		Visible: Kso.MsoTriState;

		Width: number;

		readonly ZOrderPosition: number;

		BlackWhiteMode: Kso.MsoBlackWhiteMode;

		AlternativeText: string;

		readonly DiagramNode: DiagramNode;

		readonly HasDiagramNode: Kso.MsoTriState;

		readonly Diagram: Diagram;

		readonly HasDiagram: Kso.MsoTriState;

		readonly Child: Kso.MsoTriState;

		readonly ParentGroup: Shape;

		readonly CanvasItems: Kso.CanvasShapes;

		readonly ID: number;

		CanvasCropLeft(Increment: number): void;

		CanvasCropTop(Increment: number): void;

		CanvasCropRight(Increment: number): void;

		CanvasCropBottom(Increment: number): void;

		readonly Chart: Chart;

		readonly HasChart: Kso.MsoTriState;

		readonly TextFrame2: TextFrame2;

		ShapeStyle: Kso.MsoShapeStyleIndex;

		BackgroundStyle: Kso.MsoBackgroundStyleIndex;

		readonly SoftEdge: Kso.SoftEdgeFormat;

		readonly Glow: Kso.GlowFormat;

		readonly Reflection: Kso.ReflectionFormat;

		Title: string;

	}

	interface TextFrame {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		MarginBottom: number;

		MarginLeft: number;

		MarginRight: number;

		MarginTop: number;

		Orientation: Kso.MsoTextOrientation;

		Characters(Start?: any, Length?: any): Characters;

		HorizontalAlignment: Kso.XlHAlign;

		VerticalAlignment: Kso.XlVAlign;

		AutoSize: boolean;

		ReadingOrder: number;

		AutoMargins: boolean;

		VerticalOverflow: XlOartVerticalOverflow;

		HorizontalOverflow: XlOartHorizontalOverflow;

	}

	interface ConnectorFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BeginConnect(ConnectedShape: Shape, ConnectionSite: number): void;

		BeginDisconnect(): void;

		EndConnect(ConnectedShape: Shape, ConnectionSite: number): void;

		EndDisconnect(): void;

		readonly BeginConnected: Kso.MsoTriState;

		readonly BeginConnectedShape: Shape;

		readonly BeginConnectionSite: number;

		readonly EndConnected: Kso.MsoTriState;

		readonly EndConnectedShape: Shape;

		readonly EndConnectionSite: number;

		Type: Kso.MsoConnectorType;

	}

	interface GroupShapes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		_Default(Index: any): Shape;

		Range(Index: any): ShapeRange;

	}

	interface Diagram {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Nodes: DiagramNodes;

		readonly Type: Kso.MsoDiagramType;

		AutoLayout: Kso.MsoTriState;

		Reverse: Kso.MsoTriState;

		AutoFormat: Kso.MsoTriState;

		Convert(Type: Kso.MsoDiagramType): void;

		FitText(): void;

	}

	interface Chart {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		Copy(Before?: any, After?: any): void;

		Delete(): void;

		readonly CodeName: string;

		_CodeName: string;

		readonly Index: number;

		Move(Before?: any, After?: any): void;

		Name: string;

		readonly Next: any;

		OnDoubleClick: string;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		readonly PageSetup: PageSetup;

		readonly Previous: any;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		_Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		readonly ProtectContents: boolean;

		readonly ProtectDrawingObjects: boolean;

		readonly ProtectionMode: boolean;

		_SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		Select(Replace?: any): void;

		Unprotect(Password?: any): void;

		Visible: XlSheetVisibility;

		readonly Shapes: Shapes;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any): void;

		Arcs(Index?: any): any;

		readonly Area3DGroup: ChartGroup;

		AreaGroups(Index?: any): any;

		AutoFormat(Gallery: number, Format?: any): void;

		AutoScaling: boolean;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		Axes(Type?: any, AxisGroup?: Kso.XlAxisGroup): any;

		SetBackgroundPicture(Filename: string): void;

		readonly Bar3DGroup: ChartGroup;

		BarGroups(Index?: any): any;

		Buttons(Index?: any): any;

		readonly ChartArea: ChartArea;

		ChartGroups(Index?: any): any;

		ChartObjects(Index?: any): any;

		readonly ChartTitle: ChartTitle;

		ChartWizard(Source?: any, Gallery?: any, Format?: any, PlotBy?: any, CategoryLabels?: any, SeriesLabels?: any, HasLegend?: any, Title?: any, CategoryTitle?: any, ValueTitle?: any, ExtraTitle?: any): void;

		CheckBoxes(Index?: any): any;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): void;

		readonly Column3DGroup: ChartGroup;

		ColumnGroups(Index?: any): any;

		/**
		 * @param Appearance 默认值为 1
		 * @param Format 默认值为 -4147
		 * @param Size 默认值为 2
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat, Size?: XlPictureAppearance): void;

		readonly Corners: Corners;

		/**
		 * @param Appearance 默认值为 1
		 * @param Size 默认值为 1
		 */
		CreatePublisher(Edition?: any, Appearance?: XlPictureAppearance, Size?: XlPictureAppearance, ContainsPICT?: any, ContainsBIFF?: any, ContainsRTF?: any, ContainsVALU?: any): void;

		readonly DataTable: DataTable;

		DepthPercent: number;

		Deselect(): void;

		DisplayBlanksAs: Kso.XlDisplayBlanksAs;

		DoughnutGroups(Index?: any): any;

		Drawings(Index?: any): any;

		DrawingObjects(Index?: any): any;

		DropDowns(Index?: any): any;

		Elevation: number;

		Evaluate(Name: any): any;

		_Evaluate(Name: any): any;

		readonly Floor: Floor;

		GapDepth: number;

		GroupBoxes(Index?: any): any;

		GroupObjects(Index?: any): any;

		HasAxis(Index1?: any, Index2?: any, RHS?: any): void;

		HasAxis(Index1?: any, Index2?: any): any;

		HasDataTable: boolean;

		HasLegend: boolean;

		HasTitle: boolean;

		HeightPercent: number;

		readonly Hyperlinks: Hyperlinks;

		Labels(Index?: any): any;

		readonly Legend: Legend;

		readonly Line3DGroup: ChartGroup;

		LineGroups(Index?: any): any;

		Lines(Index?: any): any;

		ListBoxes(Index?: any): any;

		Location(Where: XlChartLocation, Name?: any): Chart;

		OLEObjects(Index?: any): any;

		OptionButtons(Index?: any): any;

		Ovals(Index?: any): any;

		Paste(Type?: any): void;

		Perspective: number;

		Pictures(Index?: any): any;

		readonly Pie3DGroup: ChartGroup;

		PieGroups(Index?: any): any;

		readonly PlotArea: PlotArea;

		PlotVisibleOnly: boolean;

		RadarGroups(Index?: any): any;

		Rectangles(Index?: any): any;

		RightAngleAxes: any;

		Rotation: any;

		ScrollBars(Index?: any): any;

		SeriesCollection(Index?: any): any;

		SizeWithWindow: boolean;

		ShowWindow: boolean;

		Spinners(Index?: any): any;

		SubType: number;

		readonly SurfaceGroup: ChartGroup;

		TextBoxes(Index?: any): any;

		Type: number;

		ChartType: Kso.XlChartType;

		ApplyCustomType(ChartType: Kso.XlChartType, TypeName?: any): void;

		readonly Walls: Walls;

		WallsAndGridlines2D: boolean;

		XYGroups(Index?: any): any;

		BarShape: Kso.XlBarShape;

		PlotBy: Kso.XlRowCol;

		CopyChartBuild(): void;

		ProtectFormatting: boolean;

		ProtectData: boolean;

		ProtectGoalSeek: boolean;

		ProtectSelection: boolean;

		GetChartElement(x: number, y: number): {ElementID: number, Arg1: number, Arg2: number};

		SetSourceData(Source: Range, PlotBy?: any): void;

		Export(Filename: string, FilterName?: any, Interactive?: any): boolean;

		Refresh(): void;

		readonly PivotLayout: PivotLayout;

		HasPivotFields: boolean;

		readonly Scripts: Kso.Scripts;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		readonly Tab: Tab;

		readonly MailEnvelope: Kso.MsoEnvelope;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): void;

		SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any, Local?: any): void;

		Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		ApplyLayout(Layout: number, ChartType?: any): void;

		SetElement(Element: Kso.MsoChartElementType): void;

		ShowDataLabelsOverMaximum: boolean;

		readonly SideWall: Walls;

		readonly BackWall: Walls;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		ApplyChartTemplate(Filename: string): void;

		SaveChartTemplate(Filename: string): void;

		SetDefaultChart(Name: any): void;

		ExportAsFixedFormat(Type: XlFixedFormatType, Filename?: any, Quality?: any, IncludeDocProperties?: any, IgnorePrintAreas?: any, From?: any, To?: any, OpenAfterPublish?: any, FixedFormatExtClassPtr?: any): void;

		ChartStyle: any;

		ClearToMatchStyle(): void;

		readonly PrintedCommentPages: number;

		Dummy24: boolean;

		Dummy25: boolean;

		ShowReportFilterFieldButtons: boolean;

		ShowLegendFieldButtons: boolean;

		ShowAxisFieldButtons: boolean;

		ShowValueFieldButtons: boolean;

		ShowAllFieldButtons: boolean;

		FullSeriesCollection(Index?: any): any;

		CategoryLabelLevel: Kso.XlCategoryLabelLevel;

		SeriesNameLevel: Kso.XlSeriesNameLevel;

		readonly HasHiddenContent: boolean;

		DeleteHiddenContent(): void;

		ChartColor: any;

		ClearToMatchColorStyle(): void;

		ExportToPNG(FilePath: any): void;

	}

	interface ChartGroup {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AxisGroup: Kso.XlAxisGroup;

		DoughnutHoleSize: number;

		readonly DownBars: DownBars;

		readonly DropLines: DropLines;

		FirstSliceAngle: number;

		GapWidth: number;

		HasDropLines: boolean;

		HasHiLoLines: boolean;

		HasRadarAxisLabels: boolean;

		HasSeriesLines: boolean;

		HasUpDownBars: boolean;

		readonly HiLoLines: HiLoLines;

		readonly Index: number;

		Overlap: number;

		readonly RadarAxisLabels: TickLabels;

		SeriesCollection(Index?: any): any;

		readonly SeriesLines: SeriesLines;

		SubType: number;

		Type: number;

		readonly UpBars: UpBars;

		VaryByCategories: boolean;

		SizeRepresents: Kso.XlSizeRepresents;

		BubbleScale: number;

		ShowNegativeBubbles: boolean;

		SplitType: Kso.XlChartSplitType;

		SplitValue: any;

		SecondPlotSize: number;

		Has3DShading: boolean;

		FullCategoryCollection(Index?: any): any;

		CategoryCollection(Index?: any): any;

	}

	interface DownBars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		readonly Format: ChartFormat;

	}

	interface ChartFillFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		OneColorGradient(Style: Kso.MsoGradientStyle, Variant: number, Degree: number): void;

		TwoColorGradient(Style: Kso.MsoGradientStyle, Variant: number): void;

		PresetTextured(PresetTexture: Kso.MsoPresetTexture): void;

		Solid(): void;

		Patterned(Pattern: Kso.MsoPatternType): void;

		UserPicture(PictureFile?: any, PictureFormat?: any, PictureStackUnit?: any, PicturePlacement?: any): void;

		UserTextured(TextureFile: string): void;

		PresetGradient(Style: Kso.MsoGradientStyle, Variant: number, PresetGradientType: Kso.MsoPresetGradientType): void;

		readonly BackColor: ChartColorFormat;

		readonly ForeColor: ChartColorFormat;

		readonly GradientColorType: Kso.MsoGradientColorType;

		readonly GradientDegree: number;

		readonly GradientStyle: Kso.MsoGradientStyle;

		readonly GradientVariant: number;

		readonly Pattern: Kso.MsoPatternType;

		readonly PresetGradientType: Kso.MsoPresetGradientType;

		readonly PresetTexture: Kso.MsoPresetTexture;

		readonly TextureName: string;

		readonly TextureType: Kso.MsoTextureType;

		readonly Type: Kso.MsoFillType;

		Visible: Kso.MsoTriState;

	}

	interface ChartColorFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		SchemeColor: number;

		readonly RGB: number;

		readonly _Default: number;

		readonly Type: number;

	}

	interface ChartFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Fill: FillFormat;

		readonly Glow: Kso.GlowFormat;

		readonly Line: LineFormat;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly SoftEdge: Kso.SoftEdgeFormat;

		readonly TextFrame2: TextFrame2;

		readonly ThreeD: ThreeDFormat;

		readonly Adjustments: Adjustments;

		AutoShapeType: Kso.MsoAutoShapeType;

	}

	interface TextFrame2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		MarginBottom: number;

		MarginLeft: number;

		MarginRight: number;

		MarginTop: number;

		Orientation: Kso.MsoTextOrientation;

		HorizontalAnchor: Kso.MsoHorizontalAnchor;

		VerticalAnchor: Kso.MsoVerticalAnchor;

		PathFormat: Kso.MsoPathFormat;

		WarpFormat: Kso.MsoWarpFormat;

		WordArtformat: Kso.MsoPresetTextEffect;

		WordWrap: Kso.MsoTriState;

		AutoSize: Kso.MsoAutoSize;

		readonly ThreeD: ThreeDFormat;

		readonly HasText: Kso.MsoTriState;

		readonly TextRange: Kso.TextRange2;

		readonly Column: Kso.TextColumn2;

		readonly Ruler: Kso.Ruler2;

		DeleteText(): void;

		NoTextRotation: Kso.MsoTriState;

	}

	interface DropLines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Format: ChartFormat;

	}

	interface HiLoLines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Format: ChartFormat;

	}

	interface TickLabels {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): any;

		readonly Font: Font;

		readonly Name: string;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		Orientation: Kso.XlTickLabelOrientation;

		Select(): any;

		ReadingOrder: number;

		AutoScaleFont: any;

		readonly Depth: number;

		Offset: number;

		Alignment: number;

		MultiLevel: boolean;

		readonly Format: ChartFormat;

	}

	interface SeriesLines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Format: ChartFormat;

	}

	interface UpBars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		readonly Format: ChartFormat;

	}

	interface ChartArea {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Clear(): any;

		ClearContents(): any;

		Copy(): any;

		readonly Font: Font;

		Shadow: boolean;

		ClearFormats(): any;

		Height: number;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		AutoScaleFont: any;

		readonly Format: ChartFormat;

		RoundedCorners: boolean;

	}

	interface ChartTitle {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		readonly Font: Font;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		IncludeInLayout: boolean;

		Position: Kso.XlChartElementPosition;

		readonly Format: ChartFormat;

		readonly Height: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface Corners {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

	}

	interface DataTable {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		ShowLegendKey: boolean;

		HasBorderHorizontal: boolean;

		HasBorderVertical: boolean;

		HasBorderOutline: boolean;

		readonly Border: Border;

		readonly Font: Font;

		Select(): void;

		Delete(): void;

		AutoScaleFont: any;

		readonly Format: ChartFormat;

	}

	interface Floor {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		ClearFormats(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		PictureType: any;

		Paste(): void;

		Thickness: number;

		readonly Format: ChartFormat;

	}

	interface Hyperlinks {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Anchor: any, Address: string, SubAddress?: any, ScreenTip?: any, TextToDisplay?: any): any;

		readonly Count: number;

		Item(Index: any): Hyperlink;

		_Default(Index: any): Hyperlink;

		Delete(): void;

	}

	interface Hyperlink {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly Range: Range;

		readonly Shape: Shape;

		SubAddress: string;

		Address: string;

		readonly Type: number;

		AddToFavorites(): void;

		Delete(): void;

		Follow(NewWindow?: any, AddHistory?: any, ExtraInfo?: any, Method?: any, HeaderInfo?: any): void;

		EmailSubject: string;

		ScreenTip: string;

		TextToDisplay: string;

		CreateNewDocument(Filename: string, EditNow: boolean, Overwrite: boolean): void;

	}

	interface Legend {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Font: Font;

		LegendEntries(Index?: any): any;

		Position: Kso.XlLegendPosition;

		Shadow: boolean;

		Clear(): any;

		Height: number;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		AutoScaleFont: any;

		IncludeInLayout: boolean;

		readonly Format: ChartFormat;

	}

	interface PlotArea {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		ClearFormats(): any;

		Height: number;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		readonly _InsideLeft: number;

		readonly _InsideTop: number;

		readonly _InsideWidth: number;

		readonly _InsideHeight: number;

		InsideLeft: number;

		InsideTop: number;

		InsideWidth: number;

		InsideHeight: number;

		Position: Kso.XlChartElementPosition;

		readonly Format: ChartFormat;

	}

	interface Walls {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		ClearFormats(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		PictureType: any;

		Paste(): void;

		PictureUnit: any;

		Thickness: number;

		readonly Format: ChartFormat;

	}

	interface PivotLayout {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		ColumnFields(Index?: any): any;

		DataFields(Index?: any): any;

		PageFields(Index?: any): any;

		RowFields(Index?: any): any;

		HiddenFields(Index?: any): any;

		VisibleFields(Index?: any): any;

		PivotFields(Index?: any): any;

		readonly CubeFields: CubeFields;

		readonly PivotCache: PivotCache;

		readonly PivotTable: PivotTable;

		InnerDetail: string;

		AddFields(RowFields?: any, ColumnFields?: any, PageFields?: any, AppendField?: any): void;

	}

	interface Tab {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Color: any;

		ColorIndex: Kso.XlColorIndex;

		ThemeColor: XlThemeColor;

		TintAndShade: any;

	}

	interface Names {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name?: any, RefersTo?: any, Visible?: any, MacroType?: any, ShortcutKey?: any, Category?: any, NameLocal?: any, RefersToLocal?: any, CategoryLocal?: any, RefersToR1C1?: any, RefersToR1C1Local?: any): Name;

		Item(Index?: any, IndexLocal?: any, RefersTo?: any): Name;

		_Default(Index?: any, IndexLocal?: any, RefersTo?: any): Name;

		readonly Count: number;

	}

	interface Name {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		readonly Index: number;

		Category: string;

		CategoryLocal: string;

		Delete(): void;

		MacroType: XlXLMMacroType;

		Name: string;

		RefersTo: any;

		ShortcutKey: string;

		Value: string;

		Visible: boolean;

		NameLocal: string;

		RefersToLocal: any;

		RefersToR1C1: any;

		RefersToR1C1Local: any;

		readonly RefersToRange: Range;

		Comment: string;

		WorkbookParameter: boolean;

		readonly ValidWorkbookParameter: boolean;

	}

	interface Outline {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AutomaticStyles: boolean;

		ShowLevels(RowLevels?: any, ColumnLevels?: any): any;

		SummaryColumn: XlSummaryColumn;

		SummaryRow: XlSummaryRow;

	}

	interface HPageBreaks {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): HPageBreak;

		_Default(Index: number): HPageBreak;

		Add(Before: any): HPageBreak;

	}

	interface HPageBreak {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: Worksheet;

		Delete(): void;

		DragOff(Direction: XlDirection, RegionIndex: number): void;

		Type: XlPageBreak;

		readonly Extent: XlPageBreakExtent;

		Location: Range;

	}

	interface VPageBreaks {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): VPageBreak;

		_Default(Index: number): VPageBreak;

		Add(Before: any): VPageBreak;

	}

	interface VPageBreak {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: Worksheet;

		Delete(): void;

		DragOff(Direction: XlDirection, RegionIndex: number): void;

		Type: XlPageBreak;

		readonly Extent: XlPageBreakExtent;

		Location: Range;

	}

	interface QueryTables {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Add(Connection: any, Destination: Range, Sql?: any): QueryTable;

		Item(Index: any): QueryTable;

		_Default(Index: any): QueryTable;

	}

	interface Comments {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): Comment;

		_Default(Index: number): Comment;

	}

	interface Comment {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Author: string;

		readonly Shape: Shape;

		Visible: boolean;

		Text(Text?: any, Start?: any, Overwrite?: any): string;

		Delete(): void;

		Next(): Comment;

		Previous(): Comment;

	}

	interface CustomProperties {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name: string, Value: any): CustomProperty;

		readonly Count: number;

		_Default(Index: any): CustomProperty;

		Item(Index: any): CustomProperty;

	}

	interface CustomProperty {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Name: string;

		Value: any;

		readonly _Default: any;

		Delete(): void;

	}

	interface SmartTags {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(SmartTagType: string): SmartTag;

		readonly Count: number;

		_Default(Index: any): SmartTag;

	}

	interface SmartTag {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly DownloadURL: string;

		readonly Name: string;

		readonly _Default: string;

		readonly XML: string;

		readonly Range: Range;

		Delete(): void;

		readonly SmartTagActions: SmartTagActions;

		readonly Properties: CustomProperties;

	}

	interface SmartTagActions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Default(Index: any): SmartTagAction;

		Item(Index: any): SmartTagAction;

	}

	interface SmartTagAction {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Execute(): void;

		readonly _Default: string;

		readonly Type: XlSmartTagControlType;

		readonly PresentInPane: boolean;

		ExpandHelp: boolean;

		CheckboxState: boolean;

		TextboxText: string;

		ListSelection: number;

		RadioGroupSelection: number;

		readonly ActiveXControl: any;

	}

	interface Protection {
		readonly AllowFormattingCells: boolean;

		readonly AllowFormattingColumns: boolean;

		readonly AllowFormattingRows: boolean;

		readonly AllowInsertingColumns: boolean;

		readonly AllowInsertingRows: boolean;

		readonly AllowInsertingHyperlinks: boolean;

		readonly AllowDeletingColumns: boolean;

		readonly AllowDeletingRows: boolean;

		readonly AllowSorting: boolean;

		readonly AllowFiltering: boolean;

		readonly AllowUsingPivotTables: boolean;

		readonly AllowEditRanges: AllowEditRanges;

	}

	interface AllowEditRanges {
		readonly Count: number;

		Item(Index: any): AllowEditRange;

		Add(Title: string, Range: Range, Password?: any): AllowEditRange;

		_Default(Index: any): AllowEditRange;

	}

	interface AllowEditRange {
		Title: string;

		Range: Range;

		ChangePassword(Password: string): void;

		Delete(): void;

		Unprotect(Password?: any): void;

		readonly Users: UserAccessList;

	}

	interface UserAccessList {
		readonly Count: number;

		Item(Index: any): UserAccess;

		Add(Name: string, AllowEdit: boolean): UserAccess;

		DeleteAll(): void;

		_Default(Index: any): UserAccess;

	}

	interface UserAccess {
		readonly Name: string;

		AllowEdit: boolean;

		Delete(): void;

	}

	interface ListObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param SourceType 默认值为 1
		 * @param XlListObjectHasHeaders 默认值为 0
		 */
		_Add(SourceType?: XlListObjectSourceType, Source?: any, LinkSource?: any, XlListObjectHasHeaders?: XlYesNoGuess, Destination?: any): ListObject;

		_Default(Index: any): ListObject;

		Item(Index: any): ListObject;

		readonly Count: number;

		/**
		 * @param SourceType 默认值为 1
		 * @param XlListObjectHasHeaders 默认值为 0
		 */
		Add(SourceType?: XlListObjectSourceType, Source?: any, LinkSource?: any, XlListObjectHasHeaders?: XlYesNoGuess, Destination?: any, TableStyleName?: any): ListObject;

	}

	interface Phonetic {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Visible: boolean;

		CharacterType: number;

		Alignment: number;

		readonly Font: Font;

		Text: string;

	}

	interface FormatConditions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): any;

		Add(Type: XlFormatConditionType, Operator?: any, Formula1?: any, Formula2?: any, String?: any, TextOperator?: any, DateOperator?: any, ScopeType?: any): any;

		_Default(Index: any): any;

		Delete(): void;

		AddColorScale(ColorScaleType: number): any;

		AddDatabar(): any;

		AddIconSetCondition(): any;

		AddTop10(): any;

		AddAboveAverage(): any;

		AddUniqueValues(): any;

	}

	interface Phonetics {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		readonly Start: number;

		readonly Length: number;

		Visible: boolean;

		CharacterType: number;

		Alignment: number;

		readonly Font: Font;

		Item(Index: number): any;

		Delete(): void;

		Add(Start: number, Length: number, Text: string): void;

		Text: string;

		_Default(Index: number): any;

	}

	interface Errors {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Item(Index: any): Error;

		_Default(Index: any): Error;

	}

	interface Error {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Value: boolean;

		Ignore: boolean;

	}

	interface SparklineGroups {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Type: XlSparkType, SourceData: string): SparklineGroup;

		readonly Count: number;

		Item(Index: any): SparklineGroup;

		_Default(Index: any): SparklineGroup;

		Clear(): void;

		ClearGroups(): void;

		Group(Location: Range): void;

		Ungroup(): void;

	}

	interface SparklineGroup {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Sparkline;

		Location: Range;

		SourceData: string;

		DateRange: string;

		ModifyLocation(Location: Range): void;

		ModifySourceData(SourceData: string): void;

		Modify(Location: Range, SourceData: string): void;

		ModifyDateRange(DateRange: string): void;

		Delete(): void;

		Type: XlSparkType;

		readonly SeriesColor: FormatColor;

		readonly Points: SparkPoints;

		readonly Axes: SparkAxes;

		DisplayBlanksAs: Kso.XlDisplayBlanksAs;

		DisplayHidden: boolean;

		LineWeight: any;

		PlotBy: XlSparklineRowCol;

	}

	interface Sparkline {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Location: Range;

		SourceData: string;

		ModifyLocation(Range: Range): void;

		ModifySourceData(Formula: string): void;

	}

	interface FormatColor {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Color: any;

		ColorIndex: Kso.XlColorIndex;

		ThemeColor: any;

		TintAndShade: any;

	}

	interface SparkPoints {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Negative: SparkColor;

		readonly Markers: SparkColor;

		readonly Highpoint: SparkColor;

		readonly Lowpoint: SparkColor;

		readonly Firstpoint: SparkColor;

		readonly Lastpoint: SparkColor;

	}

	interface SparkColor {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Visible: boolean;

		readonly Color: FormatColor;

	}

	interface SparkAxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Vertical: SparkVerticalAxis;

		readonly Horizontal: SparkHorizontalAxis;

	}

	interface SparkVerticalAxis {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		MinScaleType: XlSparkScale;

		CustomMinScaleValue: any;

		MaxScaleType: XlSparkScale;

		CustomMaxScaleValue: any;

	}

	interface SparkHorizontalAxis {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Axis: SparkColor;

		readonly IsDateAxis: boolean;

		RightToLeftPlotOrder: boolean;

	}

	interface DisplayFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Borders: Borders;

		Characters(Start?: any, Length?: any): Characters;

		readonly Font: Font;

		readonly Style: any;

		readonly AddIndent: any;

		readonly FormulaHidden: any;

		readonly HorizontalAlignment: any;

		readonly IndentLevel: any;

		readonly Interior: Interior;

		readonly Locked: any;

		readonly MergeCells: any;

		readonly NumberFormat: any;

		readonly NumberFormatLocal: any;

		readonly Orientation: any;

		readonly ReadingOrder: number;

		readonly ShrinkToFit: any;

		readonly VerticalAlignment: any;

		readonly WrapText: any;

	}

	interface DialogSheet {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		Copy(Before?: any, After?: any): void;

		Delete(): void;

		readonly CodeName: string;

		_CodeName: string;

		readonly Index: number;

		Move(Before?: any, After?: any): void;

		Name: string;

		readonly Next: any;

		OnDoubleClick: string;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		readonly PageSetup: PageSetup;

		readonly Previous: any;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		_Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		readonly ProtectContents: boolean;

		readonly ProtectDrawingObjects: boolean;

		readonly ProtectionMode: boolean;

		readonly ProtectScenarios: boolean;

		_SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		Select(Replace?: any): void;

		Unprotect(Password?: any): void;

		Visible: XlSheetVisibility;

		readonly Shapes: Shapes;

		Arcs(Index?: any): any;

		Buttons(Index?: any): any;

		EnableCalculation: boolean;

		ChartObjects(Index?: any): any;

		CheckBoxes(Index?: any): any;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): void;

		DisplayAutomaticPageBreaks: boolean;

		Drawings(Index?: any): any;

		DrawingObjects(Index?: any): any;

		DropDowns(Index?: any): any;

		EnableAutoFilter: boolean;

		EnableSelection: XlEnableSelection;

		EnableOutlining: boolean;

		EnablePivotTable: boolean;

		Evaluate(Name: any): any;

		_Evaluate(Name: any): any;

		ResetAllPageBreaks(): void;

		GroupBoxes(Index?: any): any;

		GroupObjects(Index?: any): any;

		Labels(Index?: any): any;

		Lines(Index?: any): any;

		ListBoxes(Index?: any): any;

		readonly Names: Names;

		OLEObjects(Index?: any): any;

		OptionButtons(Index?: any): any;

		Ovals(Index?: any): any;

		Paste(Destination?: any, Link?: any): void;

		_PasteSpecial(Format?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any): void;

		Pictures(Index?: any): any;

		Rectangles(Index?: any): any;

		ScrollArea: string;

		ScrollBars(Index?: any): any;

		Spinners(Index?: any): any;

		TextBoxes(Index?: any): any;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		readonly QueryTables: QueryTables;

		DisplayPageBreaks: boolean;

		readonly Comments: Comments;

		readonly Hyperlinks: Hyperlinks;

		ClearCircles(): void;

		CircleInvalid(): void;

		_DisplayRightToLeft: number;

		readonly AutoFilter: AutoFilter;

		DisplayRightToLeft: boolean;

		readonly Scripts: Kso.Scripts;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		_CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any, IgnoreFinalYaa?: any, SpellScript?: any): void;

		readonly Tab: Tab;

		readonly MailEnvelope: Kso.MsoEnvelope;

		SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any, Local?: any): void;

		readonly CustomProperties: CustomProperties;

		readonly SmartTags: SmartTags;

		readonly Protection: Protection;

		PasteSpecial(Format?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any, NoHTMLFormatting?: any): void;

		Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any, AllowFormattingCells?: any, AllowFormattingColumns?: any, AllowFormattingRows?: any, AllowInsertingColumns?: any, AllowInsertingRows?: any, AllowInsertingHyperlinks?: any, AllowDeletingColumns?: any, AllowDeletingRows?: any, AllowSorting?: any, AllowFiltering?: any, AllowUsingPivotTables?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		EnableFormatConditionsCalculation: boolean;

		readonly Sort: Sort;

		ExportAsFixedFormat(Type: XlFixedFormatType, Filename?: any, Quality?: any, IncludeDocProperties?: any, IgnorePrintAreas?: any, From?: any, To?: any, OpenAfterPublish?: any, FixedFormatExtClassPtr?: any): void;

		readonly PrintedCommentPages: number;

		DefaultButton: any;

		readonly DialogFrame: DialogFrame;

		EditBoxes(Index?: any): any;

		Focus: any;

		Hide(Cancel?: any): boolean;

		Show(): boolean;

	}

	interface DialogFrame {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Height: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Select(Replace?: any): any;

		Top: number;

		Width: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

	}

	interface MenuBar {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		readonly BuiltIn: boolean;

		Caption: string;

		Delete(): void;

		readonly Index: number;

		readonly Menus: Menus;

		Reset(): void;

	}

	interface Menus {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Caption: string, Before?: any, Restore?: any): Menu;

		readonly Count: number;

		_Default(Index: any): Menu;

		Item(Index: any): Menu;

	}

	interface Menu {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Caption: string;

		Delete(): void;

		Enabled: boolean;

		readonly Index: number;

		readonly MenuItems: MenuItems;

	}

	interface MenuItems {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Caption: string, OnAction?: any, ShortcutKey?: any, Before?: any, Restore?: any, StatusBar?: any, HelpFile?: any, HelpContextID?: any): MenuItem;

		AddMenu(Caption: string, Before?: any, Restore?: any): Menu;

		readonly Count: number;

		_Default(Index: any): any;

		Item(Index: any): any;

	}

	interface MenuItem {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Caption: string;

		Checked: boolean;

		Delete(): void;

		Enabled: boolean;

		HelpContextID: number;

		HelpFile: string;

		readonly Index: number;

		OnAction: string;

		StatusBar: string;

	}

	interface Window {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): any;

		ActivateNext(): any;

		ActivatePrevious(): any;

		readonly ActiveCell: Range;

		readonly ActiveChart: Chart;

		readonly ActivePane: Pane;

		readonly ActiveSheet: Worksheet;

		Caption: any;

		Close(SaveChanges?: any, Filename?: any, RouteWorkbook?: any): boolean;

		DisplayFormulas: boolean;

		DisplayGridlines: boolean;

		DisplayHeadings: boolean;

		DisplayHorizontalScrollBar: boolean;

		DisplayOutline: boolean;

		_DisplayRightToLeft: boolean;

		DisplayVerticalScrollBar: boolean;

		DisplayWorkbookTabs: boolean;

		DisplayZeros: boolean;

		EnableResize: boolean;

		FreezePanes: boolean;

		GridlineColor: number;

		GridlineColorIndex: Kso.XlColorIndex;

		Height: number;

		readonly Index: number;

		LargeScroll(Down?: any, Up?: any, ToRight?: any, ToLeft?: any): any;

		Left: number;

		NewWindow(): Window;

		OnWindow: string;

		readonly Panes: Panes;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): any;

		PrintPreview(EnableChanges?: any): any;

		readonly RangeSelection: Range;

		ScrollColumn: number;

		ScrollRow: number;

		ScrollWorkbookTabs(Sheets?: any, Position?: any): any;

		readonly SelectedSheets: Sheets;

		readonly Selection: any;

		SmallScroll(Down?: any, Up?: any, ToRight?: any, ToLeft?: any): any;

		Split: boolean;

		SplitColumn: number;

		SplitHorizontal: number;

		SplitRow: number;

		SplitVertical: number;

		TabRatio: number;

		Top: number;

		readonly Type: XlWindowType;

		readonly UsableHeight: number;

		readonly UsableWidth: number;

		Visible: boolean;

		readonly VisibleRange: Range;

		Width: number;

		readonly WindowNumber: number;

		WindowState: XlWindowState;

		Zoom: any;

		View: XlWindowView;

		DisplayRightToLeft: boolean;

		PointsToScreenPixelsX(Points: number): number;

		PointsToScreenPixelsY(Points: number): number;

		RangeFromPoint(x: number, y: number): any;

		ScrollIntoView(Left: number, Top: number, Width: number, Height: number, Start?: any): void;

		readonly SheetViews: SheetViews;

		readonly ActiveSheetView: any;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): any;

		DisplayRuler: boolean;

		AutoFilterDateGrouping: boolean;

		DisplayWhitespace: boolean;

		readonly Hwnd: number;

	}

	interface Pane {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): boolean;

		readonly Index: number;

		LargeScroll(Down?: any, Up?: any, ToRight?: any, ToLeft?: any): any;

		ScrollColumn: number;

		ScrollRow: number;

		SmallScroll(Down?: any, Up?: any, ToRight?: any, ToLeft?: any): any;

		readonly VisibleRange: Range;

		ScrollIntoView(Left: number, Top: number, Width: number, Height: number, Start?: any): void;

		PointsToScreenPixelsX(Points: number): number;

		PointsToScreenPixelsY(Points: number): number;

	}

	interface Panes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): Pane;

		_Default(Index: number): Pane;

	}

	interface Sheets {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Before?: any, After?: any, Count?: any, Type?: any): any;

		Copy(Before?: any, After?: any): void;

		readonly Count: number;

		Delete(): void;

		/**
		 * @param Type 默认值为 -4104
		 */
		FillAcrossSheets(Range: Range, Type?: XlFillWith): void;

		Item(Index: any): any;

		Move(Before?: any, After?: any): void;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		Select(Replace?: any): void;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		Visible: any;

		_Default(Index: any): any;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any, IgnorePrintAreas?: any): void;

		Add2(Before?: any, After?: any, Count?: any, NewLayout?: any): any;

	}

	interface SheetViews {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): any;

		_Default(Index: any): any;

	}

	interface Workbook {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AcceptLabelsInFormulas: boolean;

		Activate(): void;

		readonly ActiveChart: Chart;

		readonly ActiveSheet: Worksheet;

		Author: string;

		AutoUpdateFrequency: number;

		AutoUpdateSaveChanges: boolean;

		ChangeHistoryDuration: number;

		readonly BuiltinDocumentProperties: any;

		ChangeFileAccess(Mode: XlFileAccess, WritePassword?: any, Notify?: any): void;

		/**
		 * @param Type 默认值为 1
		 */
		ChangeLink(Name: string, NewName: string, Type?: XlLinkType): void;

		readonly Charts: Sheets;

		Close(SaveChanges?: any, Filename?: any, RouteWorkbook?: any): void;

		readonly CodeName: string;

		_CodeName: string;

		Colors(Index?: any, RHS?: any): void;

		Colors(Index?: any): any;

		readonly CommandBars: Kso.CommandBars;

		Comments: string;

		ConflictResolution: XlSaveConflictResolution;

		readonly Container: any;

		readonly CreateBackup: boolean;

		readonly CustomDocumentProperties: any;

		Date1904: boolean;

		DeleteNumberFormat(NumberFormat: string): void;

		readonly DialogSheets: Sheets;

		DisplayDrawingObjects: XlDisplayDrawingObjects;

		ExclusiveAccess(): boolean;

		readonly FileFormat: XlFileFormat;

		ForwardMailer(): void;

		readonly FullName: string;

		HasMailer: boolean;

		readonly HasPassword: boolean;

		HasRoutingSlip: boolean;

		IsAddin: boolean;

		Keywords: string;

		LinkInfo(Name: string, LinkInfo: XlLinkInfo, Type?: any, EditionRef?: any): any;

		LinkSources(Type?: any): any;

		readonly Mailer: Mailer;

		MergeWorkbook(Filename: any): void;

		readonly Modules: Sheets;

		readonly MultiUserEditing: boolean;

		readonly Name: string;

		readonly Names: Names;

		NewWindow(): Window;

		OnSave: string;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		OpenLinks(Name: string, ReadOnly?: any, Type?: any): void;

		readonly Path: string;

		PersonalViewListSettings: boolean;

		PersonalViewPrintSettings: boolean;

		PivotCaches(): PivotCaches;

		Post(DestName?: any): void;

		PrecisionAsDisplayed: boolean;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		_Protect(Password?: any, Structure?: any, Windows?: any): void;

		_ProtectSharing(Filename?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, SharingPassword?: any): void;

		readonly ProtectStructure: boolean;

		readonly ProtectWindows: boolean;

		readonly ReadOnly: boolean;

		readonly _ReadOnlyRecommended: boolean;

		RefreshAll(): void;

		Reply(): void;

		ReplyAll(): void;

		RemoveUser(Index: number): void;

		readonly RevisionNumber: number;

		Route(): void;

		readonly Routed: boolean;

		readonly RoutingSlip: RoutingSlip;

		RunAutoMacros(Which: XlRunAutoMacro): void;

		Save(): void;

		/**
		 * @param AccessMode 默认值为 1
		 */
		_SaveAs(Filename?: any, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AccessMode?: XlSaveAsAccessMode, ConflictResolution?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		SaveCopyAs(Filename?: any): void;

		Saved: boolean;

		SaveLinkValues: boolean;

		SendMail(Recipients: any, Subject?: any, ReturnReceipt?: any): void;

		/**
		 * @param Priority 默认值为 -4143
		 */
		SendMailer(FileFormat?: any, Priority?: XlPriority): void;

		SetLinkOnData(Name: string, Procedure?: any): void;

		readonly Sheets: Sheets;

		ShowConflictHistory: boolean;

		readonly Styles: Styles;

		Subject: string;

		Title: string;

		Unprotect(Password?: any): void;

		UnprotectSharing(SharingPassword?: any): void;

		UpdateFromFile(): void;

		UpdateLink(Name?: any, Type?: any): void;

		UpdateRemoteReferences: boolean;

		UserControl: boolean;

		readonly UserStatus: any;

		readonly CustomViews: CustomViews;

		readonly Windows: Windows;

		readonly Worksheets: Sheets;

		readonly WriteReserved: boolean;

		readonly WriteReservedBy: string;

		readonly Excel4IntlMacroSheets: Sheets;

		readonly Excel4MacroSheets: Sheets;

		TemplateRemoveExtData: boolean;

		HighlightChangesOptions(When?: any, Who?: any, Where?: any): void;

		HighlightChangesOnScreen: boolean;

		KeepChangeHistory: boolean;

		ListChangesOnNewSheet: boolean;

		PurgeChangeHistoryNow(Days: number, SharingPassword?: any): void;

		AcceptAllChanges(When?: any, Who?: any, Where?: any): void;

		RejectAllChanges(When?: any, Who?: any, Where?: any): void;

		PivotTableWizard(SourceType?: any, SourceData?: any, TableDestination?: any, TableName?: any, RowGrand?: any, ColumnGrand?: any, SaveData?: any, HasAutoFormat?: any, AutoPage?: any, Reserved?: any, BackgroundQuery?: any, OptimizeCache?: any, PageFieldOrder?: any, PageFieldWrapCount?: any, ReadData?: any, Connection?: any): void;

		ResetColors(): void;

		FollowHyperlink(Address: string, SubAddress?: any, NewWindow?: any, AddHistory?: any, ExtraInfo?: any, Method?: any, HeaderInfo?: any): void;

		AddToFavorites(): void;

		readonly IsInplace: boolean;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		WebPagePreview(): void;

		readonly PublishObjects: PublishObjects;

		readonly WebOptions: WebOptions;

		ReloadAs(Encoding: Kso.MsoEncoding): void;

		readonly HTMLProject: Kso.HTMLProject;

		EnvelopeVisible: boolean;

		readonly CalculationVersion: number;

		Dummy17(calcid: number): void;

		sblt(s: string): void;

		readonly VBASigned: boolean;

		ShowPivotTableFieldList: boolean;

		UpdateLinks: XlUpdateLinks;

		BreakLink(Name: string, Type: XlLinkType): void;

		Dummy16(): void;

		/**
		 * @param AccessMode 默认值为 1
		 */
		SaveAs(Filename?: any, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AccessMode?: XlSaveAsAccessMode, ConflictResolution?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any, Local?: any): void;

		EnableAutoRecover: boolean;

		RemovePersonalInformation: boolean;

		readonly FullNameURLEncoded: string;

		CheckIn(SaveChanges?: any, Comments?: any, MakePublic?: any): void;

		CanCheckIn(): boolean;

		SendForReview(Recipients?: any, Subject?: any, ShowMessage?: any, IncludeAttachment?: any): void;

		ReplyWithChanges(ShowMessage?: any): void;

		EndReview(): void;

		Password: string;

		WritePassword: string;

		readonly PasswordEncryptionProvider: string;

		readonly PasswordEncryptionAlgorithm: string;

		readonly PasswordEncryptionKeyLength: number;

		SetPasswordEncryptionOptions(PasswordEncryptionProvider?: any, PasswordEncryptionAlgorithm?: any, PasswordEncryptionKeyLength?: any, PasswordEncryptionFileProperties?: any): void;

		readonly PasswordEncryptionFileProperties: boolean;

		ReadOnlyRecommended: boolean;

		Protect(Password?: any, Structure?: any, Windows?: any): void;

		readonly SmartTagOptions: SmartTagOptions;

		RecheckSmartTags(): void;

		readonly Permission: Kso.Permission;

		readonly SharedWorkspace: Kso.SharedWorkspace;

		readonly Sync: Kso.Sync;

		SendFaxOverInternet(Recipients?: any, Subject?: any, ShowMessage?: any): void;

		readonly XmlNamespaces: XmlNamespaces;

		readonly XmlMaps: XmlMaps;

		XmlImport(Url: string, Overwrite?: any, Destination?: any): {RHS: XlXmlImportResult, ImportMap: XmlMap};

		readonly SmartDocument: Kso.SmartDocument;

		readonly DocumentLibraryVersions: Kso.DocumentLibraryVersions;

		InactiveListBorderVisible: boolean;

		DisplayInkComments: boolean;

		XmlImportXml(Data: string, Overwrite?: any, Destination?: any): {RHS: XlXmlImportResult, ImportMap: XmlMap};

		SaveAsXMLData(Filename: string, Map: XmlMap): void;

		ToggleFormsDesign(): void;

		readonly ContentTypeProperties: Kso.MetaProperties;

		readonly Connections: Connections;

		RemoveDocumentInformation(RemoveDocInfoType: XlRemoveDocInfoType): void;

		readonly Signatures: Kso.SignatureSet;

		CheckInWithVersion(SaveChanges?: any, Comments?: any, MakePublic?: any, VersionType?: any): void;

		readonly ServerPolicy: Kso.ServerPolicy;

		LockServerFile(): void;

		readonly DocumentInspectors: Kso.DocumentInspectors;

		GetWorkflowTasks(): Kso.WorkflowTasks;

		GetWorkflowTemplates(): Kso.WorkflowTemplates;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any, IgnorePrintAreas?: any): void;

		readonly ServerViewableItems: ServerViewableItems;

		readonly TableStyles: TableStyles;

		DefaultTableStyle: any;

		DefaultPivotTableStyle: any;

		CheckCompatibility: boolean;

		readonly HasVBProject: boolean;

		readonly CustomXMLParts: Kso.CustomXMLParts;

		Final: boolean;

		readonly Research: Research;

		readonly Theme: Kso.OfficeTheme;

		ApplyTheme(Filename: string): void;

		readonly Excel8CompatibilityMode: boolean;

		readonly ConnectionsDisabled: boolean;

		EnableConnections(): void;

		ShowPivotChartActiveFields: boolean;

		ExportAsFixedFormat(Type: XlFixedFormatType, Filename?: any, Quality?: any, IncludeDocProperties?: any, IgnorePrintAreas?: any, From?: any, To?: any, OpenAfterPublish?: any, FixedFormatExtClassPtr?: any): void;

		readonly IconSets: IconSets;

		EncryptionProvider: string;

		DoNotPromptForConvert: boolean;

		ForceFullCalculation: boolean;

		ProtectSharing(Filename?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, SharingPassword?: any, FileFormat?: any): void;

		readonly SlicerCaches: SlicerCaches;

		readonly ActiveSlicer: Slicer;

		DefaultSlicerStyle: any;

		Dummy26(): void;

		Dummy27(): void;

		AccuracyVersion: number;

		readonly CaseSensitive: boolean;

		readonly UseWholeCellCriteria: boolean;

		readonly UseWildcards: boolean;

		readonly PivotTables: any;

		readonly Model: Model;

		ChartDataPointTrack: boolean;

		DefaultTimelineStyle: any;

	}

	interface Mailer {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BCCRecipients: any;

		CCRecipients: any;

		Enclosures: any;

		readonly Received: boolean;

		readonly SendDateTime: string;

		readonly Sender: string;

		Subject: string;

		ToRecipients: any;

		WhichAddress: any;

	}

	interface PivotCaches {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): PivotCache;

		_Default(Index: any): PivotCache;

		Add(SourceType: XlPivotTableSourceType, SourceData?: any): PivotCache;

		Create(SourceType: XlPivotTableSourceType, SourceData?: any, Version?: any): PivotCache;

	}

	interface RoutingSlip {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delivery: XlRoutingSlipDelivery;

		Message: any;

		Recipients(Index?: any, RHS?: any): void;

		Recipients(Index?: any): any;

		Reset(): any;

		ReturnWhenDone: boolean;

		readonly Status: XlRoutingSlipStatus;

		Subject: any;

		TrackStatus: boolean;

	}

	interface Styles {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name: string, BasedOn?: any): Style;

		readonly Count: number;

		Item(Index: any): Style;

		Merge(Workbook: any): any;

		_Default(Index: any): Style;

	}

	interface Style {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AddIndent: boolean;

		readonly BuiltIn: boolean;

		readonly Borders: Borders;

		Delete(): any;

		readonly Font: Font;

		FormulaHidden: boolean;

		HorizontalAlignment: Kso.XlHAlign;

		IncludeAlignment: boolean;

		IncludeBorder: boolean;

		IncludeFont: boolean;

		IncludeNumber: boolean;

		IncludePatterns: boolean;

		IncludeProtection: boolean;

		IndentLevel: number;

		readonly Interior: Interior;

		Locked: boolean;

		MergeCells: any;

		readonly Name: string;

		readonly NameLocal: string;

		NumberFormat: string;

		NumberFormatLocal: string;

		Orientation: XlOrientation;

		ShrinkToFit: boolean;

		readonly Value: string;

		VerticalAlignment: Kso.XlVAlign;

		WrapText: boolean;

		readonly _Default: string;

		ReadingOrder: number;

	}

	interface CustomViews {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(ViewName: any): CustomView;

		Add(ViewName: string, PrintSettings?: any, RowColSettings?: any): CustomView;

		_Default(ViewName: any): CustomView;

	}

	interface CustomView {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly PrintSettings: boolean;

		readonly RowColSettings: boolean;

		Show(): void;

		Delete(): void;

	}

	interface Windows {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param ArrangeStyle 默认值为 1
		 */
		Arrange(ArrangeStyle?: XlArrangeStyle, ActiveWorkbook?: any, SyncHorizontal?: any, SyncVertical?: any): any;

		readonly Count: number;

		Item(Index: any): Window;

		_Default(Index: any): Window;

		CompareSideBySideWith(WindowName: any): boolean;

		BreakSideBySide(): boolean;

		SyncScrollingSideBySide: boolean;

		ResetPositionsSideBySide(): void;

	}

	interface PublishObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(SourceType: XlSourceType, Filename: string, Sheet?: any, Source?: any, HtmlType?: any, DivID?: any, Title?: any): PublishObject;

		readonly Count: number;

		Item(Index: any): PublishObject;

		_Default(Index: any): PublishObject;

		Delete(): void;

		Publish(): void;

	}

	interface PublishObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		Publish(Create?: any): void;

		readonly DivID: string;

		readonly Sheet: string;

		readonly SourceType: XlSourceType;

		readonly Source: string;

		HtmlType: XlHtmlType;

		Title: string;

		Filename: string;

		AutoRepublish: boolean;

	}

	interface WebOptions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		RelyOnCSS: boolean;

		OrganizeInFolder: boolean;

		UseLongFileNames: boolean;

		DownloadComponents: boolean;

		RelyOnVML: boolean;

		AllowPNG: boolean;

		ScreenSize: Kso.MsoScreenSize;

		PixelsPerInch: number;

		LocationOfComponents: string;

		Encoding: Kso.MsoEncoding;

		readonly FolderSuffix: string;

		UseDefaultFolderSuffix(): void;

		TargetBrowser: Kso.MsoTargetBrowser;

	}

	interface SmartTagOptions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		DisplaySmartTags: XlSmartTagDisplayMode;

		EmbedSmartTags: boolean;

	}

	interface XmlNamespaces {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Default(Index: any): XmlNamespace;

		Item(Index: any): XmlNamespace;

		readonly Count: number;

		readonly Value: string;

		InstallManifest(Path: string, InstallForAllUsers?: any): void;

	}

	interface XmlMaps {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Schema: string, RootElementName?: any): XmlMap;

		_Default(Index: any): XmlMap;

		Item(Index: any): XmlMap;

		readonly Count: number;

	}

	interface Connections {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_AddFromFile(Filename: string): WorkbookConnection;

		Add(Name: string, Description: string, ConnectionString: any, CommandText: any, lCmdtype?: any): WorkbookConnection;

		Item(Index: any): WorkbookConnection;

		_Default(Index: any): WorkbookConnection;

		Add2(Name: string, Description: string, ConnectionString: any, CommandText: any, lCmdtype?: any, CreateModelConnection?: any, ImportRelationships?: any): WorkbookConnection;

		AddFromFile(Filename: string, CreateModelConnection?: any, ImportRelationships?: any): WorkbookConnection;

	}

	interface ServerViewableItems {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Add(Obj: any): any;

		Delete(Index: any): void;

		DeleteAll(): void;

		Item(Index: any): any;

		_Default(Index: any): any;

	}

	interface TableStyles {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Add(TableStyleName: string): TableStyle;

		Item(Index: any): TableStyle;

		_Default(Index: any): TableStyle;

	}

	interface TableStyle {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly _Default: string;

		readonly Name: string;

		readonly NameLocal: string;

		readonly BuiltIn: boolean;

		readonly TableStyleElements: TableStyleElements;

		ShowAsAvailableTableStyle: boolean;

		ShowAsAvailablePivotTableStyle: boolean;

		Delete(): void;

		Duplicate(NewTableStyleName?: any): TableStyle;

		ShowAsAvailableSlicerStyle: boolean;

		ShowAsAvailableTimelineStyle: boolean;

	}

	interface TableStyleElements {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: XlTableStyleElementType): TableStyleElement;

		_Default(Index: XlTableStyleElementType): TableStyleElement;

	}

	interface TableStyleElement {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly HasFormat: boolean;

		readonly Interior: Interior;

		readonly Borders: Borders;

		readonly Font: Font;

		StripeSize: number;

		Clear(): void;

	}

	interface Research {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Query(ServiceID: string, QueryString?: any, QueryLanguage?: any, UseSelection?: any, LaunchQuery?: any): any;

		IsResearchService(ServiceID: string): boolean;

		SetLanguagePair(LanguageFrom: number, LanguageTo: number): any;

	}

	interface IconSets {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Default(Index: any): any;

		Item(Index: any): any;

	}

	interface SlicerCaches {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): SlicerCache;

		_Default(Index: any): SlicerCache;

		Add(Source: any, SourceField: any, Name?: any): SlicerCache;

		Add2(Source: any, SourceField: any, Name?: any, SlicerCacheType?: any): SlicerCache;

	}

	interface Model {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ModelTables: ModelTables;

		readonly ModelRelationships: ModelRelationships;

		Refresh(): void;

		AddConnection(ConnectionToDataSource: WorkbookConnection): WorkbookConnection;

		CreateModelWorkbookConnection(ModelTable: any): WorkbookConnection;

		readonly DataModelConnection: WorkbookConnection;

		readonly Name: string;

		Initialize(): void;

	}

	interface ModelRelationships {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelRelationship;

		_Default(Index: any): ModelRelationship;

		Add(ForeignKeyColumn: ModelTableColumn, PrimaryKeyColumn: ModelTableColumn): ModelRelationship;

	}

	interface ModelRelationship {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ForeignKeyTable: ModelTable;

		readonly ForeignKeyColumn: ModelTableColumn;

		readonly PrimaryKeyTable: ModelTable;

		readonly PrimaryKeyColumn: ModelTableColumn;

		Active: boolean;

		Delete(): void;

	}

	interface ModelChanges {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly TablesAdded: ModelTableNames;

		readonly TablesDeleted: ModelTableNames;

		readonly TablesModified: ModelTableNames;

		readonly TableNamesChanged: ModelTableNameChanges;

		readonly RelationshipChange: boolean;

		readonly ColumnsAdded: ModelColumnNames;

		readonly ColumnsDeleted: ModelColumnNames;

		readonly ColumnsChanged: ModelColumnChanges;

		readonly MeasuresAdded: ModelMeasureNames;

		readonly UnknownChange: boolean;

		readonly Source: XlModelChangeSource;

	}

	interface ModelTableNames {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): string;

		_Default(Index: any): string;

	}

	interface ModelTableNameChanges {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelTableNameChange;

		_Default(Index: any): ModelTableNameChange;

	}

	interface ModelTableNameChange {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly TableNameOld: string;

		readonly TableNameNew: string;

	}

	interface ModelColumnNames {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelColumnName;

		_Default(Index: any): ModelColumnName;

	}

	interface ModelColumnName {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly TableName: string;

		readonly ColumnName: string;

	}

	interface ModelColumnChanges {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelColumnChange;

		_Default(Index: any): ModelColumnChange;

	}

	interface ModelColumnChange {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly TableName: string;

		readonly ColumnName: string;

	}

	interface ModelMeasureNames {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ModelMeasureName;

		_Default(Index: any): ModelMeasureName;

	}

	interface ModelMeasureName {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly TableName: string;

		readonly MeasureName: string;

	}

	interface AddIns {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Filename: string, CopyFile?: any): AddIn;

		readonly Count: number;

		Item(Index: any): AddIn;

		_Default(Index: any): AddIn;

	}

	interface AddIn {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Author: string;

		readonly Comments: string;

		readonly FullName: string;

		Installed: boolean;

		readonly Keywords: string;

		readonly Name: string;

		readonly Path: string;

		readonly Subject: string;

		readonly Title: string;

		readonly progID: string;

		readonly CLSID: string;

		readonly IsOpen: boolean;

	}

	interface MenuBars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name?: any): MenuBar;

		readonly Count: number;

		_Default(Index: any): MenuBar;

		Item(Index: any): MenuBar;

	}

	interface Modules {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Before?: any, After?: any, Count?: any): Module;

		Copy(Before?: any, After?: any): void;

		readonly Count: number;

		Delete(): void;

		Item(Index: any): any;

		Move(Before?: any, After?: any): void;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		Select(Replace?: any): void;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		Visible: any;

		_Default(Index: any): any;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any, IgnorePrintAreas?: any): void;

		Add2(Before?: any, After?: any, Count?: any, NewLayout?: any): any;

	}

	interface Module {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		Copy(Before?: any, After?: any): void;

		Delete(): void;

		readonly CodeName: string;

		_CodeName: string;

		readonly Index: number;

		Move(Before?: any, After?: any): void;

		Name: string;

		readonly Next: any;

		OnDoubleClick: string;

		OnSheetActivate: string;

		OnSheetDeactivate: string;

		readonly PageSetup: PageSetup;

		readonly Previous: any;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		_Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		readonly ProtectContents: boolean;

		readonly ProtectionMode: boolean;

		_SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		Select(Replace?: any): void;

		Unprotect(Password?: any): void;

		Visible: XlSheetVisibility;

		readonly Shapes: Shapes;

		InsertFile(Filename: any, Merge?: any): any;

		SaveAs(Filename: string, FileFormat?: any, Password?: any, WriteResPassword?: any, ReadOnlyRecommended?: any, CreateBackup?: any, AddToMru?: any, TextCodepage?: any, TextVisualLayout?: any): void;

		Protect(Password?: any, DrawingObjects?: any, Contents?: any, Scenarios?: any, UserInterfaceOnly?: any): void;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

	}

	interface Toolbars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name?: any): Toolbar;

		readonly Count: number;

		_Default(Index: any): Toolbar;

		Item(Index: any): Toolbar;

	}

	interface Toolbar {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BuiltIn: boolean;

		Delete(): void;

		Height: number;

		Left: number;

		readonly Name: string;

		Position: number;

		Protection: XlToolbarProtection;

		Reset(): void;

		readonly ToolbarButtons: ToolbarButtons;

		Top: number;

		Visible: boolean;

		Width: number;

	}

	interface ToolbarButtons {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Button?: any, Before?: any, OnAction?: any, Pushed?: any, Enabled?: any, StatusBar?: any, HelpFile?: any, HelpContextID?: any): ToolbarButton;

		readonly Count: number;

		Item(Index: number): ToolbarButton;

		_Default(Index: number): ToolbarButton;

	}

	interface ToolbarButton {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BuiltIn: boolean;

		BuiltInFace: boolean;

		Copy(Toolbar: Toolbar, Before: number): void;

		CopyFace(): void;

		Delete(): void;

		Edit(): void;

		Enabled: boolean;

		HelpContextID: number;

		HelpFile: string;

		readonly ID: number;

		readonly IsGap: boolean;

		Move(Toolbar: Toolbar, Before: number): void;

		Name: string;

		OnAction: string;

		PasteFace(): void;

		Pushed: boolean;

		Reset(): void;

		StatusBar: string;

		Width: number;

	}

	interface Workbooks {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Template?: any): Workbook;

		Close(): void;

		readonly Count: number;

		Item(Index: any): Workbook;

		_Open(Filename: string, UpdateLinks?: any, ReadOnly?: any, Format?: any, Password?: any, WriteResPassword?: any, IgnoreReadOnlyRecommended?: any, Origin?: any, Delimiter?: any, Editable?: any, Notify?: any, Converter?: any, AddToMru?: any): Workbook;

		/**
		 * @param TextQualifier 默认值为 1
		 */
		__OpenText(Filename: string, Origin?: any, StartRow?: any, DataType?: any, TextQualifier?: XlTextQualifier, ConsecutiveDelimiter?: any, Tab?: any, Semicolon?: any, Comma?: any, Space?: any, Other?: any, OtherChar?: any, FieldInfo?: any, TextVisualLayout?: any): void;

		_Default(Index: any): Workbook;

		/**
		 * @param TextQualifier 默认值为 1
		 */
		_OpenText(Filename: string, Origin?: any, StartRow?: any, DataType?: any, TextQualifier?: XlTextQualifier, ConsecutiveDelimiter?: any, Tab?: any, Semicolon?: any, Comma?: any, Space?: any, Other?: any, OtherChar?: any, FieldInfo?: any, TextVisualLayout?: any, DecimalSeparator?: any, ThousandsSeparator?: any): void;

		Open(Filename: string, UpdateLinks?: any, ReadOnly?: any, Format?: any, Password?: any, WriteResPassword?: any, IgnoreReadOnlyRecommended?: any, Origin?: any, Delimiter?: any, Editable?: any, Notify?: any, Converter?: any, AddToMru?: any, Local?: any, CorruptLoad?: any): Workbook;

		/**
		 * @param TextQualifier 默认值为 1
		 */
		OpenText(Filename: string, Origin?: any, StartRow?: any, DataType?: any, TextQualifier?: XlTextQualifier, ConsecutiveDelimiter?: any, Tab?: any, Semicolon?: any, Comma?: any, Space?: any, Other?: any, OtherChar?: any, FieldInfo?: any, TextVisualLayout?: any, DecimalSeparator?: any, ThousandsSeparator?: any, TrailingMinusNumbers?: any, Local?: any): void;

		OpenDatabase(Filename: string, CommandText?: any, CommandType?: any, BackgroundQuery?: any, ImportDataAs?: any): Workbook;

		CheckOut(Filename: string): void;

		CanCheckOut(Filename: string): boolean;

		_OpenXML(Filename: string, Stylesheets?: any): Workbook;

		OpenXML(Filename: string, Stylesheets?: any, LoadOption?: any): Workbook;

	}

	interface WorksheetFunction {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_WSFunction(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		Count(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		IsNA(Arg1: any): boolean;

		IsError(Arg1: any): boolean;

		Sum(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Average(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Min(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Max(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Npv(Arg1: number, Arg2: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		StDev(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Dollar(Arg1: number, Arg2?: any): string;

		Fixed(Arg1: number, Arg2?: any, Arg3?: any): string;

		Pi(): number;

		Ln(Arg1: number): number;

		Log10(Arg1: number): number;

		Round(Arg1: number, Arg2: number): number;

		Lookup(Arg1: any, Arg2: any, Arg3?: any): any;

		Index(Arg1: any, Arg2: number, Arg3?: any, Arg4?: any): any;

		Rept(Arg1: string, Arg2: number): string;

		And(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): boolean;

		Or(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): boolean;

		DCount(Arg1: Range, Arg2: any, Arg3: any): number;

		DSum(Arg1: Range, Arg2: any, Arg3: any): number;

		DAverage(Arg1: Range, Arg2: any, Arg3: any): number;

		DMin(Arg1: Range, Arg2: any, Arg3: any): number;

		DMax(Arg1: Range, Arg2: any, Arg3: any): number;

		DStDev(Arg1: Range, Arg2: any, Arg3: any): number;

		Var(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		DVar(Arg1: Range, Arg2: any, Arg3: any): number;

		Text(Arg1: any, Arg2: string): string;

		LinEst(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

		Trend(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

		LogEst(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

		Growth(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any): any;

		Pv(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		Fv(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		NPer(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		Pmt(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		Rate(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any, Arg6?: any): number;

		MIrr(Arg1: any, Arg2: number, Arg3: number): number;

		Irr(Arg1: any, Arg2?: any): number;

		Match(Arg1: any, Arg2: any, Arg3?: any): number;

		Weekday(Arg1: any, Arg2?: any): number;

		Search(Arg1: string, Arg2: string, Arg3?: any): number;

		Transpose(Arg1: any): any;

		Atan2(Arg1: number, Arg2: number): number;

		Asin(Arg1: number): number;

		Acos(Arg1: number): number;

		Choose(Arg1: any, Arg2: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		HLookup(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): any;

		VLookup(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): any;

		Log(Arg1: number, Arg2?: any): number;

		Proper(Arg1: string): string;

		Trim(Arg1: string): string;

		Replace(Arg1: string, Arg2: number, Arg3: number, Arg4: string): string;

		Substitute(Arg1: string, Arg2: string, Arg3: string, Arg4?: any): string;

		Find(Arg1: string, Arg2: string, Arg3?: any): number;

		IsErr(Arg1: any): boolean;

		IsText(Arg1: any): boolean;

		IsNumber(Arg1: any): boolean;

		Sln(Arg1: number, Arg2: number, Arg3: number): number;

		Syd(Arg1: number, Arg2: number, Arg3: number, Arg4: number): number;

		Ddb(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5?: any): number;

		Clean(Arg1: string): string;

		MDeterm(Arg1: any): number;

		MInverse(Arg1: any): any;

		MMult(Arg1: any, Arg2: any): any;

		Ipmt(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5?: any, Arg6?: any): number;

		Ppmt(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5?: any, Arg6?: any): number;

		CountA(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Product(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Fact(Arg1: number): number;

		DProduct(Arg1: Range, Arg2: any, Arg3: any): number;

		IsNonText(Arg1: any): boolean;

		StDevP(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		VarP(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		DStDevP(Arg1: Range, Arg2: any, Arg3: any): number;

		DVarP(Arg1: Range, Arg2: any, Arg3: any): number;

		IsLogical(Arg1: any): boolean;

		DCountA(Arg1: Range, Arg2: any, Arg3: any): number;

		USDollar(Arg1: number, Arg2: number): string;

		FindB(Arg1: string, Arg2: string, Arg3?: any): number;

		SearchB(Arg1: string, Arg2: string, Arg3?: any): number;

		ReplaceB(Arg1: string, Arg2: number, Arg3: number, Arg4: string): string;

		RoundUp(Arg1: number, Arg2: number): number;

		RoundDown(Arg1: number, Arg2: number): number;

		Rank(Arg1: number, Arg2: Range, Arg3?: any): number;

		Days360(Arg1: any, Arg2: any, Arg3?: any): number;

		Vdb(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5: number, Arg6?: any, Arg7?: any): number;

		Median(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		SumProduct(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Sinh(Arg1: number): number;

		Cosh(Arg1: number): number;

		Tanh(Arg1: number): number;

		Asinh(Arg1: number): number;

		Acosh(Arg1: number): number;

		Atanh(Arg1: number): number;

		DGet(Arg1: Range, Arg2: any, Arg3: any): any;

		Db(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5?: any): number;

		Frequency(Arg1: any, Arg2: any): any;

		AveDev(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		BetaDist(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		GammaLn(Arg1: number): number;

		BetaInv(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		BinomDist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		ChiDist(Arg1: number, Arg2: number): number;

		ChiInv(Arg1: number, Arg2: number): number;

		Combin(Arg1: number, Arg2: number): number;

		Confidence(Arg1: number, Arg2: number, Arg3: number): number;

		CritBinom(Arg1: number, Arg2: number, Arg3: number): number;

		Even(Arg1: number): number;

		ExponDist(Arg1: number, Arg2: number, Arg3: boolean): number;

		FDist(Arg1: number, Arg2: number, Arg3: number): number;

		FInv(Arg1: number, Arg2: number, Arg3: number): number;

		Fisher(Arg1: number): number;

		FisherInv(Arg1: number): number;

		Floor(Arg1: number, Arg2: number): number;

		GammaDist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		GammaInv(Arg1: number, Arg2: number, Arg3: number): number;

		Ceiling(Arg1: number, Arg2: number): number;

		HypGeomDist(Arg1: number, Arg2: number, Arg3: number, Arg4: number): number;

		LogNormDist(Arg1: number, Arg2: number, Arg3: number): number;

		LogInv(Arg1: number, Arg2: number, Arg3: number): number;

		NegBinomDist(Arg1: number, Arg2: number, Arg3: number): number;

		NormDist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		NormSDist(Arg1: number): number;

		NormInv(Arg1: number, Arg2: number, Arg3: number): number;

		NormSInv(Arg1: number): number;

		Standardize(Arg1: number, Arg2: number, Arg3: number): number;

		Odd(Arg1: number): number;

		Permut(Arg1: number, Arg2: number): number;

		Poisson(Arg1: number, Arg2: number, Arg3: boolean): number;

		TDist(Arg1: number, Arg2: number, Arg3: number): number;

		Weibull(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		SumXMY2(Arg1: any, Arg2: any): number;

		SumX2MY2(Arg1: any, Arg2: any): number;

		SumX2PY2(Arg1: any, Arg2: any): number;

		ChiTest(Arg1: any, Arg2: any): number;

		Correl(Arg1: any, Arg2: any): number;

		Covar(Arg1: any, Arg2: any): number;

		Forecast(Arg1: number, Arg2: any, Arg3: any): number;

		FTest(Arg1: any, Arg2: any): number;

		Intercept(Arg1: any, Arg2: any): number;

		Pearson(Arg1: any, Arg2: any): number;

		RSq(Arg1: any, Arg2: any): number;

		StEyx(Arg1: any, Arg2: any): number;

		Slope(Arg1: any, Arg2: any): number;

		TTest(Arg1: any, Arg2: any, Arg3: number, Arg4: number): number;

		Prob(Arg1: any, Arg2: any, Arg3: number, Arg4?: any): number;

		DevSq(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		GeoMean(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		HarMean(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		SumSq(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Kurt(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Skew(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		ZTest(Arg1: any, Arg2: number, Arg3?: any): number;

		Large(Arg1: any, Arg2: number): number;

		Small(Arg1: any, Arg2: number): number;

		Quartile(Arg1: any, Arg2: number): number;

		Percentile(Arg1: any, Arg2: number): number;

		PercentRank(Arg1: any, Arg2: number, Arg3?: any): number;

		Mode(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		TrimMean(Arg1: any, Arg2: number): number;

		TInv(Arg1: number, Arg2: number): number;

		Power(Arg1: number, Arg2: number): number;

		Radians(Arg1: number): number;

		Degrees(Arg1: number): number;

		Subtotal(Arg1: number, Arg2: Range, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		SumIf(Arg1: Range, Arg2: any, Arg3?: any): number;

		CountIf(Arg1: Range, Arg2: any): number;

		CountBlank(Arg1: Range): number;

		Ispmt(Arg1: number, Arg2: number, Arg3: number, Arg4: number): number;

		Roman(Arg1: number, Arg2?: any): string;

		Asc(Arg1: string): string;

		Dbcs(Arg1: string): string;

		Phonetic(Arg1: Range): string;

		BahtText(Arg1: number): string;

		ThaiDayOfWeek(Arg1: number): string;

		ThaiDigit(Arg1: string): string;

		ThaiMonthOfYear(Arg1: number): string;

		ThaiNumSound(Arg1: number): string;

		ThaiNumString(Arg1: number): string;

		ThaiStringLength(Arg1: string): number;

		IsThaiDigit(Arg1: string): boolean;

		RoundBahtDown(Arg1: number): number;

		RoundBahtUp(Arg1: number): number;

		ThaiYear(Arg1: number): number;

		RTD(progID: any, server: any, topic1: any, topic2?: any, topic3?: any, topic4?: any, topic5?: any, topic6?: any, topic7?: any, topic8?: any, topic9?: any, topic10?: any, topic11?: any, topic12?: any, topic13?: any, topic14?: any, topic15?: any, topic16?: any, topic17?: any, topic18?: any, topic19?: any, topic20?: any, topic21?: any, topic22?: any, topic23?: any, topic24?: any, topic25?: any, topic26?: any, topic27?: any, topic28?: any): any;

		Hex2Bin(Arg1: any, Arg2?: any): string;

		Hex2Dec(Arg1: any): string;

		Hex2Oct(Arg1: any, Arg2?: any): string;

		Dec2Bin(Arg1: any, Arg2?: any): string;

		Dec2Hex(Arg1: any, Arg2?: any): string;

		Dec2Oct(Arg1: any, Arg2?: any): string;

		Oct2Bin(Arg1: any, Arg2?: any): string;

		Oct2Hex(Arg1: any, Arg2?: any): string;

		Oct2Dec(Arg1: any): string;

		Bin2Dec(Arg1: any): string;

		Bin2Oct(Arg1: any, Arg2?: any): string;

		Bin2Hex(Arg1: any, Arg2?: any): string;

		ImSub(Arg1: any, Arg2: any): string;

		ImDiv(Arg1: any, Arg2: any): string;

		ImPower(Arg1: any, Arg2: any): string;

		ImAbs(Arg1: any): string;

		ImSqrt(Arg1: any): string;

		ImLn(Arg1: any): string;

		ImLog2(Arg1: any): string;

		ImLog10(Arg1: any): string;

		ImSin(Arg1: any): string;

		ImCos(Arg1: any): string;

		ImExp(Arg1: any): string;

		ImArgument(Arg1: any): string;

		ImConjugate(Arg1: any): string;

		Imaginary(Arg1: any): number;

		ImReal(Arg1: any): number;

		Complex(Arg1: any, Arg2: any, Arg3?: any): string;

		ImSum(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): string;

		ImProduct(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): string;

		SeriesSum(Arg1: any, Arg2: any, Arg3: any, Arg4: any): number;

		FactDouble(Arg1: any): number;

		SqrtPi(Arg1: any): number;

		Quotient(Arg1: any, Arg2: any): number;

		Delta(Arg1: any, Arg2?: any): number;

		GeStep(Arg1: any, Arg2?: any): number;

		IsEven(Arg1: any): boolean;

		IsOdd(Arg1: any): boolean;

		MRound(Arg1: any, Arg2: any): number;

		Erf(Arg1: any, Arg2?: any): number;

		ErfC(Arg1: any): number;

		BesselJ(Arg1: any, Arg2: any): number;

		BesselK(Arg1: any, Arg2: any): number;

		BesselY(Arg1: any, Arg2: any): number;

		BesselI(Arg1: any, Arg2: any): number;

		Xirr(Arg1: any, Arg2: any, Arg3?: any): number;

		Xnpv(Arg1: any, Arg2: any): number;

		PriceMat(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6?: any): number;

		YieldMat(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6?: any): number;

		IntRate(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		Received(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		Disc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		PriceDisc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		YieldDisc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		TBillEq(Arg1: any, Arg2: any, Arg3?: any): number;

		TBillPrice(Arg1: any, Arg2: any, Arg3?: any): number;

		TBillYield(Arg1: any, Arg2: any, Arg3?: any): number;

		Price(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7?: any): number;

		DollarDe(Arg1: any, Arg2: any): number;

		DollarFr(Arg1: any, Arg2: any): number;

		Nominal(Arg1: any, Arg2: any): number;

		Effect(Arg1: any, Arg2: any): number;

		CumPrinc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any): number;

		CumIPmt(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any): number;

		EDate(Arg1: any, Arg2: any): number;

		EoMonth(Arg1: any, Arg2: any): number;

		YearFrac(Arg1: any, Arg2: any, Arg3?: any): number;

		CoupDayBs(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		CoupDays(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		CoupDaysNc(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		CoupNcd(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		CoupNum(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		CoupPcd(Arg1: any, Arg2: any, Arg3: any, Arg4?: any): number;

		Duration(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6?: any): number;

		MDuration(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6?: any): number;

		OddLPrice(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7: any, Arg8?: any): number;

		OddLYield(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7: any, Arg8?: any): number;

		OddFPrice(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7: any, Arg8: any, Arg9?: any): number;

		OddFYield(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7: any, Arg8: any, Arg9?: any): number;

		RandBetween(Arg1: any, Arg2: any): number;

		WeekNum(Arg1: any, Arg2?: any): number;

		AmorDegrc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7?: any): number;

		AmorLinc(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7?: any): number;

		Convert(Arg1: any, Arg2: any, Arg3: any): number;

		AccrInt(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5: any, Arg6: any, Arg7?: any): number;

		AccrIntM(Arg1: any, Arg2: any, Arg3: any, Arg4: any, Arg5?: any): number;

		WorkDay(Arg1: any, Arg2: any, Arg3?: any): number;

		NetworkDays(Arg1: any, Arg2: any, Arg3?: any): number;

		Gcd(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		MultiNomial(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Lcm(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		FVSchedule(Arg1: any, Arg2: any): number;

		SumIfs(Arg1: Range, Arg2: Range, Arg3: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any): number;

		CountIfs(Arg1: Range, Arg2: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		AverageIf(Arg1: Range, Arg2: any, Arg3?: any): number;

		AverageIfs(Arg1: Range, Arg2: Range, Arg3: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any): number;

		IfError(Arg1: any, Arg2: any): any;

		Aggregate(Arg1: number, Arg2: number, Arg3: Range, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Confidence_Norm(Arg1: number, Arg2: number, Arg3: number): number;

		Confidence_T(Arg1: number, Arg2: number, Arg3: number): number;

		ChiSq_Test(Arg1: any, Arg2: any): number;

		F_Test(Arg1: any, Arg2: any): number;

		Covariance_P(Arg1: any, Arg2: any): number;

		Covariance_S(Arg1: any, Arg2: any): number;

		Expon_Dist(Arg1: number, Arg2: number, Arg3: boolean): number;

		Gamma_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		Gamma_Inv(Arg1: number, Arg2: number, Arg3: number): number;

		Mode_Mult(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		Mode_Sngl(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Norm_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		Norm_Inv(Arg1: number, Arg2: number, Arg3: number): number;

		Percentile_Exc(Arg1: any, Arg2: number): number;

		Percentile_Inc(Arg1: any, Arg2: number): number;

		PercentRank_Exc(Arg1: any, Arg2: number, Arg3?: any): number;

		PercentRank_Inc(Arg1: any, Arg2: number, Arg3?: any): number;

		Poisson_Dist(Arg1: number, Arg2: number, Arg3: boolean): number;

		Quartile_Exc(Arg1: any, Arg2: number): number;

		Quartile_Inc(Arg1: any, Arg2: number): number;

		Rank_Avg(Arg1: number, Arg2: Range, Arg3?: any): number;

		Rank_Eq(Arg1: number, Arg2: Range, Arg3?: any): number;

		StDev_S(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		StDev_P(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		T_Dist(Arg1: number, Arg2: number, Arg3: boolean): number;

		T_Dist_2T(Arg1: number, Arg2: number): number;

		T_Dist_RT(Arg1: number, Arg2: number): number;

		T_Inv(Arg1: number, Arg2: number): number;

		T_Inv_2T(Arg1: number, Arg2: number): number;

		Var_S(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Var_P(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Weibull_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		NetworkDays_Intl(Arg1: any, Arg2: any, Arg3?: any, Arg4?: any): number;

		WorkDay_Intl(Arg1: any, Arg2: any, Arg3?: any, Arg4?: any): number;

		ISO_Ceiling(Arg1: number, Arg2?: any): number;

		Dummy21(Arg1: number, Arg2: number): number;

		Dummy19(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		Beta_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean, Arg5?: any, Arg6?: any): number;

		Beta_Inv(Arg1: number, Arg2: number, Arg3: number, Arg4?: any, Arg5?: any): number;

		ChiSq_Dist(Arg1: number, Arg2: number, Arg3: boolean): number;

		ChiSq_Dist_RT(Arg1: number, Arg2: number): number;

		ChiSq_Inv(Arg1: number, Arg2: number): number;

		ChiSq_Inv_RT(Arg1: number, Arg2: number): number;

		F_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		F_Dist_RT(Arg1: number, Arg2: number, Arg3: number): number;

		F_Inv(Arg1: number, Arg2: number, Arg3: number): number;

		F_Inv_RT(Arg1: number, Arg2: number, Arg3: number): number;

		HypGeom_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: number, Arg5: boolean): number;

		LogNorm_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		LogNorm_Inv(Arg1: number, Arg2: number, Arg3: number): number;

		NegBinom_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		Norm_S_Dist(Arg1: number, Arg2: boolean): number;

		Norm_S_Inv(Arg1: number): number;

		T_Test(Arg1: any, Arg2: any, Arg3: number, Arg4: number): number;

		Z_Test(Arg1: any, Arg2: number, Arg3?: any): number;

		Binom_Dist(Arg1: number, Arg2: number, Arg3: number, Arg4: boolean): number;

		Binom_Inv(Arg1: number, Arg2: number, Arg3: number): number;

		Erf_Precise(Arg1: any): number;

		ErfC_Precise(Arg1: any): number;

		GammaLn_Precise(Arg1: number): number;

		Ceiling_Precise(Arg1: number, Arg2?: any): number;

		Floor_Precise(Arg1: number, Arg2?: any): number;

		Acot(Arg1: number): number;

		Acoth(Arg1: number): number;

		Cot(Arg1: number): number;

		Coth(Arg1: number): number;

		Csc(Arg1: number): number;

		Csch(Arg1: number): number;

		Sec(Arg1: number): number;

		Sech(Arg1: number): number;

		ImCot(Arg1: any): string;

		ImTan(Arg1: any): string;

		ImCsc(Arg1: any): string;

		ImCsch(Arg1: any): string;

		ImSec(Arg1: any): string;

		ImSech(Arg1: any): string;

		Bitand(Arg1: number, Arg2: number): number;

		Bitor(Arg1: number, Arg2: number): number;

		Bitxor(Arg1: number, Arg2: number): number;

		Bitlshift(Arg1: number, Arg2: number): number;

		Bitrshift(Arg1: number, Arg2: number): number;

		Xor(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): boolean;

		Combina(Arg1: number, Arg2: number): number;

		Permutationa(Arg1: number, Arg2: number): number;

		PDuration(Arg1: number, Arg2: number, Arg3: number): number;

		Base(Arg1: number, Arg2: number, Arg3?: any): string;

		Decimal(Arg1: string, Arg2: number): number;

		Days(Arg1: any, Arg2: any): number;

		Binom_Dist_Range(Arg1: number, Arg2: number, Arg3: number, Arg4?: any): number;

		Gamma(Arg1: number): number;

		Gauss(Arg1: number): number;

		Phi(Arg1: number): number;

		Skew_p(Arg1: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): number;

		Rri(Arg1: number, Arg2: number, Arg3: number): number;

		Unichar(Arg1: number): string;

		Unicode(Arg1: string): number;

		Munit(Arg1: number): any;

		Arabic(Arg1: string): number;

		IsoWeekNum(Arg1: number, Arg2?: any): number;

		NumberValue(Arg1: string, Arg2: string, Arg3: string): number;

		IsFormula(Arg1: Range): boolean;

		IfNa(Arg1: any, Arg2: any): any;

		Ceiling_Math(Arg1: number, Arg2?: any, Arg3?: any): number;

		Floor_Math(Arg1: number, Arg2?: any, Arg3?: any): number;

		ImSinh(Arg1: any): string;

		ImCosh(Arg1: any): string;

		FilterXML(Arg1: string, Arg2: string): any;

		WebService(Arg1: string): any;

		EncodeURL(Arg1: string): any;

	}

	interface AutoCorrect {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AddReplacement(What: string, Replacement: string): any;

		CapitalizeNamesOfDays: boolean;

		DeleteReplacement(What: string): any;

		ReplacementList(Index?: any, RHS?: any): void;

		ReplacementList(Index?: any): any;

		ReplaceText: boolean;

		TwoInitialCapitals: boolean;

		CorrectSentenceCap: boolean;

		CorrectCapsLock: boolean;

		DisplayAutoCorrectOptions: boolean;

		AutoExpandListRange: boolean;

		AutoFillFormulasInLists: boolean;

	}

	interface Dialogs {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: XlBuiltInDialog): Dialog;

		_Default(Index: XlBuiltInDialog): Dialog;

	}

	interface Dialog {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Show(Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): boolean;

	}

	interface RecentFiles {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Maximum: number;

		readonly Count: number;

		Item(Index: number): RecentFile;

		_Default(Index: number): RecentFile;

		Add(Name: string): RecentFile;

	}

	interface RecentFile {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		readonly Path: string;

		readonly Index: number;

		Open(): Workbook;

		Delete(): void;

	}

	interface ODBCErrors {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): ODBCError;

		_Default(Index: number): ODBCError;

	}

	interface ODBCError {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly SqlState: string;

		readonly ErrorString: string;

	}

	interface OLEDBErrors {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): OLEDBError;

		_Default(Index: number): OLEDBError;

	}

	interface OLEDBError {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly SqlState: string;

		readonly ErrorString: string;

		readonly Native: number;

		readonly Number: number;

		readonly Stage: number;

	}

	interface DefaultWebOptions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		RelyOnCSS: boolean;

		SaveHiddenData: boolean;

		LoadPictures: boolean;

		OrganizeInFolder: boolean;

		UpdateLinksOnSave: boolean;

		UseLongFileNames: boolean;

		CheckIfOfficeIsHTMLEditor: boolean;

		DownloadComponents: boolean;

		RelyOnVML: boolean;

		AllowPNG: boolean;

		ScreenSize: Kso.MsoScreenSize;

		PixelsPerInch: number;

		LocationOfComponents: string;

		Encoding: Kso.MsoEncoding;

		AlwaysSaveInDefaultEncoding: boolean;

		readonly Fonts: Kso.WebPageFonts;

		readonly FolderSuffix: string;

		TargetBrowser: Kso.MsoTargetBrowser;

		SaveNewWebPagesAsWebArchives: boolean;

	}

	interface CellFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Borders: Borders;

		Font: Font;

		Interior: Interior;

		NumberFormat: any;

		NumberFormatLocal: any;

		AddIndent: any;

		IndentLevel: any;

		HorizontalAlignment: any;

		VerticalAlignment: any;

		Orientation: any;

		ShrinkToFit: any;

		WrapText: any;

		Locked: any;

		FormulaHidden: any;

		MergeCells: any;

		Clear(): void;

	}

	interface UsedObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Default(Index: any): any;

		Item(Index: any): any;

	}

	interface Watches {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Source: any): Watch;

		readonly Count: number;

		_Default(Index: any): Watch;

		Item(Index: any): Watch;

		Delete(): void;

	}

	interface Watch {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		readonly Source: any;

	}

	interface AutoRecover {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Enabled: boolean;

		Time: number;

		Path: string;

	}

	interface ErrorCheckingOptions {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BackgroundChecking: boolean;

		IndicatorColorIndex: Kso.XlColorIndex;

		EvaluateToError: boolean;

		TextDate: boolean;

		NumberAsText: boolean;

		InconsistentFormula: boolean;

		OmittedCells: boolean;

		UnlockedFormulaCells: boolean;

		EmptyCellReferences: boolean;

		ListDataValidation: boolean;

		InconsistentTableFormula: boolean;

	}

	interface SmartTagRecognizers {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): SmartTagRecognizer;

		_Default(Index: any): SmartTagRecognizer;

		Recognize: boolean;

	}

	interface SmartTagRecognizer {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Enabled: boolean;

		readonly progID: string;

		readonly _Default: string;

		readonly FullName: string;

	}

	interface SpellingOptions {
		DictLang: number;

		UserDict: string;

		IgnoreCaps: boolean;

		SuggestMainOnly: boolean;

		IgnoreMixedDigits: boolean;

		IgnoreFileNames: boolean;

		GermanPostReform: boolean;

		KoreanCombineAux: boolean;

		KoreanUseAutoChangeList: boolean;

		KoreanProcessCompound: boolean;

		HebrewModes: XlHebrewModes;

		ArabicModes: XlArabicModes;

		ArabicStrictAlefHamza: boolean;

		ArabicStrictFinalYaa: boolean;

		ArabicStrictTaaMarboota: boolean;

		RussianStrictE: boolean;

		SpanishModes: XlSpanishModes;

		PortugalReform: XlPortugueseReform;

		BrazilReform: XlPortugueseReform;

	}

	interface Speech {
		Speak(Text: string, SpeakAsync?: any, SpeakXML?: any, Purge?: any): void;

		Direction: XlSpeakDirection;

		SpeakCellOnEnter: boolean;

	}

	interface RTD {
		ThrottleInterval: number;

		RefreshData(): void;

		RestartServers(): void;

	}

	interface MultiThreadedCalculation {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Enabled: boolean;

		ThreadMode: XlThreadMode;

		ThreadCount: number;

	}

	interface FileExportConverters {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		_Default(Index: any): FileExportConverter;

		Item(Index: any): FileExportConverter;

	}

	interface FileExportConverter {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Extensions: string;

		readonly Description: string;

		readonly FileFormat: number;

	}

	interface AddIns2 {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Filename: string, CopyFile?: any): AddIn;

		readonly Count: number;

		Item(Index: any): AddIn;

		_Default(Index: any): AddIn;

	}

	interface ProtectedViewWindows {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ProtectedViewWindow;

		_Default(Index: any): ProtectedViewWindow;

		Open(Filename: string, Password?: any, AddToMru?: any, RepairMode?: any): ProtectedViewWindow;

	}

	interface ProtectedViewWindow {
		readonly _Default: string;

		Caption: string;

		EnableResize: boolean;

		Height: number;

		Left: number;

		Top: number;

		Width: number;

		Visible: boolean;

		readonly SourceName: string;

		readonly SourcePath: string;

		WindowState: XlProtectedViewWindowState;

		readonly Workbook: Workbook;

		Activate(): void;

		Close(): boolean;

		Edit(WriteResPassword?: any, UpdateLinks?: any): Workbook;

	}

	interface QuickAnalysis {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param XlQuickAnalysisMode 默认值为 0
		 */
		Show(XlQuickAnalysisMode?: XlQuickAnalysisMode): void;

		/**
		 * @param XlQuickAnalysisMode 默认值为 0
		 */
		Hide(XlQuickAnalysisMode?: XlQuickAnalysisMode): void;

	}

	interface DebugTools {
		Dump(Path: string): void;

		Do(): void;

		Diagnose(): void;

		Report(): void;

		Profile(): void;

		RunCommand(cmdid: number, param1?: any, param2?: any, param3?: any): void;

		GetResult(cmdid: number, param: any): any;

		readonly Solver: Solver;

		set DisableMsgBox(arg1: boolean);

		UndoTransBegin(book: Workbook): void;

		UndoTransEnd(book: Workbook, cancelTrans: boolean, desc: string): void;

	}

	interface Solver {
		SolverAdd(CellRef: any, Relation: number, FormulaText?: any): number;

		SolverChange(CellRef: any, Relation: number, FormulaText?: any): number;

		SolverDelete(CellRef: any, Relation: number, FormulaText?: any): number;

		SolverFinish(KeepFinal?: any, ReportArry?: any, OutlineReports?: any): number;

		SolverOk(SetCell?: any, MaxMinVal?: any, ValueOf?: any, ByChange?: any, Engine?: any, EngineDesc?: any): number;

		SolverOptions(MaxTime?: any, Iterations?: any, Precision?: any, AssumeLinear?: any, StepThru?: any, Estimates?: any, Derivatives?: any, SearchOption?: any, IntTolerance?: any, Scaling?: any, Convergence?: any, AssumeNonNeg?: any, PopulationSize?: any, randomSeed?: any, MultiStart?: any, RequireBounds?: any, MutationRate?: any, MaxSubproblems?: any, MaxIntegerSols?: any, SolveWithout?: any, MaxTimeNoImp?: any): number;

		SolverReset(): void;

		SolverSolve(UserFinish?: any, ShowRef?: any): number;

	}

	interface ControlFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AddItem(Text: string, Index?: any): void;

		RemoveAllItems(): void;

		RemoveItem(Index: number, Count?: any): void;

		DropDownLines: number;

		Enabled: boolean;

		LargeChange: number;

		LinkedCell: string;

		List(Index?: any): any;

		ListCount: number;

		ListFillRange: string;

		ListIndex: number;

		LockedText: boolean;

		Max: number;

		Min: number;

		MultiSelect: number;

		PrintObject: boolean;

		SmallChange: number;

		_Default: number;

		Value: number;

	}

	interface LinkFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AutoUpdate: boolean;

		Locked: boolean;

		Update(): void;

	}

	interface OLEFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Activate(): void;

		readonly Object: any;

		readonly progID: string;

		Verb(Verb?: any): void;

	}

	interface RTDUpdateEvent {
		UpdateNotify(): void;

		HeartbeatInterval: number;

		Disconnect(): void;

	}

	interface Global {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: Application;

		readonly ActiveCell: Range;

		readonly ActiveChart: Chart;

		readonly ActiveDialog: DialogSheet;

		readonly ActiveMenuBar: MenuBar;

		ActivePrinter: string;

		readonly ActiveSheet: Worksheet;

		readonly ActiveWindow: Window;

		readonly ActiveWorkbook: Workbook;

		readonly AddIns: AddIns;

		readonly Assistant: Kso.Assistant;

		Calculate(): void;

		readonly Cells: Range;

		readonly Charts: Sheets;

		readonly Columns: Range;

		readonly CommandBars: Kso.CommandBars;

		readonly DDEAppReturnCode: number;

		DDEExecute(Channel: number, String: string): void;

		DDEInitiate(App: string, Topic: string): number;

		DDEPoke(Channel: number, Item: any, Data: any): void;

		DDERequest(Channel: number, Item: string): any;

		DDETerminate(Channel: number): void;

		readonly DialogSheets: Sheets;

		Evaluate(Name: any): any;

		_Evaluate(Name: any): any;

		ExecuteExcel4Macro(String: string): any;

		Intersect(Arg1: Range, Arg2: Range, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): Range;

		readonly MenuBars: MenuBars;

		readonly Modules: Modules;

		readonly Names: Names;

		Range(Cell1: any, Cell2?: any): Range;

		readonly Rows: Range;

		Run(Macro?: any, Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		_Run2(Macro?: any, Arg1?: any, Arg2?: any, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): any;

		readonly Selection: any;

		SendKeys(Keys: any, Wait?: any): void;

		readonly Sheets: Sheets;

		ShortcutMenus(Index: number): Menu;

		readonly ThisWorkbook: Workbook;

		readonly Toolbars: Toolbars;

		Union(Arg1: Range, Arg2: Range, Arg3?: any, Arg4?: any, Arg5?: any, Arg6?: any, Arg7?: any, Arg8?: any, Arg9?: any, Arg10?: any, Arg11?: any, Arg12?: any, Arg13?: any, Arg14?: any, Arg15?: any, Arg16?: any, Arg17?: any, Arg18?: any, Arg19?: any, Arg20?: any, Arg21?: any, Arg22?: any, Arg23?: any, Arg24?: any, Arg25?: any, Arg26?: any, Arg27?: any, Arg28?: any, Arg29?: any, Arg30?: any): Range;

		readonly Windows: Windows;

		readonly Workbooks: Workbooks;

		readonly WorksheetFunction: WorksheetFunction;

		readonly Worksheets: Sheets;

		readonly Excel4IntlMacroSheets: Sheets;

		readonly Excel4MacroSheets: Sheets;

	}

	interface Charts {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Before?: any, After?: any, Count?: any): Chart;

		Copy(Before?: any, After?: any): void;

		readonly Count: number;

		Delete(): void;

		Item(Index: any): any;

		Move(Before?: any, After?: any): void;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		Select(Replace?: any): void;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		Visible: any;

		_Default(Index: any): any;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		Add2(Before?: any, After?: any, Count?: any, NewLayout?: any): Chart;

	}

	interface DrawingObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Accelerator: any;

		AddIndent: boolean;

		AddItem(Text: any, Index?: any): any;

		ArrowHeadLength: any;

		ArrowHeadStyle: any;

		ArrowHeadWidth: any;

		AutoSize: boolean;

		readonly Border: Border;

		CancelButton: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		_Default: number;

		DefaultButton: boolean;

		DismissButton: boolean;

		Display3DShading: boolean;

		DisplayVerticalScrollBar: boolean;

		DropDownLines: number;

		readonly Font: Font;

		HelpButton: boolean;

		HorizontalAlignment: any;

		InputType: number;

		readonly Interior: Interior;

		LargeChange: number;

		LinkedCell: string;

		List(Index?: any): any;

		ListFillRange: string;

		ListIndex: number;

		LockedText: boolean;

		Max: number;

		Min: number;

		MultiLine: boolean;

		MultiSelect: boolean;

		Orientation: any;

		PhoneticAccelerator: any;

		RemoveAllItems(): any;

		RemoveItem(Index: number, Count?: any): any;

		Reshape(Vertex: number, Insert: any, Left?: any, Top?: any): any;

		RoundedCorners: boolean;

		Selected(Index?: any): any;

		Shadow: boolean;

		SmallChange: number;

		Text: string;

		Ungroup(): any;

		Value: number;

		VerticalAlignment: any;

		Vertices(Index1?: any, Index2?: any): any;

		ReadingOrder: number;

		readonly Count: number;

		Item(Index: any): any;

		Group(): GroupObject;

		LinkCombo(Link?: any): any;

	}

	interface GroupObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		ArrowHeadLength: any;

		ArrowHeadStyle: any;

		ArrowHeadWidth: any;

		AutoSize: boolean;

		readonly Border: Border;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		_Default: number;

		readonly Font: Font;

		HorizontalAlignment: any;

		readonly Interior: Interior;

		Orientation: any;

		RoundedCorners: boolean;

		Shadow: boolean;

		Ungroup(): any;

		VerticalAlignment: any;

		ReadingOrder: number;

	}

	interface PivotTables {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): PivotTable;

		Add(PivotCache: PivotCache, TableDestination: any, TableName?: any, ReadData?: any, DefaultVersion?: any): PivotTable;

	}

	interface PivotItems {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: PivotField;

		Add(Name: string): void;

		readonly Count: number;

		Item(Index: any): any;

	}

	interface Button {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		Accelerator: any;

		CancelButton: boolean;

		DefaultButton: boolean;

		DismissButton: boolean;

		HelpButton: boolean;

		PhoneticAccelerator: any;

	}

	interface Buttons {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		Accelerator: any;

		CancelButton: boolean;

		DefaultButton: boolean;

		DismissButton: boolean;

		HelpButton: boolean;

		PhoneticAccelerator: any;

		Add(Left: number, Top: number, Width: number, Height: number): Button;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface CheckBox {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		readonly Border: Border;

		_Default: number;

		Display3DShading: boolean;

		readonly Interior: Interior;

		LinkedCell: string;

		PhoneticAccelerator: any;

		Value: any;

	}

	interface CheckBoxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		readonly Border: Border;

		_Default: number;

		Display3DShading: boolean;

		readonly Interior: Interior;

		LinkedCell: string;

		PhoneticAccelerator: any;

		Value: any;

		Add(Left: number, Top: number, Width: number, Height: number): CheckBox;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface OptionButton {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		readonly Border: Border;

		_Default: number;

		Display3DShading: boolean;

		readonly Interior: Interior;

		LinkedCell: string;

		PhoneticAccelerator: any;

		Value: any;

		readonly GroupBox: GroupBox;

	}

	interface GroupBox {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		Display3DShading: boolean;

		PhoneticAccelerator: any;

	}

	interface OptionButtons {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		readonly Border: Border;

		_Default: number;

		Display3DShading: boolean;

		readonly Interior: Interior;

		LinkedCell: string;

		PhoneticAccelerator: any;

		Value: any;

		readonly GroupBox: GroupBox;

		Add(Left: number, Top: number, Width: number, Height: number): OptionButton;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface EditBox {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		DisplayVerticalScrollBar: boolean;

		InputType: number;

		readonly LinkedObject: string;

		MultiLine: boolean;

		PasswordEdit: boolean;

	}

	interface EditBoxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		DisplayVerticalScrollBar: boolean;

		InputType: number;

		MultiLine: boolean;

		PasswordEdit: boolean;

		Add(Left: number, Top: number, Width: number, Height: number): EditBox;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface ScrollBar {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		_Default: number;

		Display3DShading: boolean;

		LinkedCell: string;

		Max: number;

		Min: number;

		SmallChange: number;

		Value: number;

		LargeChange: number;

	}

	interface ScrollBars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		_Default: number;

		Display3DShading: boolean;

		LinkedCell: string;

		Max: number;

		Min: number;

		SmallChange: number;

		Value: number;

		LargeChange: number;

		Add(Left: number, Top: number, Width: number, Height: number): ScrollBar;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface ListBox {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddItem(Text: any, Index?: any): any;

		Display3DShading: boolean;

		_Default: number;

		LinkedCell: string;

		readonly LinkedObject: any;

		List(Index?: any, RHS?: any): void;

		List(Index?: any): any;

		readonly ListCount: number;

		ListFillRange: string;

		ListIndex: number;

		MultiSelect: number;

		RemoveAllItems(): any;

		RemoveItem(Index: number, Count?: any): any;

		Selected(Index?: any, RHS?: any): void;

		Selected(Index?: any): any;

		Value: number;

	}

	interface ListBoxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddItem(Text: any, Index?: any): any;

		Display3DShading: boolean;

		_Default: number;

		LinkedCell: string;

		List(Index?: any, RHS?: any): void;

		List(Index?: any): any;

		ListFillRange: string;

		ListIndex: number;

		MultiSelect: number;

		RemoveAllItems(): any;

		RemoveItem(Index: number, Count?: any): any;

		Selected(Index?: any, RHS?: any): void;

		Selected(Index?: any): any;

		Value: number;

		Add(Left: number, Top: number, Width: number, Height: number): ListBox;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface GroupBoxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		Display3DShading: boolean;

		PhoneticAccelerator: any;

		Add(Left: number, Top: number, Width: number, Height: number): GroupBox;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface DropDown {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddItem(Text: any, Index?: any): any;

		Display3DShading: boolean;

		_Default: number;

		LinkedCell: string;

		readonly LinkedObject: any;

		List(Index?: any, RHS?: any): void;

		List(Index?: any): any;

		readonly ListCount: number;

		ListFillRange: string;

		ListIndex: number;

		RemoveAllItems(): any;

		RemoveItem(Index: number, Count?: any): any;

		Selected(Index?: any, RHS?: any): void;

		Selected(Index?: any): any;

		Value: number;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		DropDownLines: number;

		Text: string;

	}

	interface DropDowns {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddItem(Text: any, Index?: any): any;

		Display3DShading: boolean;

		_Default: number;

		LinkedCell: string;

		List(Index?: any, RHS?: any): void;

		List(Index?: any): any;

		ListFillRange: string;

		ListIndex: number;

		RemoveAllItems(): any;

		RemoveItem(Index: number, Count?: any): any;

		Selected(Index?: any, RHS?: any): void;

		Selected(Index?: any): any;

		Value: number;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		DropDownLines: number;

		Text: string;

		Add(Left: number, Top: number, Width: number, Height: number, Editable?: any): DropDown;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Spinner {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		_Default: number;

		Display3DShading: boolean;

		LinkedCell: string;

		Max: number;

		Min: number;

		SmallChange: number;

		Value: number;

	}

	interface Spinners {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		_Default: number;

		Display3DShading: boolean;

		LinkedCell: string;

		Max: number;

		Min: number;

		SmallChange: number;

		Value: number;

		Add(Left: number, Top: number, Width: number, Height: number): Spinner;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Label {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		PhoneticAccelerator: any;

	}

	interface Labels {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		LockedText: boolean;

		Text: string;

		Accelerator: any;

		PhoneticAccelerator: any;

		Add(Left: number, Top: number, Width: number, Height: number): Label;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Scenarios {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Name: string, ChangingCells: any, Values?: any, Comment?: any, Locked?: any, Hidden?: any): Scenario;

		readonly Count: number;

		/**
		 * @param ReportType 默认值为 1
		 */
		CreateSummary(ReportType?: XlSummaryReportType, ResultCells?: any): any;

		Item(Index: any): Scenario;

		Merge(Source: any): any;

	}

	interface Scenario {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		ChangeScenario(ChangingCells: any, Values?: any): any;

		readonly ChangingCells: Range;

		Comment: string;

		Delete(): any;

		Hidden: boolean;

		readonly Index: number;

		Locked: boolean;

		Name: string;

		Show(): any;

		Values(Index?: any): any;

	}

	interface GroupObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		ArrowHeadLength: any;

		ArrowHeadStyle: any;

		ArrowHeadWidth: any;

		AutoSize: boolean;

		readonly Border: Border;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		_Default: number;

		readonly Font: Font;

		HorizontalAlignment: any;

		readonly Interior: Interior;

		Orientation: any;

		RoundedCorners: boolean;

		Shadow: boolean;

		Ungroup(): any;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Line {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		ArrowHeadLength: any;

		ArrowHeadStyle: any;

		ArrowHeadWidth: any;

		readonly Border: Border;

	}

	interface Lines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		ArrowHeadLength: any;

		ArrowHeadStyle: any;

		ArrowHeadWidth: any;

		readonly Border: Border;

		Add(X1: number, Y1: number, X2: number, Y2: number): Line;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Rectangle {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		RoundedCorners: boolean;

	}

	interface Rectangles {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		RoundedCorners: boolean;

		Add(Left: number, Top: number, Width: number, Height: number): Rectangle;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Oval {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

	}

	interface Ovals {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Add(Left: number, Top: number, Width: number, Height: number): Oval;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Arc {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

	}

	interface Arcs {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Add(X1: number, Y1: number, X2: number, Y2: number): Arc;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface OLEObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Activate(): any;

		AutoLoad: boolean;

		AutoUpdate: boolean;

		readonly Object: any;

		readonly OLEType: any;

		SourceName: string;

		Update(): any;

		/**
		 * @param Verb 默认值为 1
		 */
		Verb(Verb?: XlOLEVerb): any;

		LinkedCell: string;

		ListFillRange: string;

		readonly progID: string;

		AltHTML: string;

	}

	interface OLEObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		AutoLoad: boolean;

		SourceName: string;

		Add(ClassType?: any, Filename?: any, Link?: any, DisplayAsIcon?: any, IconFileName?: any, IconIndex?: any, IconLabel?: any, Left?: any, Top?: any, Width?: any, Height?: any): OLEObject;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface TextBox {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		RoundedCorners: boolean;

		Shadow: boolean;

	}

	interface TextBoxes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		RoundedCorners: boolean;

		Shadow: boolean;

		Add(Left: number, Top: number, Width: number, Height: number): TextBox;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface Picture {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Formula: string;

	}

	interface Pictures {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Formula: string;

		Add(Left: number, Top: number, Width: number, Height: number): Picture;

		readonly Count: number;

		Group(): GroupObject;

		Insert(Filename: string, Converter?: any): Picture;

		Item(Index: any): any;

		Paste(Link?: any): Picture;

	}

	interface Drawing {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		AddVertex(Left: number, Top: number): any;

		Reshape(Vertex: number, Insert: boolean, Left?: any, Top?: any): any;

		Vertices(Index1?: any, Index2?: any): any;

	}

	interface Drawings {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		AddIndent: boolean;

		AutoScaleFont: any;

		AutoSize: boolean;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		CheckSpelling(CustomDictionary?: any, IgnoreUppercase?: any, AlwaysSuggest?: any, SpellLang?: any): any;

		readonly Font: Font;

		Formula: string;

		HorizontalAlignment: any;

		LockedText: boolean;

		Orientation: any;

		Text: string;

		VerticalAlignment: any;

		ReadingOrder: number;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Reshape(Vertex: number, Insert: boolean, Left?: any, Top?: any): any;

		Add(X1: number, Y1: number, X2: number, Y2: number, Closed: boolean): Drawing;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

	}

	interface DialogSheets {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Before?: any, After?: any, Count?: any): DialogSheet;

		Copy(Before?: any, After?: any): void;

		readonly Count: number;

		Delete(): void;

		Item(Index: any): any;

		Move(Before?: any, After?: any): void;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		Select(Replace?: any): void;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		Visible: any;

		_Default(Index: any): any;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		Add2(Before?: any, After?: any, Count?: any, NewLayout?: any): any;

	}

	interface Worksheets {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Add(Before?: any, After?: any, Count?: any, Type?: any): any;

		Copy(Before?: any, After?: any): void;

		readonly Count: number;

		Delete(): void;

		/**
		 * @param Type 默认值为 -4104
		 */
		FillAcrossSheets(Range: Range, Type?: XlFillWith): void;

		Item(Index: any): any;

		Move(Before?: any, After?: any): void;

		__PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any): void;

		PrintPreview(EnableChanges?: any): void;

		Select(Replace?: any): void;

		readonly HPageBreaks: HPageBreaks;

		readonly VPageBreaks: VPageBreaks;

		Visible: any;

		_Default(Index: any): any;

		_PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any): void;

		PrintOut(From?: any, To?: any, Copies?: any, Preview?: any, ActivePrinter?: any, PrintToFile?: any, Collate?: any, PrToFileName?: any, IgnorePrintAreas?: any): void;

		Add2(Before?: any, After?: any, Count?: any, NewLayout?: any): any;

	}

	interface ChartObject {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		_Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		Name: string;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		Activate(): any;

		readonly Chart: Chart;

		ProtectChartObject: boolean;

		RoundedCorners: boolean;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Copy(): any;

	}

	interface ChartObjects {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		BringToFront(): any;

		_Copy(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Delete(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		Visible: boolean;

		Width: number;

		readonly ShapeRange: ShapeRange;

		ProtectChartObject: boolean;

		RoundedCorners: boolean;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Copy(): any;

		Add(Left: number, Top: number, Width: number, Height: number): ChartObject;

		readonly Count: number;

		Group(): GroupObject;

		Item(Index: any): any;

		_Default(Index: any): any;

	}

	interface FormatCondition {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		_Modify(Type: XlFormatConditionType, Operator?: any, Formula1?: any, Formula2?: any): void;

		readonly Type: number;

		readonly Operator: number;

		readonly Formula1: string;

		readonly Formula2: string;

		readonly Interior: Interior;

		readonly Borders: Borders;

		readonly Font: Font;

		Delete(): void;

		Modify(Type: XlFormatConditionType, Operator?: any, Formula1?: any, Formula2?: any, String?: any, Operator2?: any): void;

		Text: string;

		TextOperator: XlContainsOperator;

		DateOperator: XlTimePeriods;

		NumberFormat: any;

		Priority: number;

		StopIfTrue: boolean;

		readonly AppliesTo: Range;

		ModifyAppliesToRange(Range: Range): void;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

	}

	interface Axis {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		AxisBetweenCategories: boolean;

		readonly AxisGroup: Kso.XlAxisGroup;

		readonly AxisTitle: AxisTitle;

		readonly Border: Border;

		CategoryNames: any;

		Crosses: Kso.XlAxisCrosses;

		CrossesAt: number;

		Delete(): any;

		HasMajorGridlines: boolean;

		HasMinorGridlines: boolean;

		HasTitle: boolean;

		readonly MajorGridlines: Gridlines;

		MajorTickMark: Kso.XlTickMark;

		MajorUnit: number;

		MajorUnitIsAuto: boolean;

		MaximumScale: number;

		MaximumScaleIsAuto: boolean;

		MinimumScale: number;

		MinimumScaleIsAuto: boolean;

		readonly MinorGridlines: Gridlines;

		MinorTickMark: Kso.XlTickMark;

		MinorUnit: number;

		MinorUnitIsAuto: boolean;

		ReversePlotOrder: boolean;

		ScaleType: Kso.XlScaleType;

		Select(): any;

		TickLabelPosition: Kso.XlTickLabelPosition;

		readonly TickLabels: TickLabels;

		TickLabelSpacing: number;

		TickMarkSpacing: number;

		Type: Kso.XlAxisType;

		BaseUnit: Kso.XlTimeUnit;

		BaseUnitIsAuto: boolean;

		MajorUnitScale: Kso.XlTimeUnit;

		MinorUnitScale: Kso.XlTimeUnit;

		CategoryType: Kso.XlCategoryType;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		DisplayUnit: Kso.XlDisplayUnit;

		DisplayUnitCustom: number;

		HasDisplayUnitLabel: boolean;

		readonly DisplayUnitLabel: DisplayUnitLabel;

		LogBase: number;

		TickLabelSpacingIsAuto: boolean;

		readonly Format: ChartFormat;

	}

	interface AxisTitle {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		readonly Font: Font;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		IncludeInLayout: boolean;

		Position: Kso.XlChartElementPosition;

		readonly Format: ChartFormat;

		readonly Height: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface Gridlines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Format: ChartFormat;

	}

	interface DisplayUnitLabel {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		readonly Font: Font;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		Position: Kso.XlChartElementPosition;

		readonly Format: ChartFormat;

		readonly Height: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface ChartGroups {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ChartGroup;

	}

	interface Axes {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		Item(Type: Kso.XlAxisType, AxisGroup?: Kso.XlAxisGroup): Axis;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		_Default(Type: Kso.XlAxisType, AxisGroup?: Kso.XlAxisGroup): Axis;

	}

	interface Points {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): Point;

		_Default(Index: number): Point;

	}

	interface Point {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any): any;

		readonly Border: Border;

		ClearFormats(): any;

		Copy(): any;

		readonly DataLabel: DataLabel;

		Delete(): any;

		Explosion: number;

		HasDataLabel: boolean;

		readonly Interior: Interior;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: Kso.XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: Kso.XlColorIndex;

		MarkerSize: number;

		MarkerStyle: Kso.XlMarkerStyle;

		Paste(): any;

		PictureType: Kso.XlChartPictureType;

		PictureUnit: number;

		Select(): any;

		ApplyPictToSides: boolean;

		ApplyPictToFront: boolean;

		ApplyPictToEnd: boolean;

		Shadow: boolean;

		SecondaryPlot: boolean;

		readonly Fill: ChartFillFormat;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): any;

		Has3DEffect: boolean;

		PictureUnit2: number;

		readonly Format: ChartFormat;

		readonly Height: number;

		readonly Width: number;

		readonly Top: number;

		readonly Left: number;

		readonly Name: string;

		/**
		 * @param Index 默认值为 2
		 */
		PieSliceLocation(loc: Kso.XlPieSliceLocation, Index?: Kso.XlPieSliceIndex): number;

	}

	interface DataLabel {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		Caption: string;

		Characters(Start?: any, Length?: any): Characters;

		readonly Font: Font;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		AutoText: boolean;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		ShowLegendKey: boolean;

		Type: any;

		Position: Kso.XlDataLabelPosition;

		ShowSeriesName: boolean;

		ShowCategoryName: boolean;

		ShowValue: boolean;

		ShowPercentage: boolean;

		ShowBubbleSize: boolean;

		Separator: any;

		readonly Format: ChartFormat;

		readonly _Height: number;

		readonly _Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

		ShowRange: boolean;

		Height: number;

		Width: number;

	}

	interface Series {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any): any;

		AxisGroup: Kso.XlAxisGroup;

		readonly Border: Border;

		ClearFormats(): any;

		Copy(): any;

		DataLabels(Index?: any): any;

		Delete(): any;

		ErrorBar(Direction: Kso.XlErrorBarDirection, Include: Kso.XlErrorBarInclude, Type: Kso.XlErrorBarType, Amount?: any, MinusValues?: any): any;

		readonly ErrorBars: ErrorBars;

		Explosion: number;

		Formula: string;

		FormulaLocal: string;

		FormulaR1C1: string;

		FormulaR1C1Local: string;

		HasDataLabels: boolean;

		HasErrorBars: boolean;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: Kso.XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: Kso.XlColorIndex;

		MarkerSize: number;

		MarkerStyle: Kso.XlMarkerStyle;

		Name: string;

		Paste(): any;

		PictureType: Kso.XlChartPictureType;

		PictureUnit: number;

		PlotOrder: number;

		Points(Index?: any): any;

		Select(): any;

		Smooth: boolean;

		Trendlines(Index?: any): any;

		Type: number;

		ChartType: Kso.XlChartType;

		ApplyCustomType(ChartType: Kso.XlChartType): void;

		Values: any;

		XValues: any;

		BubbleSizes: any;

		BarShape: Kso.XlBarShape;

		ApplyPictToSides: boolean;

		ApplyPictToFront: boolean;

		ApplyPictToEnd: boolean;

		Has3DEffect: boolean;

		Shadow: boolean;

		HasLeaderLines: boolean;

		readonly LeaderLines: LeaderLines;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: Kso.XlDataLabelsType, LegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): any;

		PictureUnit2: number;

		readonly Format: ChartFormat;

		readonly PlotColorIndex: number;

		InvertColor: number;

		InvertColorIndex: number;

		IsFiltered: boolean;

	}

	interface ErrorBars {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		ClearFormats(): any;

		EndStyle: Kso.XlEndStyleCap;

		readonly Format: ChartFormat;

	}

	interface LeaderLines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Border: Border;

		Delete(): void;

		Select(): void;

		readonly Format: ChartFormat;

	}

	interface SeriesCollection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param Rowcol 默认值为 -4105
		 */
		Add(Source: any, Rowcol?: Kso.XlRowCol, SeriesLabels?: any, CategoryLabels?: any, Replace?: any): Series;

		readonly Count: number;

		Extend(Source: any, Rowcol?: any, CategoryLabels?: any): any;

		Item(Index: any): Series;

		/**
		 * @param Rowcol 默认值为 -4105
		 */
		Paste(Rowcol?: Kso.XlRowCol, SeriesLabels?: any, CategoryLabels?: any, Replace?: any, NewSeries?: any): any;

		NewSeries(): Series;

		_Default(Index: any): Series;

	}

	interface DataLabels {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: Border;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		readonly Font: Font;

		HorizontalAlignment: any;

		Orientation: any;

		Shadow: boolean;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		AutoText: boolean;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		ShowLegendKey: boolean;

		Type: any;

		Position: Kso.XlDataLabelPosition;

		ShowSeriesName: boolean;

		ShowCategoryName: boolean;

		ShowValue: boolean;

		ShowPercentage: boolean;

		ShowBubbleSize: boolean;

		Separator: any;

		readonly Count: number;

		Item(Index: any): DataLabel;

		_Default(Index: any): DataLabel;

		readonly Format: ChartFormat;

		Propagate(Index: any): void;

		ShowRange: boolean;

	}

	interface LegendEntry {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): any;

		readonly Font: Font;

		readonly Index: number;

		readonly LegendKey: LegendKey;

		Select(): any;

		AutoScaleFont: any;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		readonly Format: ChartFormat;

	}

	interface LegendKey {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Border: Border;

		ClearFormats(): any;

		Delete(): any;

		readonly Interior: Interior;

		readonly Fill: ChartFillFormat;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: Kso.XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: Kso.XlColorIndex;

		MarkerSize: number;

		MarkerStyle: Kso.XlMarkerStyle;

		PictureType: number;

		PictureUnit: number;

		Select(): any;

		Smooth: boolean;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		Shadow: boolean;

		PictureUnit2: number;

		readonly Format: ChartFormat;

	}

	interface LegendEntries {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): LegendEntry;

		_Default(Index: any): LegendEntry;

	}

	interface Trendlines {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		/**
		 * @param Type 默认值为 -4132
		 */
		Add(Type?: Kso.XlTrendlineType, Order?: any, Period?: any, Forward?: any, Backward?: any, Intercept?: any, DisplayEquation?: any, DisplayRSquared?: any, Name?: any): Trendline;

		readonly Count: number;

		Item(Index?: any): Trendline;

		_Default(Index?: any): Trendline;

	}

	interface Trendline {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Backward: number;

		readonly Border: Border;

		ClearFormats(): any;

		readonly DataLabel: DataLabel;

		Delete(): any;

		DisplayEquation: boolean;

		DisplayRSquared: boolean;

		Forward: number;

		readonly Index: number;

		Intercept: number;

		InterceptIsAuto: boolean;

		Name: string;

		NameIsAuto: boolean;

		Order: number;

		Period: number;

		Select(): any;

		Type: Kso.XlTrendlineType;

		Backward2: number;

		Forward2: number;

		readonly Format: ChartFormat;

	}

	interface WorksheetView {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Sheet: any;

		DisplayGridlines: boolean;

		DisplayFormulas: boolean;

		DisplayHeadings: boolean;

		DisplayOutline: boolean;

		DisplayZeros: boolean;

	}

	interface ChartView {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Sheet: any;

	}

	interface ModuleView {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Sheet: any;

	}

	interface DialogSheetView {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Sheet: any;

	}

	interface ConditionValue {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Modify(newtype: XlConditionValueTypes, newvalue?: any): void;

		readonly Type: XlConditionValueTypes;

		readonly Value: any;

	}

	interface ColorScale {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		readonly StopIfTrue: boolean;

		readonly AppliesTo: Range;

		Formula: string;

		readonly Type: number;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

		readonly ColorScaleCriteria: ColorScaleCriteria;

	}

	interface ColorScaleCriteria {
		readonly Count: number;

		_Default(Index: any): ColorScaleCriterion;

		Item(Index: any): ColorScaleCriterion;

	}

	interface ColorScaleCriterion {
		readonly Index: number;

		Type: XlConditionValueTypes;

		Value: any;

		readonly FormatColor: FormatColor;

	}

	interface Databar {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		readonly StopIfTrue: boolean;

		readonly AppliesTo: Range;

		readonly MinPoint: ConditionValue;

		readonly MaxPoint: ConditionValue;

		PercentMin: number;

		PercentMax: number;

		readonly BarColor: any;

		ShowValue: boolean;

		Formula: string;

		readonly Type: number;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

		Direction: number;

		BarFillType: XlDataBarFillType;

		AxisPosition: XlDataBarAxisPosition;

		readonly AxisColor: any;

		readonly BarBorder: DataBarBorder;

		readonly NegativeBarFormat: NegativeBarFormat;

	}

	interface DataBarBorder {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Type: XlDataBarBorderType;

		readonly Color: any;

	}

	interface NegativeBarFormat {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		ColorType: XlDataBarNegativeColorType;

		BorderColorType: XlDataBarNegativeColorType;

		readonly Color: any;

		readonly BorderColor: any;

	}

	interface IconSetCondition {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		readonly StopIfTrue: boolean;

		readonly AppliesTo: Range;

		readonly Type: number;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ReverseOrder: boolean;

		PercentileValues: boolean;

		ShowIconOnly: boolean;

		Formula: string;

		IconSet: any;

		readonly IconCriteria: IconCriteria;

	}

	interface IconCriteria {
		readonly Count: number;

		_Default(Index: any): IconCriterion;

		Item(Index: any): IconCriterion;

	}

	interface IconCriterion {
		readonly Index: number;

		Type: XlConditionValueTypes;

		Value: any;

		Operator: number;

		Icon: XlIcon;

	}

	interface Top10 {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		StopIfTrue: boolean;

		readonly AppliesTo: Range;

		TopBottom: XlTopBottom;

		Rank: number;

		Percent: boolean;

		readonly Interior: Interior;

		readonly Borders: Borders;

		readonly Font: Font;

		readonly Type: number;

		NumberFormat: any;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

		CalcFor: XlCalcFor;

	}

	interface AboveAverage {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		StopIfTrue: boolean;

		readonly AppliesTo: Range;

		AboveBelow: XlAboveBelow;

		readonly Interior: Interior;

		readonly Borders: Borders;

		readonly Font: Font;

		readonly Type: number;

		NumberFormat: any;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

		CalcFor: XlCalcFor;

		NumStdDev: number;

	}

	interface UniqueValues {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Priority: number;

		StopIfTrue: boolean;

		readonly AppliesTo: Range;

		DupeUnique: XlDupeUnique;

		readonly Interior: Interior;

		readonly Borders: Borders;

		readonly Font: Font;

		readonly Type: number;

		NumberFormat: any;

		SetFirstPriority(): void;

		SetLastPriority(): void;

		Delete(): void;

		ModifyAppliesToRange(Range: Range): void;

		readonly PTCondition: boolean;

		ScopeType: XlPivotConditionScope;

	}

	interface ColorStop {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		Delete(): void;

		Color: any;

		ThemeColor: number;

		TintAndShade: any;

		Position: number;

	}

	interface ColorStops {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Add(Position: number): ColorStop;

		Item(Index: any): ColorStop;

		_Default(Index: any): ColorStop;

		Clear(): void;

	}

	interface LinearGradient {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ColorStops: ColorStops;

		Degree: number;

	}

	interface RectangularGradient {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly ColorStops: ColorStops;

		RectangleTop: number;

		RectangleBottom: number;

		RectangleLeft: number;

		RectangleRight: number;

	}

	interface FullSeriesCollection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Series;

		_Default(Index: any): Series;

	}

	interface ChartCategory {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Name: string;

		IsFiltered: boolean;

	}

	interface CategoryCollection {
		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ChartCategory;

		_Default(Index: any): ChartCategory;

	}

	interface Dummy {
		_ActiveSheetOrChart(): void;

		RGB(): void;

		ChDir(): void;

		DoScript(): void;

		DirectObject(): void;

		RefreshDocument(): void;

		AddSignatureLine(SigProv: any): Kso.Signature;

		AddNonVisibleSignature(SigProv: any): Kso.Signature;

		ShowSignaturesPane: boolean;

		ThemeFontScheme(): void;

		ThemeColorScheme(): void;

		ThemeEffectScheme(): void;

		Load(): void;

	}

	interface CanvasShapes {
	}

	interface EXCELCtrlExtender {
		Name: string;

		readonly Object: any;

		readonly Parent: any;

		readonly Application: Application;

		readonly Creator: XlCreator;

		readonly BottomRightCell: Range;

		BringToFront(): any;

		Copy(): any;

		Delete(): any;

		/**
		 * @param Appearance 默认值为 2
		 * @param Format 默认值为 -4147
		 */
		CopyPicture(Appearance?: XlPictureAppearance, Format?: XlCopyPictureFormat): any;

		Cut(): any;

		Duplicate(): any;

		Enabled: boolean;

		Height: number;

		readonly Index: number;

		Left: number;

		Locked: boolean;

		OnAction: string;

		Placement: any;

		PrintObject: boolean;

		Select(Replace?: any): any;

		SendToBack(): any;

		Top: number;

		readonly TopLeftCell: Range;

		Visible: boolean;

		Width: number;

		readonly ZOrder: number;

		readonly ShapeRange: ShapeRange;

		readonly Border: Border;

		readonly Interior: Interior;

		Shadow: boolean;

		Activate(): any;

		AutoLoad: boolean;

		AutoUpdate: boolean;

		readonly OLEType: any;

		SourceName: string;

		Update(): any;

		/**
		 * @param Verb 默认值为 1
		 */
		Verb(Verb?: XlOLEVerb): any;

		LinkedCell: string;

		ListFillRange: string;

		readonly progID: string;

		AltHTML: string;

	}

	enum Constants {
		xlAll = -4104,
		xlAutomatic = -4105,
		xlBoth = 1,
		xlCenter = -4108,
		xlChecker = 9,
		xlCircle = 8,
		xlCorner = 2,
		xlCrissCross = 16,
		xlCross = 4,
		xlDiamond = 2,
		xlDistributed = -4117,
		xlDoubleAccounting = 5,
		xlFixedValue = 1,
		xlFormats = -4122,
		xlGray16 = 17,
		xlGray8 = 18,
		xlGrid = 15,
		xlHigh = -4127,
		xlInside = 2,
		xlJustify = -4130,
		xlLightDown = 13,
		xlLightHorizontal = 11,
		xlLightUp = 14,
		xlLightVertical = 12,
		xlLow = -4134,
		xlManual = -4135,
		xlMinusValues = 3,
		xlModule = -4141,
		xlNextToAxis = 4,
		xlNone = -4142,
		xlNotes = -4144,
		xlOff = -4146,
		xlOn = 1,
		xlPercent = 2,
		xlPlus = 9,
		xlPlusValues = 2,
		xlSemiGray75 = 10,
		xlShowLabel = 4,
		xlShowLabelAndPercent = 5,
		xlShowPercent = 3,
		xlShowValue = 2,
		xlSimple = -4154,
		xlSingle = 2,
		xlSingleAccounting = 4,
		xlSolid = 1,
		xlSquare = 1,
		xlStar = 5,
		xlStError = 4,
		xlToolbarButton = 2,
		xlTriangle = 3,
		xlGray25 = -4124,
		xlGray50 = -4125,
		xlGray75 = -4126,
		xlBottom = -4107,
		xlLeft = -4131,
		xlRight = -4152,
		xlTop = -4160,
		xl3DBar = -4099,
		xl3DSurface = -4103,
		xlBar = 2,
		xlColumn = 3,
		xlCombination = -4111,
		xlCustom = -4114,
		xlDefaultAutoFormat = -1,
		xlMaximum = 2,
		xlMinimum = 4,
		xlOpaque = 3,
		xlTransparent = 2,
		xlBidi = -5000,
		xlLatin = -5001,
		xlContext = -5002,
		xlLTR = -5003,
		xlRTL = -5004,
		xlFullScript = 1,
		xlPartialScript = 2,
		xlMixedScript = 3,
		xlMixedAuthorizedScript = 4,
		xlVisualCursor = 2,
		xlLogicalCursor = 1,
		xlSystem = 1,
		xlPartial = 3,
		xlHindiNumerals = 3,
		xlBidiCalendar = 3,
		xlGregorian = 2,
		xlComplete = 4,
		xlScale = 3,
		xlClosed = 3,
		xlColor1 = 7,
		xlColor2 = 8,
		xlColor3 = 9,
		xlConstants = 2,
		xlContents = 2,
		xlBelow = 1,
		xlCascade = 7,
		xlCenterAcrossSelection = 7,
		xlChart4 = 2,
		xlChartSeries = 17,
		xlChartShort = 6,
		xlChartTitles = 18,
		xlClassic1 = 1,
		xlClassic2 = 2,
		xlClassic3 = 3,
		xl3DEffects1 = 13,
		xl3DEffects2 = 14,
		xlAbove = 0,
		xlAccounting1 = 4,
		xlAccounting2 = 5,
		xlAccounting3 = 6,
		xlAccounting4 = 17,
		xlAdd = 2,
		xlDebugCodePane = 13,
		xlDesktop = 9,
		xlDirect = 1,
		xlDivide = 5,
		xlDoubleClosed = 5,
		xlDoubleOpen = 4,
		xlDoubleQuote = 1,
		xlEntireChart = 20,
		xlExcelMenus = 1,
		xlExtended = 3,
		xlFill = 5,
		xlFirst = 0,
		xlFloating = 5,
		xlFormula = 5,
		xlGeneral = 1,
		xlGridline = 22,
		xlIcons = 1,
		xlImmediatePane = 12,
		xlInteger = 2,
		xlLast = 1,
		xlLastCell = 11,
		xlList1 = 10,
		xlList2 = 11,
		xlList3 = 12,
		xlLocalFormat1 = 15,
		xlLocalFormat2 = 16,
		xlLong = 3,
		xlLotusHelp = 2,
		xlMacrosheetCell = 7,
		xlMixed = 2,
		xlMultiply = 4,
		xlNarrow = 1,
		xlNoDocuments = 3,
		xlOpen = 2,
		xlOutside = 3,
		xlReference = 4,
		xlSemiautomatic = 2,
		xlShort = 1,
		xlSingleQuote = 2,
		xlStrict = 2,
		xlSubtract = 3,
		xlTextBox = 16,
		xlTiled = 1,
		xlTitleBar = 8,
		xlToolbar = 1,
		xlVisible = 12,
		xlWatchPane = 11,
		xlWide = 3,
		xlWorkbookTab = 6,
		xlWorksheet4 = 1,
		xlWorksheetCell = 3,
		xlWorksheetShort = 5,
		xlAllExceptBorders = 7,
		xlLeftToRight = 2,
		xlTopToBottom = 1,
		xlVeryHidden = 2,
		xlDrawingObject = 14,
	}

	enum XlCreator {
		xlCreatorCode = 1480803660,
	}

	enum XlChartGallery {
		xlBuiltIn = 21,
		xlUserDefined = 22,
		xlAnyGallery = 23,
	}

	enum XlDataSeriesType {
		xlAutoFill = 4,
		xlChronological = 3,
		xlGrowth = 2,
		xlDataSeriesLinear = -4132,
	}

	enum XlBackground {
		xlBackgroundAutomatic = -4105,
		xlBackgroundOpaque = 3,
		xlBackgroundTransparent = 2,
	}

	enum XlWindowState {
		xlMaximized = -4137,
		xlMinimized = -4140,
		xlNormal = -4143,
	}

	enum XlArrowHeadLength {
		xlArrowHeadLengthLong = 3,
		xlArrowHeadLengthMedium = -4138,
		xlArrowHeadLengthShort = 1,
	}

	enum XlErrorBarDirection {
		xlX = -4168,
		xlY = 1,
	}

	enum XlArrowHeadStyle {
		xlArrowHeadStyleClosed = 3,
		xlArrowHeadStyleDoubleClosed = 5,
		xlArrowHeadStyleDoubleOpen = 4,
		xlArrowHeadStyleNone = -4142,
		xlArrowHeadStyleOpen = 2,
	}

	enum XlArrowHeadWidth {
		xlArrowHeadWidthMedium = -4138,
		xlArrowHeadWidthNarrow = 1,
		xlArrowHeadWidthWide = 3,
	}

	enum XlChartPicturePlacement {
		xlSides = 1,
		xlEnd = 2,
		xlEndSides = 3,
		xlFront = 4,
		xlFrontSides = 5,
		xlFrontEnd = 6,
		xlAllFaces = 7,
	}

	enum XlOrientation {
		xlDownward = -4170,
		xlHorizontal = -4128,
		xlUpward = -4171,
		xlVertical = -4166,
	}

	enum XlDataSeriesDate {
		xlDay = 1,
		xlMonth = 3,
		xlWeekday = 2,
		xlYear = 4,
	}

	enum XlLineStyle {
		xlContinuous = 1,
		xlDash = -4115,
		xlDashDot = 4,
		xlDashDotDot = 5,
		xlDot = -4118,
		xlDouble = -4119,
		xlSlantDashDot = 13,
		xlLineStyleNone = -4142,
	}

	enum XlPictureConvertorType {
		xlBMP = 1,
		xlCGM = 7,
		xlDRW = 4,
		xlDXF = 5,
		xlEPS = 8,
		xlHGL = 6,
		xlPCT = 13,
		xlPCX = 10,
		xlPIC = 11,
		xlPLT = 12,
		xlTIF = 9,
		xlWMF = 2,
		xlWPG = 3,
	}

	enum XlPattern {
		xlPatternAutomatic = -4105,
		xlPatternChecker = 9,
		xlPatternCrissCross = 16,
		xlPatternDown = -4121,
		xlPatternGray16 = 17,
		xlPatternGray25 = -4124,
		xlPatternGray50 = -4125,
		xlPatternGray75 = -4126,
		xlPatternGray8 = 18,
		xlPatternGrid = 15,
		xlPatternHorizontal = -4128,
		xlPatternLightDown = 13,
		xlPatternLightHorizontal = 11,
		xlPatternLightUp = 14,
		xlPatternLightVertical = 12,
		xlPatternNone = -4142,
		xlPatternSemiGray75 = 10,
		xlPatternSolid = 1,
		xlPatternUp = -4162,
		xlPatternVertical = -4166,
		xlPatternLinearGradient = 4000,
		xlPatternRectangularGradient = 4001,
	}

	enum XlDisplayUnit {
		xlHundreds = -2,
		xlThousands = -3,
		xlTenThousands = -4,
		xlHundredThousands = -5,
		xlMillions = -6,
		xlTenMillions = -7,
		xlHundredMillions = -8,
		xlThousandMillions = -9,
		xlMillionMillions = -10,
	}

	enum XlChartType {
		xlColumnClustered = 51,
		xlColumnStacked = 52,
		xlColumnStacked100 = 53,
		xl3DColumnClustered = 54,
		xl3DColumnStacked = 55,
		xl3DColumnStacked100 = 56,
		xlBarClustered = 57,
		xlBarStacked = 58,
		xlBarStacked100 = 59,
		xl3DBarClustered = 60,
		xl3DBarStacked = 61,
		xl3DBarStacked100 = 62,
		xlLineStacked = 63,
		xlLineStacked100 = 64,
		xlLineMarkers = 65,
		xlLineMarkersStacked = 66,
		xlLineMarkersStacked100 = 67,
		xlPieOfPie = 68,
		xlPieExploded = 69,
		xl3DPieExploded = 70,
		xlBarOfPie = 71,
		xlXYScatterSmooth = 72,
		xlXYScatterSmoothNoMarkers = 73,
		xlXYScatterLines = 74,
		xlXYScatterLinesNoMarkers = 75,
		xlAreaStacked = 76,
		xlAreaStacked100 = 77,
		xl3DAreaStacked = 78,
		xl3DAreaStacked100 = 79,
		xlDoughnutExploded = 80,
		xlRadarMarkers = 81,
		xlRadarFilled = 82,
		xlSurface = 83,
		xlSurfaceWireframe = 84,
		xlSurfaceTopView = 85,
		xlSurfaceTopViewWireframe = 86,
		xlBubble = 15,
		xlBubble3DEffect = 87,
		xlStockHLC = 88,
		xlStockOHLC = 89,
		xlStockVHLC = 90,
		xlStockVOHLC = 91,
		xlCylinderColClustered = 92,
		xlCylinderColStacked = 93,
		xlCylinderColStacked100 = 94,
		xlCylinderBarClustered = 95,
		xlCylinderBarStacked = 96,
		xlCylinderBarStacked100 = 97,
		xlCylinderCol = 98,
		xlConeColClustered = 99,
		xlConeColStacked = 100,
		xlConeColStacked100 = 101,
		xlConeBarClustered = 102,
		xlConeBarStacked = 103,
		xlConeBarStacked100 = 104,
		xlConeCol = 105,
		xlPyramidColClustered = 106,
		xlPyramidColStacked = 107,
		xlPyramidColStacked100 = 108,
		xlPyramidBarClustered = 109,
		xlPyramidBarStacked = 110,
		xlPyramidBarStacked100 = 111,
		xlPyramidCol = 112,
		xl3DColumn = -4100,
		xlLine = 4,
		xl3DLine = -4101,
		xl3DPie = -4102,
		xlPie = 5,
		xlXYScatter = -4169,
		xl3DArea = -4098,
		xlArea = 1,
		xlDoughnut = -4120,
		xlRadar = -4151,
	}

	enum XlInsertShiftDirection {
		xlShiftDown = -4121,
		xlShiftToRight = -4161,
	}

	enum XlDeleteShiftDirection {
		xlShiftToLeft = -4159,
		xlShiftUp = -4162,
	}

	enum XlDirection {
		xlDown = -4121,
		xlToLeft = -4159,
		xlToRight = -4161,
		xlUp = -4162,
	}

	enum XlConsolidationFunction {
		xlAverage = -4106,
		xlCount = -4112,
		xlCountNums = -4113,
		xlMax = -4136,
		xlMin = -4139,
		xlProduct = -4149,
		xlStDev = -4155,
		xlStDevP = -4156,
		xlSum = -4157,
		xlVar = -4164,
		xlVarP = -4165,
		xlUnknown = 1000,
		xlDistinctCount = 11,
	}

	enum XlSheetType {
		xlChart = -4109,
		xlDialogSheet = -4116,
		xlExcel4IntlMacroSheet = 4,
		xlExcel4MacroSheet = 3,
		xlWorksheet = -4167,
	}

	enum XlLocationInTable {
		xlColumnHeader = -4110,
		xlColumnItem = 5,
		xlDataHeader = 3,
		xlDataItem = 7,
		xlPageHeader = 2,
		xlPageItem = 6,
		xlRowHeader = -4153,
		xlRowItem = 4,
		xlTableBody = 8,
	}

	enum XlFindLookIn {
		xlFormulas = -4123,
		xlComments = -4144,
		xlValues = -4163,
	}

	enum XlWindowType {
		xlChartAsWindow = 5,
		xlChartInPlace = 4,
		xlClipboard = 3,
		xlInfo = -4129,
		xlWorkbook = 1,
	}

	enum XlPivotFieldDataType {
		xlDate = 2,
		xlNumber = -4145,
		xlText = -4158,
	}

	enum XlCopyPictureFormat {
		xlBitmap = 2,
		xlPicture = -4147,
	}

	enum XlPivotTableSourceType {
		xlScenario = 4,
		xlConsolidation = 3,
		xlDatabase = 1,
		xlExternal = 2,
		xlPivotTable = -4148,
	}

	enum XlReferenceStyle {
		xlA1 = 1,
		xlR1C1 = -4150,
	}

	enum XlMSApplication {
		xlMicrosoftAccess = 4,
		xlMicrosoftFoxPro = 5,
		xlMicrosoftMail = 3,
		xlMicrosoftPowerPoint = 2,
		xlMicrosoftProject = 6,
		xlMicrosoftSchedulePlus = 7,
		xlMicrosoftWord = 1,
	}

	enum XlMouseButton {
		xlNoButton = 0,
		xlPrimaryButton = 1,
		xlSecondaryButton = 2,
	}

	enum XlCutCopyMode {
		xlCopy = 1,
		xlCut = 2,
	}

	enum XlFillWith {
		xlFillWithAll = -4104,
		xlFillWithContents = 2,
		xlFillWithFormats = -4122,
	}

	enum XlFilterAction {
		xlFilterCopy = 2,
		xlFilterInPlace = 1,
	}

	enum XlOrder {
		xlDownThenOver = 1,
		xlOverThenDown = 2,
	}

	enum XlLinkType {
		xlLinkTypeExcelLinks = 1,
		xlLinkTypeOLELinks = 2,
	}

	enum XlApplyNamesOrder {
		xlColumnThenRow = 2,
		xlRowThenColumn = 1,
	}

	enum XlEnableCancelKey {
		xlDisabled = 0,
		xlErrorHandler = 2,
		xlInterrupt = 1,
	}

	enum XlPageBreak {
		xlPageBreakAutomatic = -4105,
		xlPageBreakManual = -4135,
		xlPageBreakNone = -4142,
	}

	enum XlOLEType {
		xlOLEControl = 2,
		xlOLEEmbed = 1,
		xlOLELink = 0,
	}

	enum XlPageOrientation {
		xlLandscape = 2,
		xlPortrait = 1,
	}

	enum XlLinkInfo {
		xlEditionDate = 2,
		xlUpdateState = 1,
		xlLinkInfoStatus = 3,
	}

	enum XlCommandUnderlines {
		xlCommandUnderlinesAutomatic = -4105,
		xlCommandUnderlinesOff = -4146,
		xlCommandUnderlinesOn = 1,
	}

	enum XlOLEVerb {
		xlVerbOpen = 2,
		xlVerbPrimary = 1,
	}

	enum XlCalculation {
		xlCalculationAutomatic = -4105,
		xlCalculationManual = -4135,
		xlCalculationSemiautomatic = 2,
	}

	enum XlFileAccess {
		xlReadOnly = 3,
		xlReadWrite = 2,
	}

	enum XlEditionType {
		xlPublisher = 1,
		xlSubscriber = 2,
	}

	enum XlObjectSize {
		xlFitToPage = 2,
		xlFullPage = 3,
		xlScreenSize = 1,
	}

	enum XlLookAt {
		xlPart = 2,
		xlWhole = 1,
	}

	enum XlMailSystem {
		xlMAPI = 1,
		xlNoMailSystem = 0,
		xlPowerTalk = 2,
	}

	enum XlLinkInfoType {
		xlLinkInfoOLELinks = 2,
		xlLinkInfoPublishers = 5,
		xlLinkInfoSubscribers = 6,
	}

	enum XlCVError {
		xlErrCalc = 2050,
		xlErrDiv0 = 2007,
		xlErrField = 2049,
		xlErrNA = 2042,
		xlErrName = 2029,
		xlErrNull = 2000,
		xlErrNum = 2036,
		xlErrRef = 2023,
		xlErrSpill = 2045,
		xlErrValue = 2015,
	}

	enum XlEditionFormat {
		xlBIFF = 2,
		xlPICT = 1,
		xlRTF = 4,
		xlVALU = 8,
	}

	enum XlLink {
		xlExcelLinks = 1,
		xlOLELinks = 2,
		xlPublishers = 5,
		xlSubscribers = 6,
	}

	enum XlCellType {
		xlCellTypeBlanks = 4,
		xlCellTypeConstants = 2,
		xlCellTypeFormulas = -4123,
		xlCellTypeLastCell = 11,
		xlCellTypeComments = -4144,
		xlCellTypeVisible = 12,
		xlCellTypeAllFormatConditions = -4172,
		xlCellTypeSameFormatConditions = -4173,
		xlCellTypeAllValidation = -4174,
		xlCellTypeSameValidation = -4175,
	}

	enum XlArrangeStyle {
		xlArrangeStyleCascade = 7,
		xlArrangeStyleHorizontal = -4128,
		xlArrangeStyleTiled = 1,
		xlArrangeStyleVertical = -4166,
	}

	enum XlMousePointer {
		xlIBeam = 3,
		xlDefault = -4143,
		xlNorthwestArrow = 1,
		xlWait = 2,
	}

	enum XlEditionOptionsOption {
		xlAutomaticUpdate = 4,
		xlCancel = 1,
		xlChangeAttributes = 6,
		xlManualUpdate = 5,
		xlOpenSource = 3,
		xlSelect = 3,
		xlSendPublisher = 2,
		xlUpdateSubscriber = 2,
	}

	enum XlAutoFillType {
		xlFillCopy = 1,
		xlFillDays = 5,
		xlFillDefault = 0,
		xlFillFormats = 3,
		xlFillMonths = 7,
		xlFillSeries = 2,
		xlFillValues = 4,
		xlFillWeekdays = 6,
		xlFillYears = 8,
		xlGrowthTrend = 10,
		xlLinearTrend = 9,
		xlFlashFill = 11,
	}

	enum XlAutoFilterOperator {
		xlAnd = 1,
		xlBottom10Items = 4,
		xlBottom10Percent = 6,
		xlOr = 2,
		xlTop10Items = 3,
		xlTop10Percent = 5,
		xlFilterValues = 7,
		xlFilterCellColor = 8,
		xlFilterFontColor = 9,
		xlFilterIcon = 10,
		xlFilterDynamic = 11,
		xlFilterNoFill = 12,
		xlFilterAutomaticFontColor = 13,
		xlFilterNoIcon = 14,
	}

	enum XlClipboardFormat {
		xlClipboardFormatBIFF12 = 63,
		xlClipboardFormatBIFF = 8,
		xlClipboardFormatBIFF2 = 18,
		xlClipboardFormatBIFF3 = 20,
		xlClipboardFormatBIFF4 = 30,
		xlClipboardFormatBinary = 15,
		xlClipboardFormatBitmap = 9,
		xlClipboardFormatCGM = 13,
		xlClipboardFormatCSV = 5,
		xlClipboardFormatDIF = 4,
		xlClipboardFormatDspText = 12,
		xlClipboardFormatEmbeddedObject = 21,
		xlClipboardFormatEmbedSource = 22,
		xlClipboardFormatLink = 11,
		xlClipboardFormatLinkSource = 23,
		xlClipboardFormatLinkSourceDesc = 32,
		xlClipboardFormatMovie = 24,
		xlClipboardFormatNative = 14,
		xlClipboardFormatObjectDesc = 31,
		xlClipboardFormatObjectLink = 19,
		xlClipboardFormatOwnerLink = 17,
		xlClipboardFormatPICT = 2,
		xlClipboardFormatPrintPICT = 3,
		xlClipboardFormatRTF = 7,
		xlClipboardFormatScreenPICT = 29,
		xlClipboardFormatStandardFont = 28,
		xlClipboardFormatStandardScale = 27,
		xlClipboardFormatSYLK = 6,
		xlClipboardFormatTable = 16,
		xlClipboardFormatText = 0,
		xlClipboardFormatToolFace = 25,
		xlClipboardFormatToolFacePICT = 26,
		xlClipboardFormatVALU = 1,
		xlClipboardFormatWK1 = 10,
	}

	enum XlFileFormat {
		xlAddIn = 18,
		xlCSV = 6,
		xlCSVMac = 22,
		xlCSVMSDOS = 24,
		xlCSVWindows = 23,
		xlDBF2 = 7,
		xlDBF3 = 8,
		xlDBF4 = 11,
		xlDIF = 9,
		xlExcel2 = 16,
		xlExcel2FarEast = 27,
		xlExcel3 = 29,
		xlExcel4 = 33,
		xlExcel5 = 39,
		xlExcel7 = 39,
		xlExcel9795 = 43,
		xlExcel4Workbook = 35,
		xlIntlAddIn = 26,
		xlIntlMacro = 25,
		xlWorkbookNormal = -4143,
		xlSYLK = 2,
		xlTemplate = 17,
		xlCurrentPlatformText = -4158,
		xlTextMac = 19,
		xlTextMSDOS = 21,
		xlTextPrinter = 36,
		xlTextWindows = 20,
		xlWJ2WD1 = 14,
		xlWK1 = 5,
		xlWK1ALL = 31,
		xlWK1FMT = 30,
		xlWK3 = 15,
		xlWK4 = 38,
		xlWK3FM3 = 32,
		xlWKS = 4,
		xlWorks2FarEast = 28,
		xlWQ1 = 34,
		xlWJ3 = 40,
		xlWJ3FJ3 = 41,
		xlUnicodeText = 42,
		xlHtml = 44,
		xlWebArchive = 45,
		xlXMLSpreadsheet = 46,
		xlExcel12 = 50,
		xlOpenXMLWorkbook = 51,
		xlOpenXMLWorkbookMacroEnabled = 52,
		xlOpenXMLTemplateMacroEnabled = 53,
		xlTemplate8 = 17,
		xlOpenXMLTemplate = 54,
		xlAddIn8 = 18,
		xlOpenXMLAddIn = 55,
		xlExcel8 = 56,
		xlOpenDocumentSpreadsheet = 60,
		xlOpenXMLStrictWorkbook = 61,
		xlWorkbookDefault = 51,
	}

	enum XlApplicationInternational {
		xl24HourClock = 33,
		xl4DigitYears = 43,
		xlAlternateArraySeparator = 16,
		xlColumnSeparator = 14,
		xlCountryCode = 1,
		xlCountrySetting = 2,
		xlCurrencyBefore = 37,
		xlCurrencyCode = 25,
		xlCurrencyDigits = 27,
		xlCurrencyLeadingZeros = 40,
		xlCurrencyMinusSign = 38,
		xlCurrencyNegative = 28,
		xlCurrencySpaceBefore = 36,
		xlCurrencyTrailingZeros = 39,
		xlDateOrder = 32,
		xlDateSeparator = 17,
		xlDayCode = 21,
		xlDayLeadingZero = 42,
		xlDecimalSeparator = 3,
		xlGeneralFormatName = 26,
		xlHourCode = 22,
		xlLeftBrace = 12,
		xlLeftBracket = 10,
		xlListSeparator = 5,
		xlLowerCaseColumnLetter = 9,
		xlLowerCaseRowLetter = 8,
		xlMDY = 44,
		xlMetric = 35,
		xlMinuteCode = 23,
		xlMonthCode = 20,
		xlMonthLeadingZero = 41,
		xlMonthNameChars = 30,
		xlNoncurrencyDigits = 29,
		xlNonEnglishFunctions = 34,
		xlRightBrace = 13,
		xlRightBracket = 11,
		xlRowSeparator = 15,
		xlSecondCode = 24,
		xlThousandsSeparator = 4,
		xlTimeLeadingZero = 45,
		xlTimeSeparator = 18,
		xlUpperCaseColumnLetter = 7,
		xlUpperCaseRowLetter = 6,
		xlWeekdayNameChars = 31,
		xlYearCode = 19,
	}

	enum XlPageBreakExtent {
		xlPageBreakFull = 1,
		xlPageBreakPartial = 2,
	}

	enum XlCellInsertionMode {
		xlOverwriteCells = 0,
		xlInsertDeleteCells = 1,
		xlInsertEntireRows = 2,
	}

	enum XlFormulaLabel {
		xlNoLabels = -4142,
		xlRowLabels = 1,
		xlColumnLabels = 2,
		xlMixedLabels = 3,
	}

	enum XlHighlightChangesTime {
		xlSinceMyLastSave = 1,
		xlAllChanges = 2,
		xlNotYetReviewed = 3,
	}

	enum XlCommentDisplayMode {
		xlNoIndicator = 0,
		xlCommentIndicatorOnly = -1,
		xlCommentAndIndicator = 1,
	}

	enum XlFormatConditionType {
		xlCellValue = 1,
		xlExpression = 2,
		xlColorScale = 3,
		xlDatabar = 4,
		xlTop10 = 5,
		xlIconSets = 6,
		xlUniqueValues = 8,
		xlTextString = 9,
		xlBlanksCondition = 10,
		xlTimePeriod = 11,
		xlAboveAverageCondition = 12,
		xlNoBlanksCondition = 13,
		xlErrorsCondition = 16,
		xlNoErrorsCondition = 17,
	}

	enum XlFormatConditionOperator {
		xlBetween = 1,
		xlNotBetween = 2,
		xlEqual = 3,
		xlNotEqual = 4,
		xlGreater = 5,
		xlLess = 6,
		xlGreaterEqual = 7,
		xlLessEqual = 8,
	}

	enum XlEnableSelection {
		xlNoRestrictions = 0,
		xlUnlockedCells = 1,
		xlNoSelection = -4142,
	}

	enum XlDVType {
		xlValidateInputOnly = 0,
		xlValidateWholeNumber = 1,
		xlValidateDecimal = 2,
		xlValidateList = 3,
		xlValidateDate = 4,
		xlValidateTime = 5,
		xlValidateTextLength = 6,
		xlValidateCustom = 7,
	}

	enum XlIMEMode {
		xlIMEModeNoControl = 0,
		xlIMEModeOn = 1,
		xlIMEModeOff = 2,
		xlIMEModeDisable = 3,
		xlIMEModeHiragana = 4,
		xlIMEModeKatakana = 5,
		xlIMEModeKatakanaHalf = 6,
		xlIMEModeAlphaFull = 7,
		xlIMEModeAlpha = 8,
		xlIMEModeHangulFull = 9,
		xlIMEModeHangul = 10,
	}

	enum XlDVAlertStyle {
		xlValidAlertStop = 1,
		xlValidAlertWarning = 2,
		xlValidAlertInformation = 3,
	}

	enum XlChartLocation {
		xlLocationAsNewSheet = 1,
		xlLocationAsObject = 2,
		xlLocationAutomatic = 3,
	}

	enum XlPaperSize {
		xlPaper10x14 = 16,
		xlPaper11x17 = 17,
		xlPaperA3 = 8,
		xlPaperA4 = 9,
		xlPaperA4Small = 10,
		xlPaperA5 = 11,
		xlPaperB4 = 12,
		xlPaperB5 = 13,
		xlPaperCsheet = 24,
		xlPaperDsheet = 25,
		xlPaperEnvelope10 = 20,
		xlPaperEnvelope11 = 21,
		xlPaperEnvelope12 = 22,
		xlPaperEnvelope14 = 23,
		xlPaperEnvelope9 = 19,
		xlPaperEnvelopeB4 = 33,
		xlPaperEnvelopeB5 = 34,
		xlPaperEnvelopeB6 = 35,
		xlPaperEnvelopeC3 = 29,
		xlPaperEnvelopeC4 = 30,
		xlPaperEnvelopeC5 = 28,
		xlPaperEnvelopeC6 = 31,
		xlPaperEnvelopeC65 = 32,
		xlPaperEnvelopeDL = 27,
		xlPaperEnvelopeItaly = 36,
		xlPaperEnvelopeMonarch = 37,
		xlPaperEnvelopePersonal = 38,
		xlPaperEsheet = 26,
		xlPaperExecutive = 7,
		xlPaperFanfoldLegalGerman = 41,
		xlPaperFanfoldStdGerman = 40,
		xlPaperFanfoldUS = 39,
		xlPaperFolio = 14,
		xlPaperLedger = 4,
		xlPaperLegal = 5,
		xlPaperLetter = 1,
		xlPaperLetterSmall = 2,
		xlPaperNote = 18,
		xlPaperQuarto = 15,
		xlPaperStatement = 6,
		xlPaperTabloid = 3,
		xlPaperUser = 256,
	}

	enum XlPasteSpecialOperation {
		xlPasteSpecialOperationAdd = 2,
		xlPasteSpecialOperationDivide = 5,
		xlPasteSpecialOperationMultiply = 4,
		xlPasteSpecialOperationNone = -4142,
		xlPasteSpecialOperationSubtract = 3,
	}

	enum XlPasteType {
		xlPasteAll = -4104,
		xlPasteAllUsingSourceTheme = 13,
		xlPasteAllMergingConditionalFormats = 14,
		xlPasteAllExceptBorders = 7,
		xlPasteFormats = -4122,
		xlPasteFormulas = -4123,
		xlPasteComments = -4144,
		xlPasteValues = -4163,
		xlPasteColumnWidths = 8,
		xlPasteValidation = 6,
		xlPasteFormulasAndNumberFormats = 11,
		xlPasteValuesAndNumberFormats = 12,
	}

	enum XlPhoneticCharacterType {
		xlKatakanaHalf = 0,
		xlKatakana = 1,
		xlHiragana = 2,
		xlNoConversion = 3,
	}

	enum XlPhoneticAlignment {
		xlPhoneticAlignNoControl = 0,
		xlPhoneticAlignLeft = 1,
		xlPhoneticAlignCenter = 2,
		xlPhoneticAlignDistributed = 3,
	}

	enum XlPictureAppearance {
		xlPrinter = 2,
		xlScreen = 1,
	}

	enum XlPivotFieldCalculation {
		xlDifferenceFrom = 2,
		xlIndex = 9,
		xlNoAdditionalCalculation = -4143,
		xlPercentDifferenceFrom = 4,
		xlPercentOf = 3,
		xlPercentOfColumn = 7,
		xlPercentOfRow = 6,
		xlPercentOfTotal = 8,
		xlRunningTotal = 5,
		xlPercentOfParentRow = 10,
		xlPercentOfParentColumn = 11,
		xlPercentOfParent = 12,
		xlPercentRunningTotal = 13,
		xlRankAscending = 14,
		xlRankDecending = 15,
	}

	enum XlPlacement {
		xlFreeFloating = 3,
		xlMove = 2,
		xlMoveAndSize = 1,
	}

	enum XlPlatform {
		xlMacintosh = 1,
		xlMSDOS = 3,
		xlWindows = 2,
	}

	enum XlPrintLocation {
		xlPrintSheetEnd = 1,
		xlPrintInPlace = 16,
		xlPrintNoComments = -4142,
	}

	enum XlPriority {
		xlPriorityHigh = -4127,
		xlPriorityLow = -4134,
		xlPriorityNormal = -4143,
	}

	enum XlPTSelectionMode {
		xlLabelOnly = 1,
		xlDataAndLabel = 0,
		xlDataOnly = 2,
		xlOrigin = 3,
		xlButton = 15,
		xlBlanks = 4,
		xlFirstRow = 256,
	}

	enum XlRangeAutoFormat {
		xlRangeAutoFormat3DEffects1 = 13,
		xlRangeAutoFormat3DEffects2 = 14,
		xlRangeAutoFormatAccounting1 = 4,
		xlRangeAutoFormatAccounting2 = 5,
		xlRangeAutoFormatAccounting3 = 6,
		xlRangeAutoFormatAccounting4 = 17,
		xlRangeAutoFormatClassic1 = 1,
		xlRangeAutoFormatClassic2 = 2,
		xlRangeAutoFormatClassic3 = 3,
		xlRangeAutoFormatColor1 = 7,
		xlRangeAutoFormatColor2 = 8,
		xlRangeAutoFormatColor3 = 9,
		xlRangeAutoFormatList1 = 10,
		xlRangeAutoFormatList2 = 11,
		xlRangeAutoFormatList3 = 12,
		xlRangeAutoFormatLocalFormat1 = 15,
		xlRangeAutoFormatLocalFormat2 = 16,
		xlRangeAutoFormatLocalFormat3 = 19,
		xlRangeAutoFormatLocalFormat4 = 20,
		xlRangeAutoFormatReport1 = 21,
		xlRangeAutoFormatReport2 = 22,
		xlRangeAutoFormatReport3 = 23,
		xlRangeAutoFormatReport4 = 24,
		xlRangeAutoFormatReport5 = 25,
		xlRangeAutoFormatReport6 = 26,
		xlRangeAutoFormatReport7 = 27,
		xlRangeAutoFormatReport8 = 28,
		xlRangeAutoFormatReport9 = 29,
		xlRangeAutoFormatReport10 = 30,
		xlRangeAutoFormatClassicPivotTable = 31,
		xlRangeAutoFormatTable1 = 32,
		xlRangeAutoFormatTable2 = 33,
		xlRangeAutoFormatTable3 = 34,
		xlRangeAutoFormatTable4 = 35,
		xlRangeAutoFormatTable5 = 36,
		xlRangeAutoFormatTable6 = 37,
		xlRangeAutoFormatTable7 = 38,
		xlRangeAutoFormatTable8 = 39,
		xlRangeAutoFormatTable9 = 40,
		xlRangeAutoFormatTable10 = 41,
		xlRangeAutoFormatPTNone = 42,
		xlRangeAutoFormatNone = -4142,
		xlRangeAutoFormatSimple = -4154,
	}

	enum XlReferenceType {
		xlAbsolute = 1,
		xlAbsRowRelColumn = 2,
		xlRelative = 4,
		xlRelRowAbsColumn = 3,
	}

	enum XlLayoutFormType {
		xlTabular = 0,
		xlOutline = 1,
	}

	enum XlRoutingSlipDelivery {
		xlAllAtOnce = 2,
		xlOneAfterAnother = 1,
	}

	enum XlRoutingSlipStatus {
		xlNotYetRouted = 0,
		xlRoutingComplete = 2,
		xlRoutingInProgress = 1,
	}

	enum XlRunAutoMacro {
		xlAutoActivate = 3,
		xlAutoClose = 2,
		xlAutoDeactivate = 4,
		xlAutoOpen = 1,
	}

	enum XlSaveAction {
		xlDoNotSaveChanges = 2,
		xlSaveChanges = 1,
	}

	enum XlSaveAsAccessMode {
		xlExclusive = 3,
		xlNoChange = 1,
		xlShared = 2,
	}

	enum XlSaveConflictResolution {
		xlLocalSessionChanges = 2,
		xlOtherSessionChanges = 3,
		xlUserResolution = 1,
	}

	enum XlSearchDirection {
		xlNext = 1,
		xlPrevious = 2,
	}

	enum XlSearchOrder {
		xlByColumns = 2,
		xlByRows = 1,
	}

	enum XlSheetVisibility {
		xlSheetVisible = -1,
		xlSheetHidden = 0,
		xlSheetVeryHidden = 2,
	}

	enum XlSortMethod {
		xlPinYin = 1,
		xlStroke = 2,
	}

	enum XlSortMethodOld {
		xlCodePage = 2,
		xlSyllabary = 1,
	}

	enum XlSortOrder {
		xlAscending = 1,
		xlDescending = 2,
	}

	enum XlSortOrientation {
		xlSortRows = 2,
		xlSortColumns = 1,
	}

	enum XlSortType {
		xlSortLabels = 2,
		xlSortValues = 1,
	}

	enum XlSpecialCellsValue {
		xlErrors = 16,
		xlLogical = 4,
		xlNumbers = 1,
		xlTextValues = 2,
	}

	enum XlSubscribeToFormat {
		xlSubscribeToPicture = -4147,
		xlSubscribeToText = -4158,
	}

	enum XlSummaryRow {
		xlSummaryAbove = 0,
		xlSummaryBelow = 1,
	}

	enum XlSummaryColumn {
		xlSummaryOnLeft = -4131,
		xlSummaryOnRight = -4152,
	}

	enum XlSummaryReportType {
		xlSummaryPivotTable = -4148,
		xlStandardSummary = 1,
	}

	enum XlTabPosition {
		xlTabPositionFirst = 0,
		xlTabPositionLast = 1,
	}

	enum XlTextParsingType {
		xlDelimited = 1,
		xlFixedWidth = 2,
	}

	enum XlTextQualifier {
		xlTextQualifierDoubleQuote = 1,
		xlTextQualifierNone = -4142,
		xlTextQualifierSingleQuote = 2,
	}

	enum XlWBATemplate {
		xlWBATChart = -4109,
		xlWBATExcel4IntlMacroSheet = 4,
		xlWBATExcel4MacroSheet = 3,
		xlWBATWorksheet = -4167,
	}

	enum XlWindowView {
		xlNormalView = 1,
		xlPageBreakPreview = 2,
		xlPageLayoutView = 3,
	}

	enum XlXLMMacroType {
		xlCommand = 2,
		xlFunction = 1,
		xlNotXLM = 3,
	}

	enum XlYesNoGuess {
		xlGuess = 0,
		xlNo = 2,
		xlYes = 1,
	}

	enum XlBordersIndex {
		xlInsideHorizontal = 12,
		xlInsideVertical = 11,
		xlDiagonalDown = 5,
		xlDiagonalUp = 6,
		xlEdgeBottom = 9,
		xlEdgeLeft = 7,
		xlEdgeRight = 10,
		xlEdgeTop = 8,
	}

	enum XlToolbarProtection {
		xlNoButtonChanges = 1,
		xlNoChanges = 4,
		xlNoDockingChanges = 3,
		xlToolbarProtectionNone = -4143,
		xlNoShapeChanges = 2,
	}

	enum XlBuiltInDialog {
		xlDialogOpen = 1,
		xlDialogOpenLinks = 2,
		xlDialogSaveAs = 5,
		xlDialogFileDelete = 6,
		xlDialogPageSetup = 7,
		xlDialogPrint = 8,
		xlDialogPrinterSetup = 9,
		xlDialogArrangeAll = 12,
		xlDialogWindowSize = 13,
		xlDialogWindowMove = 14,
		xlDialogRun = 17,
		xlDialogSetPrintTitles = 23,
		xlDialogFont = 26,
		xlDialogDisplay = 27,
		xlDialogProtectDocument = 28,
		xlDialogCalculation = 32,
		xlDialogExtract = 35,
		xlDialogDataDelete = 36,
		xlDialogSort = 39,
		xlDialogDataSeries = 40,
		xlDialogTable = 41,
		xlDialogFormatNumber = 42,
		xlDialogAlignment = 43,
		xlDialogStyle = 44,
		xlDialogBorder = 45,
		xlDialogCellProtection = 46,
		xlDialogColumnWidth = 47,
		xlDialogClear = 52,
		xlDialogPasteSpecial = 53,
		xlDialogEditDelete = 54,
		xlDialogInsert = 55,
		xlDialogPasteNames = 58,
		xlDialogDefineName = 61,
		xlDialogCreateNames = 62,
		xlDialogFormulaGoto = 63,
		xlDialogFormulaFind = 64,
		xlDialogGalleryArea = 67,
		xlDialogGalleryBar = 68,
		xlDialogGalleryColumn = 69,
		xlDialogGalleryLine = 70,
		xlDialogGalleryPie = 71,
		xlDialogGalleryScatter = 72,
		xlDialogCombination = 73,
		xlDialogGridlines = 76,
		xlDialogAxes = 78,
		xlDialogAttachText = 80,
		xlDialogPatterns = 84,
		xlDialogMainChart = 85,
		xlDialogOverlay = 86,
		xlDialogScale = 87,
		xlDialogFormatLegend = 88,
		xlDialogFormatText = 89,
		xlDialogParse = 91,
		xlDialogUnhide = 94,
		xlDialogWorkspace = 95,
		xlDialogActivate = 103,
		xlDialogCopyPicture = 108,
		xlDialogDeleteName = 110,
		xlDialogDeleteFormat = 111,
		xlDialogNew = 119,
		xlDialogRowHeight = 127,
		xlDialogFormatMove = 128,
		xlDialogFormatSize = 129,
		xlDialogFormulaReplace = 130,
		xlDialogSelectSpecial = 132,
		xlDialogApplyNames = 133,
		xlDialogReplaceFont = 134,
		xlDialogSplit = 137,
		xlDialogOutline = 142,
		xlDialogSaveWorkbook = 145,
		xlDialogCopyChart = 147,
		xlDialogFormatFont = 150,
		xlDialogNote = 154,
		xlDialogSetUpdateStatus = 159,
		xlDialogColorPalette = 161,
		xlDialogChangeLink = 166,
		xlDialogAppMove = 170,
		xlDialogAppSize = 171,
		xlDialogMainChartType = 185,
		xlDialogOverlayChartType = 186,
		xlDialogOpenMail = 188,
		xlDialogSendMail = 189,
		xlDialogStandardFont = 190,
		xlDialogConsolidate = 191,
		xlDialogSortSpecial = 192,
		xlDialogGallery3dArea = 193,
		xlDialogGallery3dColumn = 194,
		xlDialogGallery3dLine = 195,
		xlDialogGallery3dPie = 196,
		xlDialogView3d = 197,
		xlDialogGoalSeek = 198,
		xlDialogWorkgroup = 199,
		xlDialogFillGroup = 200,
		xlDialogUpdateLink = 201,
		xlDialogPromote = 202,
		xlDialogDemote = 203,
		xlDialogShowDetail = 204,
		xlDialogObjectProperties = 207,
		xlDialogSaveNewObject = 208,
		xlDialogApplyStyle = 212,
		xlDialogAssignToObject = 213,
		xlDialogObjectProtection = 214,
		xlDialogCreatePublisher = 217,
		xlDialogSubscribeTo = 218,
		xlDialogShowToolbar = 220,
		xlDialogPrintPreview = 222,
		xlDialogEditColor = 223,
		xlDialogFormatMain = 225,
		xlDialogFormatOverlay = 226,
		xlDialogEditSeries = 228,
		xlDialogDefineStyle = 229,
		xlDialogGalleryRadar = 249,
		xlDialogEditionOptions = 251,
		xlDialogZoom = 256,
		xlDialogInsertObject = 259,
		xlDialogSize = 261,
		xlDialogMove = 262,
		xlDialogFormatAuto = 269,
		xlDialogGallery3dBar = 272,
		xlDialogGallery3dSurface = 273,
		xlDialogCustomizeToolbar = 276,
		xlDialogWorkbookAdd = 281,
		xlDialogWorkbookMove = 282,
		xlDialogWorkbookCopy = 283,
		xlDialogWorkbookOptions = 284,
		xlDialogSaveWorkspace = 285,
		xlDialogChartWizard = 288,
		xlDialogAssignToTool = 293,
		xlDialogPlacement = 300,
		xlDialogFillWorkgroup = 301,
		xlDialogWorkbookNew = 302,
		xlDialogScenarioCells = 305,
		xlDialogScenarioAdd = 307,
		xlDialogScenarioEdit = 308,
		xlDialogScenarioSummary = 311,
		xlDialogPivotTableWizard = 312,
		xlDialogPivotFieldProperties = 313,
		xlDialogOptionsCalculation = 318,
		xlDialogOptionsEdit = 319,
		xlDialogOptionsView = 320,
		xlDialogAddinManager = 321,
		xlDialogMenuEditor = 322,
		xlDialogAttachToolbars = 323,
		xlDialogOptionsChart = 325,
		xlDialogVbaInsertFile = 328,
		xlDialogVbaProcedureDefinition = 330,
		xlDialogRoutingSlip = 336,
		xlDialogMailLogon = 339,
		xlDialogInsertPicture = 342,
		xlDialogGalleryDoughnut = 344,
		xlDialogChartTrend = 350,
		xlDialogWorkbookInsert = 354,
		xlDialogOptionsTransition = 355,
		xlDialogOptionsGeneral = 356,
		xlDialogFilterAdvanced = 370,
		xlDialogMailNextLetter = 378,
		xlDialogDataLabel = 379,
		xlDialogInsertTitle = 380,
		xlDialogFontProperties = 381,
		xlDialogMacroOptions = 382,
		xlDialogWorkbookUnhide = 384,
		xlDialogWorkbookName = 386,
		xlDialogGalleryCustom = 388,
		xlDialogAddChartAutoformat = 390,
		xlDialogChartAddData = 392,
		xlDialogTabOrder = 394,
		xlDialogSubtotalCreate = 398,
		xlDialogWorkbookTabSplit = 415,
		xlDialogWorkbookProtect = 417,
		xlDialogScrollbarProperties = 420,
		xlDialogPivotShowPages = 421,
		xlDialogTextToColumns = 422,
		xlDialogFormatCharttype = 423,
		xlDialogPivotFieldGroup = 433,
		xlDialogPivotFieldUngroup = 434,
		xlDialogCheckboxProperties = 435,
		xlDialogLabelProperties = 436,
		xlDialogListboxProperties = 437,
		xlDialogEditboxProperties = 438,
		xlDialogOpenText = 441,
		xlDialogPushbuttonProperties = 445,
		xlDialogFilter = 447,
		xlDialogFunctionWizard = 450,
		xlDialogSaveCopyAs = 456,
		xlDialogOptionsListsAdd = 458,
		xlDialogSeriesAxes = 460,
		xlDialogSeriesX = 461,
		xlDialogSeriesY = 462,
		xlDialogErrorbarX = 463,
		xlDialogErrorbarY = 464,
		xlDialogFormatChart = 465,
		xlDialogSeriesOrder = 466,
		xlDialogMailEditMailer = 470,
		xlDialogStandardWidth = 472,
		xlDialogScenarioMerge = 473,
		xlDialogProperties = 474,
		xlDialogSummaryInfo = 474,
		xlDialogFindFile = 475,
		xlDialogActiveCellFont = 476,
		xlDialogVbaMakeAddin = 478,
		xlDialogFileSharing = 481,
		xlDialogAutoCorrect = 485,
		xlDialogCustomViews = 493,
		xlDialogInsertNameLabel = 496,
		xlDialogSeriesShape = 504,
		xlDialogChartOptionsDataLabels = 505,
		xlDialogChartOptionsDataTable = 506,
		xlDialogSetBackgroundPicture = 509,
		xlDialogDataValidation = 525,
		xlDialogChartType = 526,
		xlDialogChartLocation = 527,
		_xlDialogPhonetic = 538,
		xlDialogChartSourceData = 540,
		_xlDialogChartSourceData = 541,
		xlDialogSeriesOptions = 557,
		xlDialogPivotTableOptions = 567,
		xlDialogPivotSolveOrder = 568,
		xlDialogPivotCalculatedField = 570,
		xlDialogPivotCalculatedItem = 572,
		xlDialogConditionalFormatting = 583,
		xlDialogInsertHyperlink = 596,
		xlDialogProtectSharing = 620,
		xlDialogOptionsME = 647,
		xlDialogPublishAsWebPage = 653,
		xlDialogPhonetic = 656,
		xlDialogNewWebQuery = 667,
		xlDialogImportTextFile = 666,
		xlDialogExternalDataProperties = 530,
		xlDialogWebOptionsGeneral = 683,
		xlDialogWebOptionsFiles = 684,
		xlDialogWebOptionsPictures = 685,
		xlDialogWebOptionsEncoding = 686,
		xlDialogWebOptionsFonts = 687,
		xlDialogPivotClientServerSet = 689,
		xlDialogPropertyFields = 754,
		xlDialogSearch = 731,
		xlDialogEvaluateFormula = 709,
		xlDialogDataLabelMultiple = 723,
		xlDialogChartOptionsDataLabelMultiple = 724,
		xlDialogErrorChecking = 732,
		xlDialogWebOptionsBrowsers = 773,
		xlDialogCreateList = 796,
		xlDialogPermission = 832,
		xlDialogMyPermission = 834,
		xlDialogDocumentInspector = 862,
		xlDialogNameManager = 977,
		xlDialogNewName = 978,
		xlDialogSparklineInsertLine = 1133,
		xlDialogSparklineInsertColumn = 1134,
		xlDialogSparklineInsertWinLoss = 1135,
		xlDialogSlicerSettings = 1179,
		xlDialogSlicerCreation = 1182,
		xlDialogSlicerPivotTableConnections = 1184,
		xlDialogPivotTableSlicerConnections = 1183,
		xlDialogPivotTableWhatIfAnalysisSettings = 1153,
		xlDialogSetManager = 1109,
		xlDialogSetMDXEditor = 1208,
		xlDialogSetTupleEditorOnRows = 1107,
		xlDialogSetTupleEditorOnColumns = 1108,
		xlDialogManageRelationships = 1271,
		xlDialogCreateRelationship = 1272,
		xlDialogRecommendedPivotTables = 1258,
	}

	enum XlParameterType {
		xlPrompt = 0,
		xlConstant = 1,
		xlRange = 2,
	}

	enum XlParameterDataType {
		xlParamTypeUnknown = 0,
		xlParamTypeChar = 1,
		xlParamTypeNumeric = 2,
		xlParamTypeDecimal = 3,
		xlParamTypeInteger = 4,
		xlParamTypeSmallInt = 5,
		xlParamTypeFloat = 6,
		xlParamTypeReal = 7,
		xlParamTypeDouble = 8,
		xlParamTypeVarChar = 12,
		xlParamTypeDate = 9,
		xlParamTypeTime = 10,
		xlParamTypeTimestamp = 11,
		xlParamTypeLongVarChar = -1,
		xlParamTypeBinary = -2,
		xlParamTypeVarBinary = -3,
		xlParamTypeLongVarBinary = -4,
		xlParamTypeBigInt = -5,
		xlParamTypeTinyInt = -6,
		xlParamTypeBit = -7,
		xlParamTypeWChar = -8,
	}

	enum XlFormControl {
		xlButtonControl = 0,
		xlCheckBox = 1,
		xlDropDown = 2,
		xlEditBox = 3,
		xlGroupBox = 4,
		xlLabel = 5,
		xlListBox = 6,
		xlOptionButton = 7,
		xlScrollBar = 8,
		xlSpinner = 9,
	}

	enum XlSourceType {
		xlSourceWorkbook = 0,
		xlSourceSheet = 1,
		xlSourcePrintArea = 2,
		xlSourceAutoFilter = 3,
		xlSourceRange = 4,
		xlSourceChart = 5,
		xlSourcePivotTable = 6,
		xlSourceQuery = 7,
	}

	enum XlHtmlType {
		xlHtmlStatic = 0,
		xlHtmlCalc = 1,
		xlHtmlList = 2,
		xlHtmlChart = 3,
	}

	enum XlPivotFormatType {
		xlReport1 = 0,
		xlReport2 = 1,
		xlReport3 = 2,
		xlReport4 = 3,
		xlReport5 = 4,
		xlReport6 = 5,
		xlReport7 = 6,
		xlReport8 = 7,
		xlReport9 = 8,
		xlReport10 = 9,
		xlTable1 = 10,
		xlTable2 = 11,
		xlTable3 = 12,
		xlTable4 = 13,
		xlTable5 = 14,
		xlTable6 = 15,
		xlTable7 = 16,
		xlTable8 = 17,
		xlTable9 = 18,
		xlTable10 = 19,
		xlPTClassic = 20,
		xlPTNone = 21,
	}

	enum XlCmdType {
		xlCmdCube = 1,
		xlCmdSql = 2,
		xlCmdTable = 3,
		xlCmdDefault = 4,
		xlCmdList = 5,
		xlCmdTableCollection = 6,
		xlCmdExcel = 7,
		xlCmdDAX = 8,
	}

	enum XlColumnDataType {
		xlGeneralFormat = 1,
		xlTextFormat = 2,
		xlMDYFormat = 3,
		xlDMYFormat = 4,
		xlYMDFormat = 5,
		xlMYDFormat = 6,
		xlDYMFormat = 7,
		xlYDMFormat = 8,
		xlSkipColumn = 9,
		xlEMDFormat = 10,
	}

	enum XlQueryType {
		xlODBCQuery = 1,
		xlDAORecordset = 2,
		xlWebQuery = 4,
		xlOLEDBQuery = 5,
		xlTextImport = 6,
		xlADORecordset = 7,
	}

	enum XlWebSelectionType {
		xlEntirePage = 1,
		xlAllTables = 2,
		xlSpecifiedTables = 3,
	}

	enum XlCubeFieldType {
		xlHierarchy = 1,
		xlMeasure = 2,
		xlSet = 3,
	}

	enum XlWebFormatting {
		xlWebFormattingAll = 1,
		xlWebFormattingRTF = 2,
		xlWebFormattingNone = 3,
	}

	enum XlDisplayDrawingObjects {
		xlDisplayShapes = -4104,
		xlHide = 3,
		xlPlaceholders = 2,
	}

	enum XlSubtototalLocationType {
		xlAtTop = 1,
		xlAtBottom = 2,
	}

	enum XlPivotTableVersionList {
		xlPivotTableVersion2000 = 0,
		xlPivotTableVersion10 = 1,
		xlPivotTableVersion11 = 2,
		xlPivotTableVersion12 = 3,
		xlPivotTableVersion14 = 4,
		xlPivotTableVersion15 = 5,
		xlPivotTableVersionCurrent = -1,
	}

	enum XlPrintErrors {
		xlPrintErrorsDisplayed = 0,
		xlPrintErrorsBlank = 1,
		xlPrintErrorsDash = 2,
		xlPrintErrorsNA = 3,
	}

	enum XlPivotCellType {
		xlPivotCellValue = 0,
		xlPivotCellPivotItem = 1,
		xlPivotCellSubtotal = 2,
		xlPivotCellGrandTotal = 3,
		xlPivotCellDataField = 4,
		xlPivotCellPivotField = 5,
		xlPivotCellPageFieldItem = 6,
		xlPivotCellCustomSubtotal = 7,
		xlPivotCellDataPivotField = 8,
		xlPivotCellBlankCell = 9,
	}

	enum XlPivotTableMissingItems {
		xlMissingItemsDefault = -1,
		xlMissingItemsNone = 0,
		xlMissingItemsMax = 32500,
		xlMissingItemsMax2 = 1048576,
	}

	enum XlCalculationState {
		xlDone = 0,
		xlCalculating = 1,
		xlPending = 2,
	}

	enum XlCalculationInterruptKey {
		xlNoKey = 0,
		xlEscKey = 1,
		xlAnyKey = 2,
	}

	enum XlSortDataOption {
		xlSortNormal = 0,
		xlSortTextAsNumbers = 1,
	}

	enum XlUpdateLinks {
		xlUpdateLinksUserSetting = 1,
		xlUpdateLinksNever = 2,
		xlUpdateLinksAlways = 3,
	}

	enum XlLinkStatus {
		xlLinkStatusOK = 0,
		xlLinkStatusMissingFile = 1,
		xlLinkStatusMissingSheet = 2,
		xlLinkStatusOld = 3,
		xlLinkStatusSourceNotCalculated = 4,
		xlLinkStatusIndeterminate = 5,
		xlLinkStatusNotStarted = 6,
		xlLinkStatusInvalidName = 7,
		xlLinkStatusSourceNotOpen = 8,
		xlLinkStatusSourceOpen = 9,
		xlLinkStatusCopiedValues = 10,
	}

	enum XlSearchWithin {
		xlWithinSheet = 1,
		xlWithinWorkbook = 2,
	}

	enum XlCorruptLoad {
		xlNormalLoad = 0,
		xlRepairFile = 1,
		xlExtractData = 2,
	}

	enum XlRobustConnect {
		xlAsRequired = 0,
		xlAlways = 1,
		xlNever = 2,
	}

	enum XlErrorChecks {
		xlEvaluateToError = 1,
		xlTextDate = 2,
		xlNumberAsText = 3,
		xlInconsistentFormula = 4,
		xlOmittedCells = 5,
		xlUnlockedFormulaCells = 6,
		xlEmptyCellReferences = 7,
		xlListDataValidation = 8,
		xlInconsistentListFormula = 9,
	}

	enum XlDataLabelSeparator {
		xlDataLabelSeparatorDefault = 1,
	}

	enum XlSmartTagDisplayMode {
		xlIndicatorAndButton = 0,
		xlDisplayNone = 1,
		xlButtonOnly = 2,
	}

	enum XlRangeValueDataType {
		xlRangeValueDefault = 10,
		xlRangeValueXMLSpreadsheet = 11,
		xlRangeValueMSPersistXML = 12,
	}

	enum XlSpeakDirection {
		xlSpeakByRows = 0,
		xlSpeakByColumns = 1,
	}

	enum XlInsertFormatOrigin {
		xlFormatFromLeftOrAbove = 0,
		xlFormatFromRightOrBelow = 1,
	}

	enum XlArabicModes {
		xlArabicNone = 0,
		xlArabicStrictAlefHamza = 1,
		xlArabicStrictFinalYaa = 2,
		xlArabicBothStrict = 3,
	}

	enum XlImportDataAs {
		xlQueryTable = 0,
		xlPivotTableReport = 1,
		xlTable = 2,
	}

	enum XlCalculatedMemberType {
		xlCalculatedMember = 0,
		xlCalculatedSet = 1,
		xlCalculatedMeasure = 2,
	}

	enum XlHebrewModes {
		xlHebrewFullScript = 0,
		xlHebrewPartialScript = 1,
		xlHebrewMixedScript = 2,
		xlHebrewMixedAuthorizedScript = 3,
	}

	enum XlListObjectSourceType {
		xlSrcExternal = 0,
		xlSrcRange = 1,
		xlSrcXml = 2,
		xlSrcQuery = 3,
		xlSrcModel = 4,
	}

	enum XlTextVisualLayoutType {
		xlTextVisualLTR = 1,
		xlTextVisualRTL = 2,
	}

	enum XlListDataType {
		xlListDataTypeNone = 0,
		xlListDataTypeText = 1,
		xlListDataTypeMultiLineText = 2,
		xlListDataTypeNumber = 3,
		xlListDataTypeCurrency = 4,
		xlListDataTypeDateTime = 5,
		xlListDataTypeChoice = 6,
		xlListDataTypeChoiceMulti = 7,
		xlListDataTypeListLookup = 8,
		xlListDataTypeCheckbox = 9,
		xlListDataTypeHyperLink = 10,
		xlListDataTypeCounter = 11,
		xlListDataTypeMultiLineRichText = 12,
	}

	enum XlTotalsCalculation {
		xlTotalsCalculationNone = 0,
		xlTotalsCalculationSum = 1,
		xlTotalsCalculationAverage = 2,
		xlTotalsCalculationCount = 3,
		xlTotalsCalculationCountNums = 4,
		xlTotalsCalculationMin = 5,
		xlTotalsCalculationMax = 6,
		xlTotalsCalculationStdDev = 7,
		xlTotalsCalculationVar = 8,
		xlTotalsCalculationCustom = 9,
	}

	enum XlXmlLoadOption {
		xlXmlLoadPromptUser = 0,
		xlXmlLoadOpenXml = 1,
		xlXmlLoadImportToList = 2,
		xlXmlLoadMapXml = 3,
	}

	enum XlSmartTagControlType {
		xlSmartTagControlSmartTag = 1,
		xlSmartTagControlLink = 2,
		xlSmartTagControlHelp = 3,
		xlSmartTagControlHelpURL = 4,
		xlSmartTagControlSeparator = 5,
		xlSmartTagControlButton = 6,
		xlSmartTagControlLabel = 7,
		xlSmartTagControlImage = 8,
		xlSmartTagControlCheckbox = 9,
		xlSmartTagControlTextbox = 10,
		xlSmartTagControlListbox = 11,
		xlSmartTagControlCombo = 12,
		xlSmartTagControlActiveX = 13,
		xlSmartTagControlRadioGroup = 14,
	}

	enum XlListConflict {
		xlListConflictDialog = 0,
		xlListConflictRetryAllConflicts = 1,
		xlListConflictDiscardAllConflicts = 2,
		xlListConflictError = 3,
	}

	enum XlXmlExportResult {
		xlXmlExportSuccess = 0,
		xlXmlExportValidationFailed = 1,
	}

	enum XlXmlImportResult {
		xlXmlImportSuccess = 0,
		xlXmlImportElementsTruncated = 1,
		xlXmlImportValidationFailed = 2,
	}

	enum XlRemoveDocInfoType {
		xlRDIComments = 1,
		xlRDIRemovePersonalInformation = 4,
		xlRDIEmailHeader = 5,
		xlRDIRoutingSlip = 6,
		xlRDISendForReview = 7,
		xlRDIDocumentProperties = 8,
		xlRDIDocumentWorkspace = 10,
		xlRDIInkAnnotations = 11,
		xlRDIScenarioComments = 12,
		xlRDIPublishInfo = 13,
		xlRDIDocumentServerProperties = 14,
		xlRDIDocumentManagementPolicy = 15,
		xlRDIContentType = 16,
		xlRDIDefinedNameComments = 18,
		xlRDIInactiveDataConnections = 19,
		xlRDIPrinterPath = 20,
		xlRDIInlineWebExtensions = 21,
		xlRDITaskpaneWebExtensions = 22,
		xlRDIExcelDataModel = 23,
		xlRDIAll = 99,
	}

	enum XlRgbColor {
		rgbAliceBlue = 16775408,
		rgbAntiqueWhite = 14150650,
		rgbAqua = 16776960,
		rgbAquamarine = 13959039,
		rgbAzure = 16777200,
		rgbBeige = 14480885,
		rgbBisque = 12903679,
		rgbBlack = 0,
		rgbBlanchedAlmond = 13495295,
		rgbBlue = 16711680,
		rgbBlueViolet = 14822282,
		rgbBrown = 2763429,
		rgbBurlyWood = 8894686,
		rgbCadetBlue = 10526303,
		rgbChartreuse = 65407,
		rgbCoral = 5275647,
		rgbCornflowerBlue = 15570276,
		rgbCornsilk = 14481663,
		rgbCrimson = 3937500,
		rgbDarkBlue = 9109504,
		rgbDarkCyan = 9145088,
		rgbDarkGoldenrod = 755384,
		rgbDarkGreen = 25600,
		rgbDarkGray = 11119017,
		rgbDarkGrey = 11119017,
		rgbDarkKhaki = 7059389,
		rgbDarkMagenta = 9109643,
		rgbDarkOliveGreen = 3107669,
		rgbDarkOrange = 36095,
		rgbDarkOrchid = 13382297,
		rgbDarkRed = 139,
		rgbDarkSalmon = 8034025,
		rgbDarkSeaGreen = 9419919,
		rgbDarkSlateBlue = 9125192,
		rgbDarkSlateGray = 5197615,
		rgbDarkSlateGrey = 5197615,
		rgbDarkTurquoise = 13749760,
		rgbDarkViolet = 13828244,
		rgbDeepPink = 9639167,
		rgbDeepSkyBlue = 16760576,
		rgbDimGray = 6908265,
		rgbDimGrey = 6908265,
		rgbDodgerBlue = 16748574,
		rgbFireBrick = 2237106,
		rgbFloralWhite = 15792895,
		rgbForestGreen = 2263842,
		rgbFuchsia = 16711935,
		rgbGainsboro = 14474460,
		rgbGhostWhite = 16775416,
		rgbGold = 55295,
		rgbGoldenrod = 2139610,
		rgbGray = 8421504,
		rgbGreen = 32768,
		rgbGrey = 8421504,
		rgbGreenYellow = 3145645,
		rgbHoneydew = 15794160,
		rgbHotPink = 11823615,
		rgbIndianRed = 6053069,
		rgbIndigo = 8519755,
		rgbIvory = 15794175,
		rgbKhaki = 9234160,
		rgbLavender = 16443110,
		rgbLavenderBlush = 16118015,
		rgbLawnGreen = 64636,
		rgbLemonChiffon = 13499135,
		rgbLightBlue = 15128749,
		rgbLightCoral = 8421616,
		rgbLightCyan = 9145088,
		rgbLightGoldenrodYellow = 13826810,
		rgbLightGray = 13882323,
		rgbLightGreen = 9498256,
		rgbLightGrey = 13882323,
		rgbLightPink = 12695295,
		rgbLightSalmon = 8036607,
		rgbLightSeaGreen = 11186720,
		rgbLightSkyBlue = 16436871,
		rgbLightSlateGray = 10061943,
		rgbLightSlateGrey = 10061943,
		rgbLightSteelBlue = 14599344,
		rgbLightYellow = 14745599,
		rgbLime = 65280,
		rgbLimeGreen = 3329330,
		rgbLinen = 15134970,
		rgbMaroon = 128,
		rgbMediumAquamarine = 11206502,
		rgbMediumBlue = 13434880,
		rgbMediumOrchid = 13850042,
		rgbMediumPurple = 14381203,
		rgbMediumSeaGreen = 7451452,
		rgbMediumSlateBlue = 15624315,
		rgbMediumSpringGreen = 10156544,
		rgbMediumTurquoise = 13422920,
		rgbMediumVioletRed = 8721863,
		rgbMidnightBlue = 7346457,
		rgbMintCream = 16449525,
		rgbMistyRose = 14804223,
		rgbMoccasin = 11920639,
		rgbNavajoWhite = 11394815,
		rgbNavy = 8388608,
		rgbNavyBlue = 8388608,
		rgbOldLace = 15136253,
		rgbOlive = 32896,
		rgbOliveDrab = 2330219,
		rgbOrange = 42495,
		rgbOrangeRed = 17919,
		rgbOrchid = 14053594,
		rgbPaleGoldenrod = 7071982,
		rgbPaleGreen = 10025880,
		rgbPaleTurquoise = 15658671,
		rgbPaleVioletRed = 9662683,
		rgbPapayaWhip = 14020607,
		rgbPeachPuff = 12180223,
		rgbPeru = 4163021,
		rgbPink = 13353215,
		rgbPlum = 14524637,
		rgbPowderBlue = 15130800,
		rgbPurple = 8388736,
		rgbRed = 255,
		rgbRosyBrown = 9408444,
		rgbRoyalBlue = 14772545,
		rgbSalmon = 7504122,
		rgbSandyBrown = 6333684,
		rgbSeaGreen = 5737262,
		rgbSeashell = 15660543,
		rgbSienna = 2970272,
		rgbSilver = 12632256,
		rgbSkyBlue = 15453831,
		rgbSlateBlue = 13458026,
		rgbSlateGray = 9470064,
		rgbSlateGrey = 9470064,
		rgbSnow = 16448255,
		rgbSpringGreen = 8388352,
		rgbSteelBlue = 11829830,
		rgbTan = 9221330,
		rgbTeal = 8421376,
		rgbThistle = 14204888,
		rgbTomato = 4678655,
		rgbTurquoise = 13688896,
		rgbYellow = 65535,
		rgbYellowGreen = 3329434,
		rgbViolet = 15631086,
		rgbWheat = 11788021,
		rgbWhite = 16777215,
		rgbWhiteSmoke = 16119285,
	}

	enum XlStdColorScale {
		xlColorScaleRYG = 1,
		xlColorScaleGYR = 2,
		xlColorScaleBlackWhite = 3,
		xlColorScaleWhiteBlack = 4,
	}

	enum XlConditionValueTypes {
		xlConditionValueNone = -1,
		xlConditionValueNumber = 0,
		xlConditionValueLowestValue = 1,
		xlConditionValueHighestValue = 2,
		xlConditionValuePercent = 3,
		xlConditionValueFormula = 4,
		xlConditionValuePercentile = 5,
		xlConditionValueAutomaticMin = 6,
		xlConditionValueAutomaticMax = 7,
	}

	enum XlFormatFilterTypes {
		xlFilterBottom = 0,
		xlFilterTop = 1,
		xlFilterBottomPercent = 2,
		xlFilterTopPercent = 3,
	}

	enum XlContainsOperator {
		xlContains = 0,
		xlDoesNotContain = 1,
		xlBeginsWith = 2,
		xlEndsWith = 3,
	}

	enum XlAboveBelow {
		xlAboveAverage = 0,
		xlBelowAverage = 1,
		xlEqualAboveAverage = 2,
		xlEqualBelowAverage = 3,
		xlAboveStdDev = 4,
		xlBelowStdDev = 5,
	}

	enum XlLookFor {
		xlLookForBlanks = 0,
		xlLookForErrors = 1,
		xlLookForFormulas = 2,
	}

	enum XlTimePeriods {
		xlToday = 0,
		xlYesterday = 1,
		xlLast7Days = 2,
		xlThisWeek = 3,
		xlLastWeek = 4,
		xlLastMonth = 5,
		xlTomorrow = 6,
		xlNextWeek = 7,
		xlNextMonth = 8,
		xlThisMonth = 9,
	}

	enum XlDupeUnique {
		xlUnique = 0,
		xlDuplicate = 1,
	}

	enum XlTopBottom {
		xlTop10Top = 1,
		xlTop10Bottom = 0,
	}

	enum XlIconSet {
		xlCustomSet = -1,
		xl3Arrows = 1,
		xl3ArrowsGray = 2,
		xl3Flags = 3,
		xl3TrafficLights1 = 4,
		xl3TrafficLights2 = 5,
		xl3Signs = 6,
		xl3Symbols = 7,
		xl3Symbols2 = 8,
		xl4Arrows = 9,
		xl4ArrowsGray = 10,
		xl4RedToBlack = 11,
		xl4CRV = 12,
		xl4TrafficLights = 13,
		xl5Arrows = 14,
		xl5ArrowsGray = 15,
		xl5CRV = 16,
		xl5Quarters = 17,
		xl3Stars = 18,
		xl3Triangles = 19,
		xl5Boxes = 20,
	}

	enum XlThemeFont {
		xlThemeFontNone = 0,
		xlThemeFontMajor = 1,
		xlThemeFontMinor = 2,
	}

	enum XlPivotLineType {
		xlPivotLineRegular = 0,
		xlPivotLineSubtotal = 1,
		xlPivotLineGrandTotal = 2,
		xlPivotLineBlank = 3,
	}

	enum XlCheckInVersionType {
		xlCheckInMinorVersion = 0,
		xlCheckInMajorVersion = 1,
		xlCheckInOverwriteVersion = 2,
	}

	enum XlPropertyDisplayedIn {
		xlDisplayPropertyInPivotTable = 1,
		xlDisplayPropertyInTooltip = 2,
		xlDisplayPropertyInPivotTableAndTooltip = 3,
	}

	enum XlConnectionType {
		xlConnectionTypeOLEDB = 1,
		xlConnectionTypeODBC = 2,
		xlConnectionTypeXMLMAP = 3,
		xlConnectionTypeTEXT = 4,
		xlConnectionTypeWEB = 5,
		xlConnectionTypeDATAFEED = 6,
		xlConnectionTypeMODEL = 7,
		xlConnectionTypeWORKSHEET = 8,
		xlConnectionTypeNOSOURCE = 9,
	}

	enum XlActionType {
		xlActionTypeUrl = 1,
		xlActionTypeRowset = 16,
		xlActionTypeReport = 128,
		xlActionTypeDrillthrough = 256,
	}

	enum XlLayoutRowType {
		xlCompactRow = 0,
		xlTabularRow = 1,
		xlOutlineRow = 2,
	}

	enum XlMeasurementUnits {
		xlInches = 0,
		xlCentimeters = 1,
		xlMillimeters = 2,
	}

	enum XlPivotFilterType {
		xlTopCount = 1,
		xlBottomCount = 2,
		xlTopPercent = 3,
		xlBottomPercent = 4,
		xlTopSum = 5,
		xlBottomSum = 6,
		xlValueEquals = 7,
		xlValueDoesNotEqual = 8,
		xlValueIsGreaterThan = 9,
		xlValueIsGreaterThanOrEqualTo = 10,
		xlValueIsLessThan = 11,
		xlValueIsLessThanOrEqualTo = 12,
		xlValueIsBetween = 13,
		xlValueIsNotBetween = 14,
		xlCaptionEquals = 15,
		xlCaptionDoesNotEqual = 16,
		xlCaptionBeginsWith = 17,
		xlCaptionDoesNotBeginWith = 18,
		xlCaptionEndsWith = 19,
		xlCaptionDoesNotEndWith = 20,
		xlCaptionContains = 21,
		xlCaptionDoesNotContain = 22,
		xlCaptionIsGreaterThan = 23,
		xlCaptionIsGreaterThanOrEqualTo = 24,
		xlCaptionIsLessThan = 25,
		xlCaptionIsLessThanOrEqualTo = 26,
		xlCaptionIsBetween = 27,
		xlCaptionIsNotBetween = 28,
		xlSpecificDate = 29,
		xlNotSpecificDate = 30,
		xlBefore = 31,
		xlBeforeOrEqualTo = 32,
		xlAfter = 33,
		xlAfterOrEqualTo = 34,
		xlDateBetween = 35,
		xlDateNotBetween = 36,
		xlDateTomorrow = 37,
		xlDateToday = 38,
		xlDateYesterday = 39,
		xlDateNextWeek = 40,
		xlDateThisWeek = 41,
		xlDateLastWeek = 42,
		xlDateNextMonth = 43,
		xlDateThisMonth = 44,
		xlDateLastMonth = 45,
		xlDateNextQuarter = 46,
		xlDateThisQuarter = 47,
		xlDateLastQuarter = 48,
		xlDateNextYear = 49,
		xlDateThisYear = 50,
		xlDateLastYear = 51,
		xlYearToDate = 52,
		xlAllDatesInPeriodQuarter1 = 53,
		xlAllDatesInPeriodQuarter2 = 54,
		xlAllDatesInPeriodQuarter3 = 55,
		xlAllDatesInPeriodQuarter4 = 56,
		xlAllDatesInPeriodJanuary = 57,
		xlAllDatesInPeriodFebruary = 58,
		xlAllDatesInPeriodMarch = 59,
		xlAllDatesInPeriodApril = 60,
		xlAllDatesInPeriodMay = 61,
		xlAllDatesInPeriodJune = 62,
		xlAllDatesInPeriodJuly = 63,
		xlAllDatesInPeriodAugust = 64,
		xlAllDatesInPeriodSeptember = 65,
		xlAllDatesInPeriodOctober = 66,
		xlAllDatesInPeriodNovember = 67,
		xlAllDatesInPeriodDecember = 68,
	}

	enum XlCredentialsMethod {
		xlCredentialsMethodIntegrated = 0,
		xlCredentialsMethodNone = 1,
		xlCredentialsMethodStored = 2,
	}

	enum XlCubeFieldSubType {
		xlCubeHierarchy = 1,
		xlCubeMeasure = 2,
		xlCubeSet = 3,
		xlCubeAttribute = 4,
		xlCubeCalculatedMeasure = 5,
		xlCubeKPIValue = 6,
		xlCubeKPIGoal = 7,
		xlCubeKPIStatus = 8,
		xlCubeKPITrend = 9,
		xlCubeKPIWeight = 10,
		xlCubeImplicitMeasure = 11,
	}

	enum XlSortOn {
		xlSortOnValues = 0,
		xlSortOnCellColor = 1,
		xlSortOnFontColor = 2,
		xlSortOnIcon = 3,
	}

	enum XlDynamicFilterCriteria {
		xlFilterToday = 1,
		xlFilterYesterday = 2,
		xlFilterTomorrow = 3,
		xlFilterThisWeek = 4,
		xlFilterLastWeek = 5,
		xlFilterNextWeek = 6,
		xlFilterThisMonth = 7,
		xlFilterLastMonth = 8,
		xlFilterNextMonth = 9,
		xlFilterThisQuarter = 10,
		xlFilterLastQuarter = 11,
		xlFilterNextQuarter = 12,
		xlFilterThisYear = 13,
		xlFilterLastYear = 14,
		xlFilterNextYear = 15,
		xlFilterYearToDate = 16,
		xlFilterAllDatesInPeriodQuarter1 = 17,
		xlFilterAllDatesInPeriodQuarter2 = 18,
		xlFilterAllDatesInPeriodQuarter3 = 19,
		xlFilterAllDatesInPeriodQuarter4 = 20,
		xlFilterAllDatesInPeriodJanuary = 21,
		xlFilterAllDatesInPeriodFebruray = 22,
		xlFilterAllDatesInPeriodMarch = 23,
		xlFilterAllDatesInPeriodApril = 24,
		xlFilterAllDatesInPeriodMay = 25,
		xlFilterAllDatesInPeriodJune = 26,
		xlFilterAllDatesInPeriodJuly = 27,
		xlFilterAllDatesInPeriodAugust = 28,
		xlFilterAllDatesInPeriodSeptember = 29,
		xlFilterAllDatesInPeriodOctober = 30,
		xlFilterAllDatesInPeriodNovember = 31,
		xlFilterAllDatesInPeriodDecember = 32,
		xlFilterAboveAverage = 33,
		xlFilterBelowAverage = 34,
	}

	enum XlFilterAllDatesInPeriod {
		xlFilterAllDatesInPeriodYear = 0,
		xlFilterAllDatesInPeriodMonth = 1,
		xlFilterAllDatesInPeriodDay = 2,
		xlFilterAllDatesInPeriodHour = 3,
		xlFilterAllDatesInPeriodMinute = 4,
		xlFilterAllDatesInPeriodSecond = 5,
	}

	enum XlTableStyleElementType {
		xlWholeTable = 0,
		xlHeaderRow = 1,
		xlTotalRow = 2,
		xlGrandTotalRow = 2,
		xlFirstColumn = 3,
		xlLastColumn = 4,
		xlGrandTotalColumn = 4,
		xlRowStripe1 = 5,
		xlRowStripe2 = 6,
		xlColumnStripe1 = 7,
		xlColumnStripe2 = 8,
		xlFirstHeaderCell = 9,
		xlLastHeaderCell = 10,
		xlFirstTotalCell = 11,
		xlLastTotalCell = 12,
		xlSubtotalColumn1 = 13,
		xlSubtotalColumn2 = 14,
		xlSubtotalColumn3 = 15,
		xlSubtotalRow1 = 16,
		xlSubtotalRow2 = 17,
		xlSubtotalRow3 = 18,
		xlBlankRow = 19,
		xlColumnSubheading1 = 20,
		xlColumnSubheading2 = 21,
		xlColumnSubheading3 = 22,
		xlRowSubheading1 = 23,
		xlRowSubheading2 = 24,
		xlRowSubheading3 = 25,
		xlPageFieldLabels = 26,
		xlPageFieldValues = 27,
		xlSlicerUnselectedItemWithData = 28,
		xlSlicerUnselectedItemWithNoData = 29,
		xlSlicerSelectedItemWithData = 30,
		xlSlicerSelectedItemWithNoData = 31,
		xlSlicerHoveredUnselectedItemWithData = 32,
		xlSlicerHoveredSelectedItemWithData = 33,
		xlSlicerHoveredUnselectedItemWithNoData = 34,
		xlSlicerHoveredSelectedItemWithNoData = 35,
		xlTimelineSelectionLabel = 36,
		xlTimelineTimeLevel = 37,
		xlTimelinePeriodLabels1 = 38,
		xlTimelinePeriodLabels2 = 39,
		xlTimelineSelectedTimeBlock = 40,
		xlTimelineUnselectedTimeBlock = 41,
		xlTimelineSelectedTimeBlockSpace = 42,
	}

	enum XlPivotConditionScope {
		xlSelectionScope = 0,
		xlFieldsScope = 1,
		xlDataFieldScope = 2,
	}

	enum XlCalcFor {
		xlAllValues = 0,
		xlRowGroups = 1,
		xlColGroups = 2,
	}

	enum XlThemeColor {
		xlThemeColorDark1 = 1,
		xlThemeColorLight1 = 2,
		xlThemeColorDark2 = 3,
		xlThemeColorLight2 = 4,
		xlThemeColorAccent1 = 5,
		xlThemeColorAccent2 = 6,
		xlThemeColorAccent3 = 7,
		xlThemeColorAccent4 = 8,
		xlThemeColorAccent5 = 9,
		xlThemeColorAccent6 = 10,
		xlThemeColorHyperlink = 11,
		xlThemeColorFollowedHyperlink = 12,
	}

	enum XlFixedFormatType {
		xlTypePDF = 0,
		xlTypeXPS = 1,
	}

	enum XlFixedFormatQuality {
		xlQualityStandard = 0,
		xlQualityMinimum = 1,
	}

	enum XlGenerateTableRefs {
		xlGenerateTableRefA1 = 0,
		xlGenerateTableRefStruct = 1,
	}

	enum XlGradientFillType {
		xlGradientFillLinear = 0,
		xlGradientFillPath = 1,
	}

	enum XlThreadMode {
		xlThreadModeAutomatic = 0,
		xlThreadModeManual = 1,
	}

	enum XlOartHorizontalOverflow {
		xlOartHorizontalOverflowOverflow = 0,
		xlOartHorizontalOverflowClip = 1,
	}

	enum XlOartVerticalOverflow {
		xlOartVerticalOverflowOverflow = 0,
		xlOartVerticalOverflowClip = 1,
		xlOartVerticalOverflowEllipsis = 2,
	}

	enum XlSparkScale {
		xlSparkScaleGroup = 1,
		xlSparkScaleSingle = 2,
		xlSparkScaleCustom = 3,
	}

	enum XlSparkType {
		xlSparkLine = 1,
		xlSparkColumn = 2,
		xlSparkColumnStacked100 = 3,
	}

	enum XlSparklineRowCol {
		xlSparklineNonSquare = 0,
		xlSparklineRowsSquare = 1,
		xlSparklineColumnsSquare = 2,
	}

	enum XlDataBarFillType {
		xlDataBarFillSolid = 0,
		xlDataBarFillGradient = 1,
	}

	enum XlDataBarBorderType {
		xlDataBarBorderNone = 0,
		xlDataBarBorderSolid = 1,
	}

	enum XlDataBarAxisPosition {
		xlDataBarAxisAutomatic = 0,
		xlDataBarAxisMidpoint = 1,
		xlDataBarAxisNone = 2,
	}

	enum XlDataBarNegativeColorType {
		xlDataBarColor = 0,
		xlDataBarSameAsPositive = 1,
	}

	enum XlAllocation {
		xlManualAllocation = 1,
		xlAutomaticAllocation = 2,
	}

	enum XlAllocationValue {
		xlAllocateValue = 1,
		xlAllocateIncrement = 2,
	}

	enum XlAllocationMethod {
		xlEqualAllocation = 1,
		xlWeightedAllocation = 2,
	}

	enum XlCellChangedState {
		xlCellNotChanged = 1,
		xlCellChanged = 2,
		xlCellChangeApplied = 3,
	}

	enum XlPivotFieldRepeatLabels {
		xlDoNotRepeatLabels = 1,
		xlRepeatLabels = 2,
	}

	enum XlSpanishModes {
		xlSpanishTuteoOnly = 0,
		xlSpanishTuteoAndVoseo = 1,
		xlSpanishVoseoOnly = 2,
	}

	enum XlSlicerCrossFilterType {
		xlSlicerNoCrossFilter = 1,
		xlSlicerCrossFilterShowItemsWithDataAtTop = 2,
		xlSlicerCrossFilterShowItemsWithNoData = 3,
		xlSlicerCrossFilterHideButtonsWithNoData = 4,
	}

	enum XlSlicerSort {
		xlSlicerSortDataSourceOrder = 1,
		xlSlicerSortAscending = 2,
		xlSlicerSortDescending = 3,
	}

	enum XlIcon {
		xlIconNoCellIcon = -1,
		xlIconGreenUpArrow = 1,
		xlIconYellowSideArrow = 2,
		xlIconRedDownArrow = 3,
		xlIconGrayUpArrow = 4,
		xlIconGraySideArrow = 5,
		xlIconGrayDownArrow = 6,
		xlIconGreenFlag = 7,
		xlIconYellowFlag = 8,
		xlIconRedFlag = 9,
		xlIconGreenCircle = 10,
		xlIconYellowCircle = 11,
		xlIconRedCircleWithBorder = 12,
		xlIconBlackCircleWithBorder = 13,
		xlIconGreenTrafficLight = 14,
		xlIconYellowTrafficLight = 15,
		xlIconRedTrafficLight = 16,
		xlIconYellowTriangle = 17,
		xlIconRedDiamond = 18,
		xlIconGreenCheckSymbol = 19,
		xlIconYellowExclamationSymbol = 20,
		xlIconRedCrossSymbol = 21,
		xlIconGreenCheck = 22,
		xlIconYellowExclamation = 23,
		xlIconRedCross = 24,
		xlIconYellowUpInclineArrow = 25,
		xlIconYellowDownInclineArrow = 26,
		xlIconGrayUpInclineArrow = 27,
		xlIconGrayDownInclineArrow = 28,
		xlIconRedCircle = 29,
		xlIconPinkCircle = 30,
		xlIconGrayCircle = 31,
		xlIconBlackCircle = 32,
		xlIconCircleWithOneWhiteQuarter = 33,
		xlIconCircleWithTwoWhiteQuarters = 34,
		xlIconCircleWithThreeWhiteQuarters = 35,
		xlIconWhiteCircleAllWhiteQuarters = 36,
		xlIcon0Bars = 37,
		xlIcon1Bar = 38,
		xlIcon2Bars = 39,
		xlIcon3Bars = 40,
		xlIcon4Bars = 41,
		xlIconGoldStar = 42,
		xlIconHalfGoldStar = 43,
		xlIconSilverStar = 44,
		xlIconGreenUpTriangle = 45,
		xlIconYellowDash = 46,
		xlIconRedDownTriangle = 47,
		xlIcon4FilledBoxes = 48,
		xlIcon3FilledBoxes = 49,
		xlIcon2FilledBoxes = 50,
		xlIcon1FilledBox = 51,
		xlIcon0FilledBoxes = 52,
	}

	enum XlProtectedViewCloseReason {
		xlProtectedViewCloseNormal = 0,
		xlProtectedViewCloseEdit = 1,
		xlProtectedViewCloseForced = 2,
	}

	enum XlProtectedViewWindowState {
		xlProtectedViewWindowNormal = 0,
		xlProtectedViewWindowMinimized = 1,
		xlProtectedViewWindowMaximized = 2,
	}

	enum XlFileValidationPivotMode {
		xlFileValidationPivotDefault = 0,
		xlFileValidationPivotRun = 1,
		xlFileValidationPivotSkip = 2,
	}

	enum XlPortugueseReform {
		xlPortuguesePreReform = 1,
		xlPortuguesePostReform = 2,
		xlPortugueseBoth = 3,
	}

	enum XlQuickAnalysisMode {
		xlLensOnly = 0,
		xlFormatConditions = 1,
		xlRecommendedCharts = 2,
		xlTotals = 3,
		xlTables = 4,
		xlSparklines = 5,
	}

	enum XlSlicerCacheType {
		xlSlicer = 1,
		xlTimeline = 2,
	}

	enum XlCalcMemNumberFormatType {
		xlNumberFormatTypeDefault = 0,
		xlNumberFormatTypeNumber = 1,
		xlNumberFormatTypePercent = 2,
	}

	enum XlTimelineLevel {
		xlTimelineLevelYears = 0,
		xlTimelineLevelQuarters = 1,
		xlTimelineLevelMonths = 2,
		xlTimelineLevelDays = 3,
	}

	enum XlFilterStatus {
		xlFilterStatusOK = 0,
		xlFilterStatusDateWrongOrder = 1,
		xlFilterStatusDateHasTime = 2,
		xlFilterStatusInvalidDate = 3,
	}

	enum XlModelChangeSource {
		xlChangeByExcel = 0,
		xlChangeByPowerPivotAddIn = 1,
	}
}
