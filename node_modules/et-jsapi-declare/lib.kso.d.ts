declare namespace Kso {

	interface Accessible {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

	}

	interface MsoDispObj {
		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoOleAccDispObj {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

	}

	interface CommandBars {
		readonly Application: any;

		readonly Creator: number;

		readonly ActionControl: CommandBarControl;

		readonly ActiveMenuBar: CommandBar;

		Add(Name?: any, Position?: any, MenuBar?: any, Temporary?: any): CommandBar;

		readonly Count: number;

		DisplayTooltips: boolean;

		DisplayKeysInTooltips: boolean;

		FindControl(Type?: any, Id?: any, Tag?: any, Visible?: any): CommandBarControl;

		Item(Index: any): CommandBar;

		LargeButtons: boolean;

		MenuAnimationStyle: MsoMenuAnimation;

		readonly Parent: any;

		ReleaseFocus(): void;

		AdaptiveMenus: boolean;

		FindControls(Type?: any, Id?: any, Tag?: any, Visible?: any): CommandBarControls;

		AddEx(TbidOrName?: any, Position?: any, MenuBar?: any, Temporary?: any, TbtrProtection?: any): CommandBar;

		DisplayFonts: boolean;

		DisableCustomize: boolean;

		DisableAskAQuestionDropdown: boolean;

		ExecuteMso(idMso: string): void;

		GetEnabledMso(idMso: string): boolean;

		GetVisibleMso(idMso: string): boolean;

		GetPressedMso(idMso: string): boolean;

		GetLabelMso(idMso: string): string;

		GetScreentipMso(idMso: string): string;

		GetSupertipMso(idMso: string): string;

		GetImageMso(idMso: string, Width: number, Height: number): any;

		CommitRenderingTransaction(hwnd: number): void;

		SetEnabledMso(idMso: string, Enabled: boolean): void;

		SetVisibleMso(idMso: string, Visible: boolean): void;

		ExecuteMsoEx(idMso: string, prop: any): void;

	}

	interface CommandBarControl {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		BeginGroup: boolean;

		readonly BuiltIn: boolean;

		Caption: string;

		readonly Control: any;

		Copy(Bar?: any, Before?: any): CommandBarControl;

		Delete(Temporary?: any): void;

		DescriptionText: string;

		Enabled: boolean;

		Execute(): void;

		Height: number;

		HelpContextId: number;

		HelpFile: string;

		readonly Id: number;

		readonly Index: number;

		readonly InstanceId: number;

		Move(Bar?: any, Before?: any): CommandBarControl;

		readonly Left: number;

		OLEUsage: MsoControlOLEUsage;

		OnAction: string;

		readonly Parent: CommandBar;

		Parameter: string;

		Priority: number;

		Reset(): void;

		SetFocus(): void;

		Tag: string;

		TooltipText: string;

		readonly Top: number;

		readonly Type: MsoControlType;

		Visible: boolean;

		Width: number;

		readonly IsPriorityDropped: boolean;

		Reserved1(): void;

		Reserved2(): void;

		Reserved3(): void;

		Reserved4(): void;

		Reserved5(): void;

		Reserved6(): void;

		Reserved7(): void;

	}

	interface CommandBar {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		readonly BuiltIn: boolean;

		Context: string;

		readonly Controls: CommandBarControls;

		Delete(): void;

		Enabled: boolean;

		FindControl(Type?: any, Id?: any, Tag?: any, Visible?: any, Recursive?: any): CommandBarControl;

		Height: number;

		readonly Index: number;

		readonly InstanceId: number;

		Left: number;

		Name: string;

		NameLocal: string;

		readonly Parent: any;

		Position: MsoBarPosition;

		RowIndex: number;

		Protection: MsoBarProtection;

		Reset(): void;

		ShowPopup(x?: any, y?: any): void;

		Top: number;

		readonly Type: MsoBarType;

		Visible: boolean;

		Width: number;

		AdaptiveMenu: boolean;

		readonly Id: number;

		readonly InstanceIdPtr: any;

	}

	interface CommandBarControls {
		readonly Application: any;

		readonly Creator: number;

		Add(Type?: any, Id?: any, Parameter?: any, Before?: any, Temporary?: any): CommandBarControl;

		readonly Count: number;

		Item(Index: any): CommandBarControl;

		readonly Parent: CommandBar;

	}

	interface CommandBarButton {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		BeginGroup: boolean;

		readonly BuiltIn: boolean;

		Caption: string;

		readonly Control: any;

		Copy(Bar?: any, Before?: any): CommandBarControl;

		Delete(Temporary?: any): void;

		DescriptionText: string;

		Enabled: boolean;

		Execute(): void;

		Height: number;

		HelpContextId: number;

		HelpFile: string;

		readonly Id: number;

		readonly Index: number;

		readonly InstanceId: number;

		Move(Bar?: any, Before?: any): CommandBarControl;

		readonly Left: number;

		OLEUsage: MsoControlOLEUsage;

		OnAction: string;

		readonly Parent: CommandBar;

		Parameter: string;

		Priority: number;

		Reset(): void;

		SetFocus(): void;

		Tag: string;

		TooltipText: string;

		readonly Top: number;

		readonly Type: MsoControlType;

		Visible: boolean;

		Width: number;

		readonly IsPriorityDropped: boolean;

		Reserved1(): void;

		Reserved2(): void;

		Reserved3(): void;

		Reserved4(): void;

		Reserved5(): void;

		Reserved6(): void;

		Reserved7(): void;

		BuiltInFace: boolean;

		CopyFace(): void;

		FaceId: number;

		PasteFace(): void;

		ShortcutText: string;

		State: MsoButtonState;

		Style: MsoButtonStyle;

		HyperlinkType: MsoCommandBarButtonHyperlinkType;

		Picture: any;

		Mask: any;

		readonly InstanceIdPtr: any;

	}

	interface CommandBarPopup {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		BeginGroup: boolean;

		readonly BuiltIn: boolean;

		Caption: string;

		readonly Control: any;

		Copy(Bar?: any, Before?: any): CommandBarControl;

		Delete(Temporary?: any): void;

		DescriptionText: string;

		Enabled: boolean;

		Execute(): void;

		Height: number;

		HelpContextId: number;

		HelpFile: string;

		readonly Id: number;

		readonly Index: number;

		readonly InstanceId: number;

		Move(Bar?: any, Before?: any): CommandBarControl;

		readonly Left: number;

		OLEUsage: MsoControlOLEUsage;

		OnAction: string;

		readonly Parent: CommandBar;

		Parameter: string;

		Priority: number;

		Reset(): void;

		SetFocus(): void;

		Tag: string;

		TooltipText: string;

		readonly Top: number;

		readonly Type: MsoControlType;

		Visible: boolean;

		Width: number;

		readonly IsPriorityDropped: boolean;

		Reserved1(): void;

		Reserved2(): void;

		Reserved3(): void;

		Reserved4(): void;

		Reserved5(): void;

		Reserved6(): void;

		Reserved7(): void;

		readonly CommandBar: CommandBar;

		readonly Controls: CommandBarControls;

		OLEMenuGroup: MsoOLEMenuGroup;

		readonly InstanceIdPtr: any;

	}

	interface CommandBarComboBox {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		BeginGroup: boolean;

		readonly BuiltIn: boolean;

		Caption: string;

		readonly Control: any;

		Copy(Bar?: any, Before?: any): CommandBarControl;

		Delete(Temporary?: any): void;

		DescriptionText: string;

		Enabled: boolean;

		Execute(): void;

		Height: number;

		HelpContextId: number;

		HelpFile: string;

		readonly Id: number;

		readonly Index: number;

		readonly InstanceId: number;

		Move(Bar?: any, Before?: any): CommandBarControl;

		readonly Left: number;

		OLEUsage: MsoControlOLEUsage;

		OnAction: string;

		readonly Parent: CommandBar;

		Parameter: string;

		Priority: number;

		Reset(): void;

		SetFocus(): void;

		Tag: string;

		TooltipText: string;

		readonly Top: number;

		readonly Type: MsoControlType;

		Visible: boolean;

		Width: number;

		readonly IsPriorityDropped: boolean;

		Reserved1(): void;

		Reserved2(): void;

		Reserved3(): void;

		Reserved4(): void;

		Reserved5(): void;

		Reserved6(): void;

		Reserved7(): void;

		AddItem(Text: string, Index?: any): void;

		Clear(): void;

		DropDownLines: number;

		DropDownWidth: number;

		List(Index: number, pbstrItem: string): void;

		List(Index: number): string;

		readonly ListCount: number;

		ListHeaderCount: number;

		ListIndex: number;

		RemoveItem(Index: number): void;

		Style: MsoComboStyle;

		Text: string;

		readonly InstanceIdPtr: any;

	}

	interface CommandBarActiveX {
		readonly accParent: any;

		readonly accChildCount: number;

		accChild(varChild: any): any;

		accName(varChild?: any, pszName?: string): void;

		accName(varChild?: any): string;

		accValue(varChild?: any, pszValue?: string): void;

		accValue(varChild?: any): string;

		accDescription(varChild?: any): string;

		accRole(varChild?: any): any;

		accState(varChild?: any): any;

		accHelp(varChild?: any): string;

		accKeyboardShortcut(varChild?: any): string;

		readonly accFocus: any;

		readonly accSelection: any;

		accDefaultAction(varChild?: any): string;

		accSelect(flagsSelect: number, varChild?: any): void;

		accLocation(varChild?: any): {pxLeft: number, pyTop: number, pcxWidth: number, pcyHeight: number};

		accNavigate(navDir: number, varStart?: any): any;

		accHitTest(xLeft: number, yTop: number): any;

		accDoDefaultAction(varChild?: any): void;

		readonly Application: any;

		readonly Creator: number;

		BeginGroup: boolean;

		readonly BuiltIn: boolean;

		Caption: string;

		readonly Control: any;

		Copy(Bar?: any, Before?: any): CommandBarControl;

		Delete(Temporary?: any): void;

		DescriptionText: string;

		Enabled: boolean;

		Execute(): void;

		Height: number;

		HelpContextId: number;

		HelpFile: string;

		readonly Id: number;

		readonly Index: number;

		readonly InstanceId: number;

		Move(Bar?: any, Before?: any): CommandBarControl;

		readonly Left: number;

		OLEUsage: MsoControlOLEUsage;

		OnAction: string;

		readonly Parent: CommandBar;

		Parameter: string;

		Priority: number;

		Reset(): void;

		SetFocus(): void;

		Tag: string;

		TooltipText: string;

		readonly Top: number;

		readonly Type: MsoControlType;

		Visible: boolean;

		Width: number;

		readonly IsPriorityDropped: boolean;

		Reserved1(): void;

		Reserved2(): void;

		Reserved3(): void;

		Reserved4(): void;

		Reserved5(): void;

		Reserved6(): void;

		Reserved7(): void;

		ControlCLSID: string;

		QueryControlInterface(bstrIid: string): any;

		SetInnerObjectFactory(pUnk: any): void;

		EnsureControl(): void;

		set InitWith(arg1: any);

		readonly InstanceIdPtr: any;

	}

	interface Adjustments {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number, Val: number): void;

		Item(Index: number): number;

	}

	interface CalloutFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		AutomaticLength(): void;

		CustomDrop(Drop: number): void;

		CustomLength(Length: number): void;

		PresetDrop(DropType: MsoCalloutDropType): void;

		Accent: MsoTriState;

		Angle: MsoCalloutAngleType;

		AutoAttach: MsoTriState;

		readonly AutoLength: MsoTriState;

		Border: MsoTriState;

		readonly Drop: number;

		readonly DropType: MsoCalloutDropType;

		Gap: number;

		readonly Length: number;

		Type: MsoCalloutType;

	}

	interface ColorFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		RGB: number;

		SchemeColor: number;

		readonly Type: MsoColorType;

		TintAndShade: number;

		ObjectThemeColor: MsoThemeColorIndex;

		Brightness: number;

	}

	interface ConnectorFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		BeginConnect(ConnectedShape: Shape, ConnectionSite: number): void;

		BeginDisconnect(): void;

		EndConnect(ConnectedShape: Shape, ConnectionSite: number): void;

		EndDisconnect(): void;

		readonly BeginConnected: MsoTriState;

		readonly BeginConnectedShape: Shape;

		readonly BeginConnectionSite: number;

		readonly EndConnected: MsoTriState;

		readonly EndConnectedShape: Shape;

		readonly EndConnectionSite: number;

		Type: MsoConnectorType;

	}

	interface Shape {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Apply(): void;

		Delete(): void;

		Duplicate(): Shape;

		Flip(FlipCmd: MsoFlipCmd): void;

		IncrementLeft(Increment: number): void;

		IncrementRotation(Increment: number): void;

		IncrementTop(Increment: number): void;

		PickUp(): void;

		RerouteConnections(): void;

		/**
		 * @param fScale 默认值为 0
		 */
		ScaleHeight(Factor: number, RelativeToOriginalSize: MsoTriState, fScale?: MsoScaleFrom): void;

		/**
		 * @param fScale 默认值为 0
		 */
		ScaleWidth(Factor: number, RelativeToOriginalSize: MsoTriState, fScale?: MsoScaleFrom): void;

		Select(Replace?: any): void;

		SetShapesDefaultProperties(): void;

		Ungroup(): ShapeRange;

		ZOrder(ZOrderCmd: MsoZOrderCmd): void;

		readonly Adjustments: Adjustments;

		AutoShapeType: MsoAutoShapeType;

		BlackWhiteMode: MsoBlackWhiteMode;

		readonly Callout: CalloutFormat;

		readonly ConnectionSiteCount: number;

		readonly Connector: MsoTriState;

		readonly ConnectorFormat: ConnectorFormat;

		readonly Fill: FillFormat;

		readonly GroupItems: GroupShapes;

		Height: number;

		readonly HorizontalFlip: MsoTriState;

		Left: number;

		readonly Line: LineFormat;

		LockAspectRatio: MsoTriState;

		Name: string;

		readonly Nodes: ShapeNodes;

		Rotation: number;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly TextEffect: TextEffectFormat;

		readonly TextFrame: TextFrame;

		readonly ThreeD: ThreeDFormat;

		Top: number;

		readonly Type: MsoShapeType;

		readonly VerticalFlip: MsoTriState;

		readonly Vertices: any;

		Visible: MsoTriState;

		Width: number;

		readonly ZOrderPosition: number;

		readonly Script: Script;

		AlternativeText: string;

		readonly HasDiagram: MsoTriState;

		readonly Diagram: MsoDiagram;

		readonly HasDiagramNode: MsoTriState;

		readonly DiagramNode: DiagramNode;

		readonly Child: MsoTriState;

		readonly ParentGroup: Shape;

		readonly CanvasItems: CanvasShapes;

		readonly Id: number;

		CanvasCropLeft(Increment: number): void;

		CanvasCropTop(Increment: number): void;

		CanvasCropRight(Increment: number): void;

		CanvasCropBottom(Increment: number): void;

		set RTF(arg1: string);

		readonly TextFrame2: TextFrame2;

		Cut(): void;

		Copy(): void;

		readonly HasChart: MsoTriState;

		readonly Chart: MsoChart;

		ShapeStyle: MsoShapeStyleIndex;

		BackgroundStyle: MsoBackgroundStyleIndex;

		readonly SoftEdge: SoftEdgeFormat;

		readonly Glow: GlowFormat;

		readonly Reflection: ReflectionFormat;

		readonly HasSmartArt: MsoTriState;

		readonly SmartArt: SmartArt;

		ConvertTextToSmartArt(Layout: SmartArtLayout): void;

		Title: string;

	}

	interface ShapeRange {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		Align(AlignCmd: MsoAlignCmd, RelativeTo: MsoTriState): void;

		Apply(): void;

		Delete(): void;

		Distribute(DistributeCmd: MsoDistributeCmd, RelativeTo: MsoTriState): void;

		Duplicate(): ShapeRange;

		Flip(FlipCmd: MsoFlipCmd): void;

		IncrementLeft(Increment: number): void;

		IncrementRotation(Increment: number): void;

		IncrementTop(Increment: number): void;

		Group(): Shape;

		PickUp(): void;

		Regroup(): Shape;

		RerouteConnections(): void;

		/**
		 * @param fScale 默认值为 0
		 */
		ScaleHeight(Factor: number, RelativeToOriginalSize: MsoTriState, fScale?: MsoScaleFrom): void;

		/**
		 * @param fScale 默认值为 0
		 */
		ScaleWidth(Factor: number, RelativeToOriginalSize: MsoTriState, fScale?: MsoScaleFrom): void;

		Select(Replace?: any): void;

		SetShapesDefaultProperties(): void;

		Ungroup(): ShapeRange;

		ZOrder(ZOrderCmd: MsoZOrderCmd): void;

		readonly Adjustments: Adjustments;

		AutoShapeType: MsoAutoShapeType;

		BlackWhiteMode: MsoBlackWhiteMode;

		readonly Callout: CalloutFormat;

		readonly ConnectionSiteCount: number;

		readonly Connector: MsoTriState;

		readonly ConnectorFormat: ConnectorFormat;

		readonly Fill: FillFormat;

		readonly GroupItems: GroupShapes;

		Height: number;

		readonly HorizontalFlip: MsoTriState;

		Left: number;

		readonly Line: LineFormat;

		LockAspectRatio: MsoTriState;

		Name: string;

		readonly Nodes: ShapeNodes;

		Rotation: number;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly TextEffect: TextEffectFormat;

		readonly TextFrame: TextFrame;

		readonly ThreeD: ThreeDFormat;

		Top: number;

		readonly Type: MsoShapeType;

		readonly VerticalFlip: MsoTriState;

		readonly Vertices: any;

		Visible: MsoTriState;

		Width: number;

		readonly ZOrderPosition: number;

		readonly Script: Script;

		AlternativeText: string;

		readonly HasDiagram: MsoTriState;

		readonly Diagram: MsoDiagram;

		readonly HasDiagramNode: MsoTriState;

		readonly DiagramNode: DiagramNode;

		readonly Child: MsoTriState;

		readonly ParentGroup: Shape;

		readonly CanvasItems: CanvasShapes;

		readonly Id: number;

		CanvasCropLeft(Increment: number): void;

		CanvasCropTop(Increment: number): void;

		CanvasCropRight(Increment: number): void;

		CanvasCropBottom(Increment: number): void;

		set RTF(arg1: string);

		readonly TextFrame2: TextFrame2;

		Cut(): void;

		Copy(): void;

		readonly HasChart: MsoTriState;

		readonly Chart: MsoChart;

		ShapeStyle: MsoShapeStyleIndex;

		BackgroundStyle: MsoBackgroundStyleIndex;

		readonly SoftEdge: SoftEdgeFormat;

		readonly Glow: GlowFormat;

		readonly Reflection: ReflectionFormat;

		Title: string;

		/**
		 * @param PrimaryShape 默认值为 null
		 */
		MergeShapes(MergeCmd: MsoMergeCmd, PrimaryShape?: Shape): void;

	}

	interface FillFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Background(): void;

		OneColorGradient(Style: MsoGradientStyle, Variant: number, Degree: number): void;

		Patterned(Pattern: MsoPatternType): void;

		PresetGradient(Style: MsoGradientStyle, Variant: number, PresetGradientType: MsoPresetGradientType): void;

		PresetTextured(PresetTexture: MsoPresetTexture): void;

		Solid(): void;

		TwoColorGradient(Style: MsoGradientStyle, Variant: number): void;

		UserPicture(PictureFile: string): void;

		UserTextured(TextureFile: string): void;

		BackColor: ColorFormat;

		ForeColor: ColorFormat;

		readonly GradientColorType: MsoGradientColorType;

		readonly GradientDegree: number;

		readonly GradientStyle: MsoGradientStyle;

		readonly GradientVariant: number;

		readonly Pattern: MsoPatternType;

		readonly PresetGradientType: MsoPresetGradientType;

		readonly PresetTexture: MsoPresetTexture;

		readonly TextureName: string;

		readonly TextureType: MsoTextureType;

		Transparency: number;

		readonly Type: MsoFillType;

		Visible: MsoTriState;

		readonly GradientStops: GradientStops;

		TextureOffsetX: number;

		TextureOffsetY: number;

		TextureAlignment: MsoTextureAlignment;

		TextureHorizontalScale: number;

		TextureVerticalScale: number;

		TextureTile: MsoTriState;

		RotateWithObject: MsoTriState;

		readonly PictureEffects: PictureEffects;

		GradientAngle: number;

	}

	interface GradientStops {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): GradientStop;

		readonly Count: number;

		/**
		 * @param Index 默认值为 -1
		 */
		Delete(Index?: number): void;

		/**
		 * @param Transparency 默认值为 0
		 * @param Index 默认值为 -1
		 */
		Insert(RGB: number, Position: number, Transparency?: number, Index?: number): void;

		/**
		 * @param Transparency 默认值为 0
		 * @param Index 默认值为 -1
		 * @param Brightness 默认值为 0
		 */
		Insert2(RGB: number, Position: number, Transparency?: number, Index?: number, Brightness?: number): void;

	}

	interface GradientStop {
		readonly Application: any;

		readonly Creator: number;

		readonly Color: ColorFormat;

		Position: number;

		Transparency: number;

	}

	interface PictureEffects {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): PictureEffect;

		readonly Count: number;

		/**
		 * @param Position 默认值为 -1
		 */
		Insert(EffectType: MsoPictureEffectType, Position?: number): PictureEffect;

		/**
		 * @param Index 默认值为 -1
		 */
		Delete(Index?: number): void;

	}

	interface PictureEffect {
		readonly Application: any;

		readonly Creator: number;

		readonly Type: MsoPictureEffectType;

		Position: number;

		Delete(): void;

		readonly EffectParameters: EffectParameters;

		Visible: MsoTriState;

	}

	interface EffectParameters {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): EffectParameter;

		readonly Count: number;

	}

	interface EffectParameter {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		Value: any;

	}

	interface GroupShapes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		Range(Index: any): ShapeRange;

	}

	interface LineFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		BackColor: ColorFormat;

		BeginArrowheadLength: MsoArrowheadLength;

		BeginArrowheadStyle: MsoArrowheadStyle;

		BeginArrowheadWidth: MsoArrowheadWidth;

		DashStyle: MsoLineDashStyle;

		EndArrowheadLength: MsoArrowheadLength;

		EndArrowheadStyle: MsoArrowheadStyle;

		EndArrowheadWidth: MsoArrowheadWidth;

		ForeColor: ColorFormat;

		Pattern: MsoPatternType;

		Style: MsoLineStyle;

		Transparency: number;

		Visible: MsoTriState;

		Weight: number;

		InsetPen: MsoTriState;

	}

	interface ShapeNodes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): ShapeNode;

		Delete(Index: number): void;

		/**
		 * @param X2 默认值为 0
		 * @param Y2 默认值为 0
		 * @param X3 默认值为 0
		 * @param Y3 默认值为 0
		 */
		Insert(Index: number, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: number, Y1: number, X2?: number, Y2?: number, X3?: number, Y3?: number): void;

		SetEditingType(Index: number, EditingType: MsoEditingType): void;

		SetPosition(Index: number, X1: number, Y1: number): void;

		SetSegmentType(Index: number, SegmentType: MsoSegmentType): void;

	}

	interface ShapeNode {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly EditingType: MsoEditingType;

		readonly Points: any;

		readonly SegmentType: MsoSegmentType;

	}

	interface PictureFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementBrightness(Increment: number): void;

		IncrementContrast(Increment: number): void;

		Brightness: number;

		ColorType: MsoPictureColorType;

		Contrast: number;

		CropBottom: number;

		CropLeft: number;

		CropRight: number;

		CropTop: number;

		TransparencyColor: number;

		TransparentBackground: MsoTriState;

		readonly Crop: Crop;

	}

	interface Crop {
		readonly Application: any;

		readonly Creator: number;

		PictureOffsetX: number;

		PictureOffsetY: number;

		PictureWidth: number;

		PictureHeight: number;

		ShapeLeft: number;

		ShapeTop: number;

		ShapeWidth: number;

		ShapeHeight: number;

	}

	interface ShadowFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementOffsetX(Increment: number): void;

		IncrementOffsetY(Increment: number): void;

		ForeColor: ColorFormat;

		Obscured: MsoTriState;

		OffsetX: number;

		OffsetY: number;

		Transparency: number;

		Type: MsoShadowType;

		Visible: MsoTriState;

		Style: MsoShadowStyle;

		Blur: number;

		Size: number;

		RotateWithShape: MsoTriState;

	}

	interface TextEffectFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		ToggleVerticalText(): void;

		Alignment: MsoTextEffectAlignment;

		FontBold: MsoTriState;

		FontItalic: MsoTriState;

		FontName: string;

		FontSize: number;

		KernedPairs: MsoTriState;

		NormalizedHeight: MsoTriState;

		PresetShape: MsoPresetTextEffectShape;

		PresetTextEffect: MsoPresetTextEffect;

		RotatedChars: MsoTriState;

		Text: string;

		Tracking: number;

	}

	interface TextFrame {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		MarginBottom: number;

		MarginLeft: number;

		MarginRight: number;

		MarginTop: number;

		Orientation: MsoTextOrientation;

	}

	interface ThreeDFormat {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		IncrementRotationX(Increment: number): void;

		IncrementRotationY(Increment: number): void;

		ResetRotation(): void;

		SetThreeDFormat(PresetThreeDFormat: MsoPresetThreeDFormat): void;

		SetExtrusionDirection(PresetExtrusionDirection: MsoPresetExtrusionDirection): void;

		Depth: number;

		readonly ExtrusionColor: ColorFormat;

		ExtrusionColorType: MsoExtrusionColorType;

		Perspective: MsoTriState;

		readonly PresetExtrusionDirection: MsoPresetExtrusionDirection;

		PresetLightingDirection: MsoPresetLightingDirection;

		PresetLightingSoftness: MsoPresetLightingSoftness;

		PresetMaterial: MsoPresetMaterial;

		readonly PresetThreeDFormat: MsoPresetThreeDFormat;

		RotationX: number;

		RotationY: number;

		Visible: MsoTriState;

		SetPresetCamera(PresetCamera: MsoPresetCamera): void;

		IncrementRotationZ(Increment: number): void;

		IncrementRotationHorizontal(Increment: number): void;

		IncrementRotationVertical(Increment: number): void;

		PresetLighting: MsoLightRigType;

		Z: number;

		BevelTopType: MsoBevelType;

		BevelTopInset: number;

		BevelTopDepth: number;

		BevelBottomType: MsoBevelType;

		BevelBottomInset: number;

		BevelBottomDepth: number;

		readonly PresetCamera: MsoPresetCamera;

		RotationZ: number;

		ContourWidth: number;

		readonly ContourColor: ColorFormat;

		FieldOfView: number;

		ProjectText: MsoTriState;

		LightAngle: number;

	}

	interface Script {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Extended: string;

		Id: string;

		Language: MsoScriptLanguage;

		readonly Location: MsoScriptLocation;

		Delete(): void;

		readonly Shape: any;

		ScriptText: string;

	}

	interface MsoDiagram {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Nodes: DiagramNodes;

		readonly Type: MsoDiagramType;

		AutoLayout: MsoTriState;

		Reverse: MsoTriState;

		AutoFormat: MsoTriState;

		Convert(Type: MsoDiagramType): void;

		FitText(): void;

	}

	interface DiagramNodes {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): DiagramNode;

		SelectAll(): void;

		readonly Parent: any;

		readonly Count: number;

	}

	interface DiagramNode {
		readonly Application: any;

		readonly Creator: number;

		/**
		 * @param Pos 默认值为 2
		 * @param NodeType 默认值为 1
		 */
		AddNode(Pos?: MsoRelativeNodePosition, NodeType?: MsoDiagramNodeType): DiagramNode;

		Delete(): void;

		MoveNode(TargetNode: DiagramNode, Pos: MsoRelativeNodePosition): void;

		ReplaceNode(TargetNode: DiagramNode): void;

		/**
		 * @param SwapChildren 默认值为 true
		 */
		SwapNode(TargetNode: DiagramNode, SwapChildren?: boolean): void;

		/**
		 * @param Pos 默认值为 2
		 */
		CloneNode(CopyChildren: boolean, TargetNode: DiagramNode, Pos?: MsoRelativeNodePosition): DiagramNode;

		TransferChildren(ReceivingNode: DiagramNode): void;

		NextNode(): DiagramNode;

		PrevNode(): DiagramNode;

		readonly Parent: any;

		readonly Children: DiagramNodeChildren;

		readonly Shape: Shape;

		readonly Root: DiagramNode;

		readonly Diagram: MsoDiagram;

		Layout: MsoOrgChartLayoutType;

		readonly TextShape: Shape;

	}

	interface DiagramNodeChildren {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): DiagramNode;

		/**
		 * @param Index 默认值为 -1
		 * @param NodeType 默认值为 1
		 */
		AddNode(Index?: any, NodeType?: MsoDiagramNodeType): DiagramNode;

		SelectAll(): void;

		readonly Parent: any;

		readonly Count: number;

		readonly FirstChild: DiagramNode;

		readonly LastChild: DiagramNode;

	}

	interface CanvasShapes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		AddCallout(Type: MsoCalloutType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddConnector(Type: MsoConnectorType, BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		AddCurve(SafeArrayOfPoints: any): Shape;

		AddLabel(Orientation: MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		AddLine(BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		/**
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 */
		AddPicture(FileName: string, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: number, Top: number, Width?: number, Height?: number): Shape;

		AddPolyline(SafeArrayOfPoints: any): Shape;

		AddShape(Type: MsoAutoShapeType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddTextEffect(PresetTextEffect: MsoPresetTextEffect, Text: string, FontName: string, FontSize: number, FontBold: MsoTriState, FontItalic: MsoTriState, Left: number, Top: number): Shape;

		AddTextbox(Orientation: MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		BuildFreeform(EditingType: MsoEditingType, X1: number, Y1: number): FreeformBuilder;

		Range(Index: any): ShapeRange;

		SelectAll(): void;

		readonly Background: Shape;

	}

	interface FreeformBuilder {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		/**
		 * @param X2 默认值为 0
		 * @param Y2 默认值为 0
		 * @param X3 默认值为 0
		 * @param Y3 默认值为 0
		 */
		AddNodes(SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: number, Y1: number, X2?: number, Y2?: number, X3?: number, Y3?: number): void;

		ConvertToShape(): Shape;

	}

	interface TextFrame2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		MarginBottom: number;

		MarginLeft: number;

		MarginRight: number;

		MarginTop: number;

		Orientation: MsoTextOrientation;

		HorizontalAnchor: MsoHorizontalAnchor;

		VerticalAnchor: MsoVerticalAnchor;

		PathFormat: MsoPathFormat;

		WarpFormat: MsoWarpFormat;

		WordArtformat: MsoPresetTextEffect;

		WordWrap: MsoTriState;

		AutoSize: MsoAutoSize;

		readonly ThreeD: ThreeDFormat;

		readonly HasText: MsoTriState;

		readonly TextRange: TextRange2;

		readonly Column: TextColumn2;

		readonly Ruler: Ruler2;

		DeleteText(): void;

		NoTextRotation: MsoTriState;

	}

	interface TextRange2 {
		readonly Application: any;

		readonly Creator: number;

		Text: string;

		readonly Count: number;

		Item(Index: any): TextRange2;

		readonly Parent: any;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Paragraphs(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Sentences(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Words(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Characters(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Lines(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		Runs(Start?: number, Length?: number): TextRange2;

		readonly ParagraphFormat: ParagraphFormat2;

		readonly Font: Font2;

		readonly Length: number;

		readonly Start: number;

		readonly BoundLeft: number;

		readonly BoundTop: number;

		readonly BoundWidth: number;

		readonly BoundHeight: number;

		TrimText(): TextRange2;

		/**
		 * @param NewText 默认值为 ""
		 */
		InsertAfter(NewText?: string): TextRange2;

		/**
		 * @param NewText 默认值为 ""
		 */
		InsertBefore(NewText?: string): TextRange2;

		/**
		 * @param Unicode 默认值为 0
		 */
		InsertSymbol(FontName: string, CharNumber: number, Unicode?: MsoTriState): TextRange2;

		Select(): void;

		Cut(): void;

		Copy(): void;

		Delete(): void;

		Paste(): TextRange2;

		PasteSpecial(Format: MsoClipboardFormat): TextRange2;

		ChangeCase(Type: MsoTextChangeCase): void;

		AddPeriods(): void;

		RemovePeriods(): void;

		/**
		 * @param After 默认值为 0
		 * @param MatchCase 默认值为 0
		 * @param WholeWords 默认值为 0
		 */
		Find(FindWhat: string, After?: number, MatchCase?: MsoTriState, WholeWords?: MsoTriState): TextRange2;

		/**
		 * @param After 默认值为 0
		 * @param MatchCase 默认值为 0
		 * @param WholeWords 默认值为 0
		 */
		Replace(FindWhat: string, ReplaceWhat: string, After?: number, MatchCase?: MsoTriState, WholeWords?: MsoTriState): TextRange2;

		RotatedBounds(): {X1: number, Y1: number, X2: number, Y2: number, X3: number, Y3: number, x4: number, y4: number};

		LanguageID: MsoLanguageID;

		RtlRun(): void;

		LtrRun(): void;

		/**
		 * @param Start 默认值为 -1
		 * @param Length 默认值为 -1
		 */
		MathZones(Start?: number, Length?: number): TextRange2;

		/**
		 * @param Formula 默认值为 ""
		 * @param Position 默认值为 -1
		 */
		InsertChartField(ChartFieldType: MsoChartFieldType, Formula?: string, Position?: number): TextRange2;

	}

	interface ParagraphFormat2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Alignment: MsoParagraphAlignment;

		BaselineAlignment: MsoBaselineAlignment;

		readonly Bullet: BulletFormat2;

		FarEastLineBreakLevel: MsoTriState;

		FirstLineIndent: number;

		HangingPunctuation: MsoTriState;

		IndentLevel: number;

		LeftIndent: number;

		LineRuleAfter: MsoTriState;

		LineRuleBefore: MsoTriState;

		LineRuleWithin: MsoTriState;

		RightIndent: number;

		SpaceAfter: number;

		SpaceBefore: number;

		SpaceWithin: number;

		readonly TabStops: TabStops2;

		TextDirection: MsoTextDirection;

		WordWrap: MsoTriState;

	}

	interface BulletFormat2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Character: number;

		readonly Font: Font2;

		readonly Number: number;

		Picture(FileName: string): void;

		RelativeSize: number;

		StartValue: number;

		Style: MsoNumberedBulletStyle;

		Type: MsoBulletType;

		UseTextColor: MsoTriState;

		UseTextFont: MsoTriState;

		Visible: MsoTriState;

	}

	interface Font2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Bold: MsoTriState;

		Italic: MsoTriState;

		Strike: MsoTextStrike;

		Caps: MsoTextCaps;

		AutorotateNumbers: MsoTriState;

		BaselineOffset: number;

		Kerning: number;

		Size: number;

		Spacing: number;

		UnderlineStyle: MsoTextUnderlineType;

		Allcaps: MsoTriState;

		DoubleStrikeThrough: MsoTriState;

		Equalize: MsoTriState;

		readonly Fill: FillFormat;

		readonly Glow: GlowFormat;

		readonly Reflection: ReflectionFormat;

		readonly Line: LineFormat;

		readonly Shadow: ShadowFormat;

		readonly Highlight: ColorFormat;

		readonly UnderlineColor: ColorFormat;

		Smallcaps: MsoTriState;

		SoftEdgeFormat: MsoSoftEdgeType;

		StrikeThrough: MsoTriState;

		Subscript: MsoTriState;

		Superscript: MsoTriState;

		WordArtformat: MsoPresetTextEffect;

		readonly Embeddable: MsoTriState;

		readonly Embedded: MsoTriState;

		Name: string;

		NameAscii: string;

		NameComplexScript: string;

		NameFarEast: string;

		NameOther: string;

	}

	interface GlowFormat {
		readonly Application: any;

		readonly Creator: number;

		Radius: number;

		readonly Color: ColorFormat;

		Transparency: number;

	}

	interface ReflectionFormat {
		readonly Application: any;

		readonly Creator: number;

		Type: MsoReflectionType;

		Transparency: number;

		Size: number;

		Offset: number;

		Blur: number;

	}

	interface TabStops2 {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): TabStop2;

		readonly Parent: any;

		Add(Type: MsoTabStopType, Position: number): TabStop2;

		readonly Count: number;

		DefaultSpacing: number;

	}

	interface TabStop2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Clear(): void;

		Position: number;

		Type: MsoTabStopType;

	}

	interface TextColumn2 {
		readonly Application: any;

		readonly Creator: number;

		Number: number;

		Spacing: number;

		TextDirection: MsoTextDirection;

	}

	interface Ruler2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Levels: RulerLevels2;

		readonly TabStops: TabStops2;

	}

	interface RulerLevels2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): RulerLevel2;

	}

	interface RulerLevel2 {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		FirstMargin: number;

		LeftMargin: number;

	}

	interface MsoChart {
		readonly Parent: any;

		HasTitle: boolean;

		readonly ChartTitle: MsoChartTitle;

		DepthPercent: number;

		Elevation: number;

		GapDepth: number;

		HeightPercent: number;

		Perspective: number;

		RightAngleAxes: any;

		Rotation: any;

		DisplayBlanksAs: XlDisplayBlanksAs;

		ChartGroups(pvarIndex?: any, varIgallery?: any): any;

		SeriesCollection(Index?: any): any;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any): void;

		SubType: number;

		Type: number;

		readonly Corners: MsoCorners;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): void;

		ChartType: XlChartType;

		HasDataTable: boolean;

		ApplyCustomType(ChartType: XlChartType, TypeName?: any): void;

		GetChartElement(x: number, y: number): {ElementID: number, Arg1: number, Arg2: number};

		SetSourceData(Source: string, PlotBy?: any): void;

		PlotBy: XlRowCol;

		HasLegend: boolean;

		readonly Legend: MsoLegend;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		Axes(Type?: any, AxisGroup?: XlAxisGroup): any;

		HasAxis(axisType?: any, AxisGroup?: any, pval?: any): void;

		HasAxis(axisType?: any, AxisGroup?: any): any;

		/**
		 * @param fBackWall 默认值为 true
		 */
		Walls(fBackWall?: boolean): MsoWalls;

		readonly Floor: MsoFloor;

		readonly PlotArea: MsoPlotArea;

		PlotVisibleOnly: boolean;

		readonly ChartArea: MsoChartArea;

		AutoFormat(rGallery: number, varFormat?: any): void;

		AutoScaling: boolean;

		ChartWizard(varSource?: any, varGallery?: any, varFormat?: any, varPlotBy?: any, varCategoryLabels?: any, varSeriesLabels?: any, varHasLegend?: any, varTitle?: any, varCategoryTitle?: any, varValueTitle?: any, varExtraTitle?: any): void;

		/**
		 * @param Appearance 默认值为 1
		 * @param Format 默认值为 -4147
		 * @param Size 默认值为 2
		 */
		CopyPicture(Appearance?: number, Format?: number, Size?: number): void;

		readonly DataTable: MsoDataTable;

		BarShape: XlBarShape;

		Export(bstr: string, varFilterName?: any, varInteractive?: any): boolean;

		SetDefaultChart(varName: any): void;

		ApplyChartTemplate(bstrFileName: string): void;

		SaveChartTemplate(bstrFileName: string): void;

		readonly SideWall: MsoWalls;

		readonly BackWall: MsoWalls;

		ChartStyle: any;

		ClearToMatchStyle(): void;

		readonly PivotLayout: any;

		HasPivotFields: boolean;

		RefreshPivotTable(): void;

		ShowDataLabelsOverMaximum: boolean;

		ApplyLayout(Layout: number, varChartType?: any): void;

		Refresh(): void;

		SetElement(RHS: MsoChartElementType): void;

		readonly ChartData: MsoChartData;

		readonly Format: MsoChartFormat;

		readonly Shapes: Shapes;

		readonly Application: any;

		readonly Creator: number;

		readonly Area3DGroup: MsoChartGroup;

		AreaGroups(Index?: any): any;

		readonly Bar3DGroup: MsoChartGroup;

		BarGroups(Index?: any): any;

		readonly Column3DGroup: MsoChartGroup;

		ColumnGroups(Index?: any): any;

		readonly Line3DGroup: MsoChartGroup;

		LineGroups(Index?: any): any;

		readonly Pie3DGroup: MsoChartGroup;

		PieGroups(Index?: any): any;

		DoughnutGroups(Index?: any): any;

		RadarGroups(Index?: any): any;

		readonly SurfaceGroup: MsoChartGroup;

		XYGroups(Index?: any): any;

		Delete(): any;

		Copy(): any;

		Select(Replace?: any): any;

		ShowReportFilterFieldButtons: boolean;

		ShowLegendFieldButtons: boolean;

		ShowAxisFieldButtons: boolean;

		ShowValueFieldButtons: boolean;

		ShowAllFieldButtons: boolean;

		FullSeriesCollection(Index?: any): any;

		CategoryLabelLevel: XlCategoryLabelLevel;

		SeriesNameLevel: XlSeriesNameLevel;

		readonly HasHiddenContent: boolean;

		DeleteHiddenContent(): void;

		ChartColor: any;

		ClearToMatchColorStyle(): void;

	}

	interface MsoChartTitle {
		Caption: string;

		Characters(Start?: any, Length?: any): MsoCharacters;

		readonly Font: ChartFont;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Delete(): any;

		readonly Border: MsoBorder;

		readonly Name: string;

		readonly Parent: any;

		Select(): any;

		IncludeInLayout: boolean;

		Position: XlChartElementPosition;

		readonly Format: MsoChartFormat;

		readonly Height: number;

		readonly Application: any;

		readonly Creator: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface MsoCharacters {
		readonly Parent: any;

		Caption: string;

		readonly Count: number;

		Delete(): any;

		readonly Font: ChartFont;

		Insert(bstr: string): any;

		Text: string;

		PhoneticCharacters: string;

		readonly Application: any;

		readonly Creator: number;

	}

	interface ChartFont {
		Background: any;

		Bold: any;

		Color: any;

		ColorIndex: any;

		FontStyle: any;

		Italic: any;

		Name: any;

		OutlineFont: any;

		Shadow: any;

		Size: any;

		StrikeThrough: any;

		Subscript: any;

		Superscript: any;

		Underline: any;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface MsoInterior {
		Color: any;

		ColorIndex: any;

		InvertIfNegative: any;

		Pattern: any;

		PatternColor: any;

		PatternColorIndex: any;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface ChartFillFormat {
		OneColorGradient(Style: number, Variant: number, Degree: number): void;

		TwoColorGradient(Style: number, Variant: number): void;

		PresetTextured(PresetTexture: number): void;

		Solid(): void;

		Patterned(Pattern: number): void;

		UserPicture(PictureFile: any, PictureFormat: any, PictureStackUnit: any, PicturePlacement: any): void;

		UserTextured(TextureFile: string): void;

		PresetGradient(Style: number, Variant: number, PresetGradientType: number): void;

		readonly BackColor: ChartColorFormat;

		readonly ForeColor: ChartColorFormat;

		readonly GradientColorType: number;

		readonly GradientDegree: number;

		readonly GradientStyle: number;

		readonly GradientVariant: number;

		readonly Pattern: number;

		readonly PresetGradientType: number;

		readonly PresetTexture: number;

		readonly TextureName: string;

		readonly TextureType: number;

		readonly Type: number;

		Visible: number;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface ChartColorFormat {
		readonly Parent: any;

		SchemeColor: number;

		RGB: number;

		readonly _Default: number;

		readonly Type: number;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoBorder {
		Color: any;

		ColorIndex: any;

		LineStyle: any;

		Weight: any;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface MsoChartFormat {
		readonly Fill: FillFormat;

		readonly Glow: GlowFormat;

		readonly Line: LineFormat;

		readonly Parent: any;

		readonly PictureFormat: PictureFormat;

		readonly Shadow: ShadowFormat;

		readonly SoftEdge: SoftEdgeFormat;

		readonly TextFrame2: TextFrame2;

		readonly ThreeD: ThreeDFormat;

		readonly Application: any;

		readonly Creator: number;

		readonly Adjustments: Adjustments;

		AutoShapeType: MsoAutoShapeType;

	}

	interface SoftEdgeFormat {
		readonly Application: any;

		readonly Creator: number;

		Type: MsoSoftEdgeType;

		Radius: number;

	}

	interface MsoCorners {
		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoLegend {
		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Font: ChartFont;

		LegendEntries(Index?: any): any;

		Position: XlLegendPosition;

		Shadow: boolean;

		Clear(): any;

		Height: number;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		AutoScaleFont: any;

		IncludeInLayout: boolean;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoWalls {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		PictureType: any;

		Paste(): void;

		PictureUnit: any;

		Thickness: number;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoFloor {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		PictureType: any;

		Paste(): void;

		Thickness: number;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoPlotArea {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		Height: number;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		InsideLeft: number;

		InsideTop: number;

		InsideWidth: number;

		InsideHeight: number;

		Position: XlChartElementPosition;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoChartArea {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Clear(): any;

		ClearContents(): any;

		Copy(): any;

		readonly Font: ChartFont;

		Shadow: boolean;

		ClearFormats(): any;

		Height: number;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Left: number;

		Top: number;

		Width: number;

		AutoScaleFont: any;

		readonly Format: MsoChartFormat;

		RoundedCorners: boolean;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoDataTable {
		ShowLegendKey: boolean;

		HasBorderHorizontal: boolean;

		HasBorderVertical: boolean;

		HasBorderOutline: boolean;

		readonly Border: MsoBorder;

		readonly Font: ChartFont;

		Select(): void;

		Delete(): void;

		readonly Parent: any;

		AutoScaleFont: any;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoChartData {
		readonly Workbook: any;

		Activate(): void;

		readonly IsLinked: boolean;

		BreakLink(): void;

		ActivateChartDataWindow(): void;

	}

	interface Shapes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Shape;

		AddCallout(Type: MsoCalloutType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddConnector(Type: MsoConnectorType, BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		AddCurve(SafeArrayOfPoints: any): Shape;

		AddLabel(Orientation: MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		AddLine(BeginX: number, BeginY: number, EndX: number, EndY: number): Shape;

		/**
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 */
		AddPicture(FileName: string, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: number, Top: number, Width?: number, Height?: number): Shape;

		AddPolyline(SafeArrayOfPoints: any): Shape;

		AddShape(Type: MsoAutoShapeType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddTextEffect(PresetTextEffect: MsoPresetTextEffect, Text: string, FontName: string, FontSize: number, FontBold: MsoTriState, FontItalic: MsoTriState, Left: number, Top: number): Shape;

		AddTextbox(Orientation: MsoTextOrientation, Left: number, Top: number, Width: number, Height: number): Shape;

		BuildFreeform(EditingType: MsoEditingType, X1: number, Y1: number): FreeformBuilder;

		Range(Index: any): ShapeRange;

		SelectAll(): void;

		readonly Background: Shape;

		readonly Default: Shape;

		AddDiagram(Type: MsoDiagramType, Left: number, Top: number, Width: number, Height: number): Shape;

		AddCanvas(Left: number, Top: number, Width: number, Height: number): Shape;

		/**
		 * @param Type 默认值为 -1
		 * @param Left 默认值为 -1
		 * @param Top 默认值为 -1
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 */
		AddChart(Type?: XlChartType, Left?: number, Top?: number, Width?: number, Height?: number): Shape;

		AddTable(NumRows: number, NumColumns: number, Left: number, Top: number, Width: number, Height: number): Shape;

		/**
		 * @param Left 默认值为 -1
		 * @param Top 默认值为 -1
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 */
		AddSmartArt(Layout: SmartArtLayout, Left?: number, Top?: number, Width?: number, Height?: number): Shape;

		/**
		 * @param Style 默认值为 -1
		 * @param Type 默认值为 -1
		 * @param Left 默认值为 -1
		 * @param Top 默认值为 -1
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 * @param NewLayout 默认值为 true
		 */
		AddChart2(Style?: number, Type?: XlChartType, Left?: number, Top?: number, Width?: number, Height?: number, NewLayout?: boolean): Shape;

		/**
		 * @param Width 默认值为 -1
		 * @param Height 默认值为 -1
		 * @param Compress 默认值为 -1
		 */
		AddPicture2(FileName: string, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: number, Top: number, Width?: number, Height?: number, Compress?: MsoPictureCompress): Shape;

	}

	interface SmartArtLayout {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly Category: string;

	}

	interface MsoChartGroup {
		AxisGroup: number;

		DoughnutHoleSize: number;

		readonly DownBars: MsoDownBars;

		readonly DropLines: MsoDropLines;

		FirstSliceAngle: number;

		GapWidth: number;

		HasDropLines: boolean;

		HasHiLoLines: boolean;

		HasRadarAxisLabels: boolean;

		HasSeriesLines: boolean;

		HasUpDownBars: boolean;

		readonly HiLoLines: MsoHiLoLines;

		readonly Index: number;

		Overlap: number;

		readonly RadarAxisLabels: any;

		SeriesCollection(Index?: any): any;

		readonly SeriesLines: MsoSeriesLines;

		SubType: number;

		Type: number;

		readonly UpBars: MsoUpBars;

		VaryByCategories: boolean;

		SizeRepresents: XlSizeRepresents;

		BubbleScale: number;

		ShowNegativeBubbles: boolean;

		SplitType: XlChartSplitType;

		SplitValue: any;

		SecondPlotSize: number;

		Has3DShading: boolean;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		CategoryCollection(Index?: any): any;

		FullCategoryCollection(Index?: any): any;

	}

	interface MsoDownBars {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoDropLines {
		readonly Name: string;

		Select(): void;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Delete(): void;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoHiLoLines {
		readonly Parent: any;

		readonly Name: string;

		Select(): void;

		readonly Border: MsoBorder;

		Delete(): void;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoSeriesLines {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoUpBars {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface SmartArt {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly AllNodes: SmartArtNodes;

		readonly Nodes: SmartArtNodes;

		Layout: SmartArtLayout;

		QuickStyle: SmartArtQuickStyle;

		Color: SmartArtColor;

		Reverse: MsoTriState;

		Reset(): void;

	}

	interface SmartArtNodes {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): SmartArtNode;

		readonly Parent: any;

		readonly Count: number;

		Add(): SmartArtNode;

	}

	interface SmartArtNode {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		/**
		 * @param Position 默认值为 1
		 * @param Type 默认值为 1
		 */
		AddNode(Position?: MsoSmartArtNodePosition, Type?: MsoSmartArtNodeType): SmartArtNode;

		Delete(): void;

		Promote(): void;

		Demote(): void;

		OrgChartLayout: MsoOrgChartLayoutType;

		readonly Shapes: ShapeRange;

		readonly TextFrame2: TextFrame2;

		Larger(): void;

		Smaller(): void;

		readonly Level: number;

		readonly Hidden: MsoTriState;

		readonly Nodes: SmartArtNodes;

		readonly ParentNode: SmartArtNode;

		readonly Type: MsoSmartArtNodeType;

		ReorderUp(): void;

		ReorderDown(): void;

	}

	interface SmartArtQuickStyle {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly Category: string;

	}

	interface SmartArtColor {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly Category: string;

	}

	interface Scripts {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): Script;

		/**
		 * @param Location 默认值为 2
		 * @param Language 默认值为 2
		 * @param Id 默认值为 ""
		 * @param Extended 默认值为 ""
		 * @param ScriptText 默认值为 ""
		 */
		Add(Anchor?: any, Location?: MsoScriptLocation, Language?: MsoScriptLanguage, Id?: string, Extended?: string, ScriptText?: string): Script;

		Delete(): void;

	}

	interface MsoDispCagNotifySink {
		InsertClip(pClipMoniker: any, pItemMoniker: any): void;

		WindowIsClosing(): void;

	}

	interface Balloon {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Checkboxes: any;

		readonly Labels: any;

		BalloonType: MsoBalloonType;

		Icon: MsoIconType;

		Heading: string;

		Text: string;

		Mode: MsoModeType;

		Animation: MsoAnimationType;

		Button: MsoButtonSetType;

		Callback: string;

		Private: number;

		SetAvoidRectangle(Left: number, Top: number, Right: number, Bottom: number): void;

		readonly Name: string;

		Show(): MsoBalloonButtonType;

		Close(): void;

	}

	interface BalloonCheckboxes {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Parent: any;

		Item(Index: number): any;

		Count: number;

	}

	interface BalloonCheckbox {
		readonly Application: any;

		readonly Creator: number;

		readonly Item: string;

		readonly Name: string;

		readonly Parent: any;

		Checked: boolean;

		Text: string;

	}

	interface BalloonLabels {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Parent: any;

		Item(Index: number): any;

		Count: number;

	}

	interface BalloonLabel {
		readonly Application: any;

		readonly Creator: number;

		readonly Item: string;

		readonly Name: string;

		readonly Parent: any;

		Text: string;

	}

	interface AnswerWizardFiles {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Item(Index: number): string;

		readonly Count: number;

		Add(FileName: string): void;

		Delete(FileName: string): void;

	}

	interface AnswerWizard {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Files: AnswerWizardFiles;

		ClearFileList(): void;

		ResetFileList(): void;

	}

	interface Assistant {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Move(xLeft: number, yTop: number): void;

		Top: number;

		Left: number;

		Help(): void;

		StartWizard(On: boolean, Callback: string, PrivateX: number, Animation?: any, CustomTeaser?: any, Top?: any, Left?: any, Bottom?: any, Right?: any): number;

		EndWizard(WizardID: number, varfSuccess: boolean, Animation?: any): void;

		ActivateWizard(WizardID: number, act: MsoWizardActType, Animation?: any): void;

		ResetTips(): void;

		readonly NewBalloon: Balloon;

		readonly BalloonError: MsoBalloonErrorType;

		Visible: boolean;

		Animation: MsoAnimationType;

		Reduced: boolean;

		AssistWithHelp: boolean;

		AssistWithWizards: boolean;

		AssistWithAlerts: boolean;

		MoveWhenInTheWay: boolean;

		Sounds: boolean;

		FeatureTips: boolean;

		MouseTips: boolean;

		KeyboardShortcutTips: boolean;

		HighPriorityTips: boolean;

		TipOfDay: boolean;

		GuessHelp: boolean;

		SearchWhenProgramming: boolean;

		readonly Item: string;

		FileName: string;

		readonly Name: string;

		On: boolean;

		DoAlert(bstrAlertTitle: string, bstrAlertText: string, alb: MsoAlertButtonType, alc: MsoAlertIconType, ald: MsoAlertDefaultType, alq: MsoAlertCancelType, varfSysAlert: boolean): number;

	}

	interface DocumentProperty {
		readonly Parent: any;

		Delete(): void;

		Name: string;

		Value: any;

		Type: MsoDocProperties;

		LinkToContent: boolean;

		LinkSource: string;

		readonly Application: any;

		readonly Creator: number;

	}

	interface DocumentProperties {
		readonly Parent: any;

		Item(Index: any): DocumentProperty;

		readonly Count: number;

		Add(Name: string, LinkToContent: boolean, Type?: any, Value?: any, LinkSource?: any): DocumentProperty;

		readonly Application: any;

		readonly Creator: number;

	}

	interface FoundFiles {
		Item(Index: number): string;

		readonly Count: number;

	}

	interface Find {
		SearchPath: string;

		Name: string;

		SubDir: boolean;

		Title: string;

		Author: string;

		Keywords: string;

		Subject: string;

		Options: MsoFileFindOptions;

		MatchCase: boolean;

		Text: string;

		PatternMatch: boolean;

		DateSavedFrom: any;

		DateSavedTo: any;

		SavedBy: string;

		DateCreatedFrom: any;

		DateCreatedTo: any;

		View: MsoFileFindView;

		SortBy: MsoFileFindSortBy;

		ListBy: MsoFileFindListBy;

		SelectedFile: number;

		readonly Results: FoundFiles;

		Show(): number;

		Execute(): void;

		Load(bstrQueryName: string): void;

		Save(bstrQueryName: string): void;

		Delete(bstrQueryName: string): void;

		FileType: number;

	}

	interface FoundFiles {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): string;

		readonly Count: number;

	}

	interface PropertyTest {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Condition: MsoCondition;

		readonly Value: any;

		readonly SecondValue: any;

		readonly Connector: MsoConnector;

	}

	interface PropertyTests {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): PropertyTest;

		readonly Count: number;

		/**
		 * @param Connector 默认值为 1
		 */
		Add(Name: string, Condition: MsoCondition, Value?: any, SecondValue?: any, Connector?: MsoConnector): void;

		Remove(Index: number): void;

	}

	interface FileSearch {
		readonly Application: any;

		readonly Creator: number;

		SearchSubFolders: boolean;

		MatchTextExactly: boolean;

		MatchAllWordForms: boolean;

		FileName: string;

		FileType: MsoFileType;

		LastModified: MsoLastModified;

		TextOrProperty: string;

		LookIn: string;

		/**
		 * @param SortBy 默认值为 1
		 * @param SortOrder 默认值为 1
		 * @param AlwaysAccurate 默认值为 true
		 */
		Execute(SortBy?: MsoSortBy, SortOrder?: MsoSortOrder, AlwaysAccurate?: boolean): number;

		NewSearch(): void;

		readonly FoundFiles: FoundFiles;

		readonly PropertyTests: PropertyTests;

		readonly SearchScopes: SearchScopes;

		readonly SearchFolders: SearchFolders;

		readonly FileTypes: FileTypes;

		RefreshScopes(): void;

	}

	interface SearchScopes {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SearchScope;

		readonly Count: number;

	}

	interface SearchScope {
		readonly Application: any;

		readonly Creator: number;

		readonly Type: MsoSearchIn;

		readonly ScopeFolder: ScopeFolder;

	}

	interface ScopeFolder {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Path: string;

		readonly ScopeFolders: ScopeFolders;

		AddToSearchFolders(): void;

	}

	interface ScopeFolders {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): ScopeFolder;

		readonly Count: number;

	}

	interface SearchFolders {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): ScopeFolder;

		readonly Count: number;

		Add(ScopeFolder: ScopeFolder): void;

		Remove(Index: number): void;

	}

	interface FileTypes {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): MsoFileType;

		readonly Count: number;

		Add(FileType: MsoFileType): void;

		Remove(Index: number): void;

	}

	interface COMAddIn {
		readonly Application: any;

		readonly Creator: number;

		Description: string;

		readonly ProgId: string;

		readonly Guid: string;

		Connect: boolean;

		Object: any;

		readonly Parent: any;

	}

	interface COMAddIns {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): COMAddIn;

		readonly Count: number;

		Update(): void;

		readonly Parent: any;

		SetAppModal(varfModal: boolean): void;

	}

	interface LanguageSettings {
		readonly Application: any;

		readonly Creator: number;

		LanguageID(Id: MsoAppLanguageID): number;

		LanguagePreferredForEditing(lid: MsoLanguageID): boolean;

		readonly Parent: any;

	}

	interface WebPageFont {
		readonly Application: any;

		readonly Creator: number;

		ProportionalFont: string;

		ProportionalFontSize: number;

		FixedWidthFont: string;

		FixedWidthFontSize: number;

	}

	interface WebPageFonts {
		readonly Application: any;

		readonly Creator: number;

		readonly Count: number;

		Item(Index: MsoCharacterSet): WebPageFont;

	}

	interface HTMLProjectItem {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly IsOpen: boolean;

		LoadFromFile(FileName: string): void;

		/**
		 * @param OpenKind 默认值为 0
		 */
		Open(OpenKind?: MsoHTMLProjectOpen): void;

		SaveCopyAs(FileName: string): void;

		Text: string;

		readonly Parent: any;

	}

	interface HTMLProjectItems {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): HTMLProjectItem;

		readonly Count: number;

		readonly Parent: any;

	}

	interface HTMLProject {
		readonly Application: any;

		readonly Creator: number;

		readonly State: MsoHTMLProjectState;

		/**
		 * @param Refresh 默认值为 true
		 */
		RefreshProject(Refresh?: boolean): void;

		/**
		 * @param Refresh 默认值为 true
		 */
		RefreshDocument(Refresh?: boolean): void;

		readonly HTMLProjectItems: HTMLProjectItems;

		readonly Parent: any;

		/**
		 * @param OpenKind 默认值为 0
		 */
		Open(OpenKind?: MsoHTMLProjectOpen): void;

	}

	interface MsoDebugOptions {
		readonly Application: any;

		readonly Creator: number;

		FeatureReports: number;

		OutputToDebugger: boolean;

		OutputToFile: boolean;

		OutputToMessageBox: boolean;

		readonly UnitTestManager: any;

		AddIgnoredAssertTag(bstrTagToIgnore: string): void;

		RemoveIgnoredAssertTag(bstrTagToIgnore: string): void;

	}

	interface FileDialogSelectedItems {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): string;

	}

	interface FileDialogFilter {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Extensions: string;

		readonly Description: string;

	}

	interface FileDialogFilters {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): FileDialogFilter;

		Delete(filter?: any): void;

		Clear(): void;

		Add(Description: string, Extensions: string, Position?: any): FileDialogFilter;

	}

	interface FileDialog {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Filters: FileDialogFilters;

		FilterIndex: number;

		Title: string;

		ButtonName: string;

		AllowMultiSelect: boolean;

		InitialView: MsoFileDialogView;

		InitialFileName: string;

		readonly SelectedItems: FileDialogSelectedItems;

		readonly DialogType: MsoFileDialogType;

		readonly Item: string;

		Show(): number;

		Execute(): void;

	}

	interface SignatureSet {
		readonly Application: any;

		readonly Creator: number;

		readonly Count: number;

		Item(iSig: number): Signature;

		Add(): Signature;

		Commit(): void;

		readonly Parent: any;

		AddNonVisibleSignature(varSigProv?: any): Signature;

		readonly CanAddSignatureLine: boolean;

		AddSignatureLine(varSigProv?: any): Signature;

		Subset: MsoSignatureSubset;

		set ShowSignaturesPane(arg1: boolean);

	}

	interface Signature {
		readonly Application: any;

		readonly Creator: number;

		readonly Signer: string;

		readonly Issuer: string;

		readonly ExpireDate: any;

		readonly IsValid: boolean;

		AttachCertificate: boolean;

		Delete(): void;

		readonly Parent: any;

		readonly IsCertificateExpired: boolean;

		readonly IsCertificateRevoked: boolean;

		readonly SignDate: any;

		readonly IsSigned: boolean;

		Sign(varSigImg?: any, varDelSuggSigner?: any, varDelSuggSignerLine2?: any, varDelSuggSignerEmail?: any): void;

		readonly Details: SignatureInfo;

		ShowDetails(): void;

		readonly CanSetup: boolean;

		readonly Setup: SignatureSetup;

		readonly IsSignatureLine: boolean;

		readonly SignatureLineShape: any;

		readonly SortHint: number;

	}

	interface SignatureInfo {
		readonly Application: any;

		readonly Creator: number;

		readonly ReadOnly: boolean;

		readonly SignatureProvider: string;

		SignatureText: string;

		SignatureImage: any;

		SignatureComment: string;

		GetSignatureDetail(sigdet: SignatureDetail): any;

		GetCertificateDetail(certdet: CertificateDetail): any;

		readonly ContentVerificationResults: ContentVerificationResults;

		readonly CertificateVerificationResults: CertificateVerificationResults;

		readonly IsValid: boolean;

		readonly IsCertificateExpired: boolean;

		readonly IsCertificateRevoked: boolean;

		readonly IsCertificateUntrusted: boolean;

		ShowSignatureCertificate(ParentWindow: any): void;

		SelectSignatureCertificate(ParentWindow: any): void;

		SelectCertificateDetailByThumbprint(bstrThumbprint: string): void;

	}

	interface SignatureSetup {
		readonly Application: any;

		readonly Creator: number;

		readonly ReadOnly: boolean;

		readonly Id: string;

		readonly SignatureProvider: string;

		SuggestedSigner: string;

		SuggestedSignerLine2: string;

		SuggestedSignerEmail: string;

		SigningInstructions: string;

		AllowComments: boolean;

		ShowSignDate: boolean;

		AdditionalXml: string;

	}

	interface MsoEnvelope {
		Introduction: string;

		readonly Item: any;

		readonly Parent: any;

		readonly CommandBars: any;

	}

	interface OfficeDataSourceObject {
		ConnectString: string;

		Table: string;

		DataSource: string;

		readonly Columns: any;

		readonly RowCount: number;

		readonly Filters: any;

		/**
		 * @param RowNbr 默认值为 1
		 */
		Move(MsoMoveRow: MsoMoveRow, RowNbr?: number): number;

		/**
		 * @param bstrSrc 默认值为 ""
		 * @param bstrConnect 默认值为 ""
		 * @param bstrTable 默认值为 ""
		 * @param fOpenExclusive 默认值为 0
		 * @param fNeverPrompt 默认值为 1
		 */
		Open(bstrSrc?: string, bstrConnect?: string, bstrTable?: string, fOpenExclusive?: number, fNeverPrompt?: number): void;

		/**
		 * @param SortAscending1 默认值为 true
		 * @param SortField2 默认值为 ""
		 * @param SortAscending2 默认值为 true
		 * @param SortField3 默认值为 ""
		 * @param SortAscending3 默认值为 true
		 */
		SetSortOrder(SortField1: string, SortAscending1?: boolean, SortField2?: string, SortAscending2?: boolean, SortField3?: string, SortAscending3?: boolean): void;

		ApplyFilter(): void;

	}

	interface ODSOColumn {
		readonly Application: any;

		readonly Creator: number;

		readonly Index: number;

		readonly Name: string;

		readonly Parent: any;

		readonly Value: string;

	}

	interface ODSOColumns {
		readonly Application: any;

		readonly Creator: number;

		readonly Count: number;

		readonly Parent: any;

		Item(varIndex: any): any;

	}

	interface ODSOFilter {
		readonly Application: any;

		readonly Creator: number;

		readonly Index: number;

		readonly Parent: any;

		Column: string;

		Comparison: MsoFilterComparison;

		CompareTo: string;

		Conjunction: MsoFilterConjunction;

	}

	interface ODSOFilters {
		readonly Application: any;

		readonly Creator: number;

		readonly Count: number;

		readonly Parent: any;

		Item(Index: number): any;

		/**
		 * @param bstrCompareTo 默认值为 ""
		 * @param DeferUpdate 默认值为 false
		 */
		Add(Column: string, Comparison: MsoFilterComparison, Conjunction: MsoFilterConjunction, bstrCompareTo?: string, DeferUpdate?: boolean): void;

		/**
		 * @param DeferUpdate 默认值为 false
		 */
		Delete(Index: number, DeferUpdate?: boolean): void;

	}

	interface NewFile {
		readonly Application: any;

		readonly Creator: number;

		Add(FileName: string, Section?: any, DisplayName?: any, Action?: any): boolean;

		Remove(FileName: string, Section?: any, DisplayName?: any, Action?: any): boolean;

	}

	interface WebComponent {
		readonly Shape: any;

		URL: string;

		HTML: string;

		Name: string;

		Width: number;

		Height: number;

		SetPlaceHolderGraphic(PlaceHolderGraphic: string): void;

		Commit(): void;

		Revert(): void;

	}

	interface WebComponentWindowExternal {
		readonly InterfaceVersion: number;

		readonly ApplicationName: string;

		readonly ApplicationVersion: number;

		readonly Application: any;

		CloseWindow(): void;

		readonly WebComponent: WebComponent;

	}

	interface WebComponentFormat {
		readonly Application: any;

		readonly Parent: any;

		URL: string;

		HTML: string;

		Name: string;

		Width: number;

		Height: number;

		PreviewGraphic: string;

		LaunchPropertiesWindow(): void;

	}

	interface LicWizExternal {
		PrintHtmlDocument(punkHtmlDoc: any): void;

		InvokeDateTimeApplet(): void;

		/**
		 * @param pFormat 默认值为 ""
		 */
		FormatDate(date: string, pFormat?: string): string;

		ShowHelp(pvarId?: any): void;

		Terminate(): void;

		DisableVORWReminder(BPC: number): void;

		SaveReceipt(bstrReceipt: string): string;

		OpenInDefaultBrowser(bstrUrl: string): void;

		MsoAlert(bstrText: string, bstrButtons: string, bstrIcon: string): number;

		DepositPidKey(bstrKey: string, fMORW: number): number;

		WriteLog(bstrMessage: string): void;

		ResignDpc(bstrProductCode: string): void;

		ResetPID(): void;

		SetDialogSize(dx: number, dy: number): void;

		VerifyClock(lMode: number): number;

		SortSelectOptions(pdispSelect: any): void;

		InternetDisconnect(): void;

		GetConnectedState(): number;

		readonly Context: number;

		readonly Validator: any;

		readonly LicAgent: any;

		readonly CountryInfo: string;

		set WizardVisible(arg1: number);

		set WizardTitle(arg1: string);

		readonly AnimationEnabled: number;

		set CurrentHelpId(arg1: number);

		readonly OfficeOnTheWebUrl: string;

	}

	interface LicValidator {
		readonly Products: any;

		Selection: number;

	}

	interface LicAgent {
		Initialize(dwBPC: number, dwMode: number, bstrLicSource: string): number;

		GetFirstName(): string;

		SetFirstName(bstrNewVal: string): void;

		GetLastName(): string;

		SetLastName(bstrNewVal: string): void;

		GetOrgName(): string;

		SetOrgName(bstrNewVal: string): void;

		GetEmail(): string;

		SetEmail(bstrNewVal: string): void;

		GetPhone(): string;

		SetPhone(bstrNewVal: string): void;

		GetAddress1(): string;

		SetAddress1(bstrNewVal: string): void;

		GetCity(): string;

		SetCity(bstrNewVal: string): void;

		GetState(): string;

		SetState(bstrNewVal: string): void;

		GetCountryCode(): string;

		SetCountryCode(bstrNewVal: string): void;

		GetCountryDesc(): string;

		SetCountryDesc(bstrNewVal: string): void;

		GetZip(): string;

		SetZip(bstrNewVal: string): void;

		GetIsoLanguage(): number;

		SetIsoLanguage(dwNewVal: number): void;

		GetMSUpdate(): string;

		SetMSUpdate(bstrNewVal: string): void;

		GetMSOffer(): string;

		SetMSOffer(bstrNewVal: string): void;

		GetOtherOffer(): string;

		SetOtherOffer(bstrNewVal: string): void;

		GetAddress2(): string;

		SetAddress2(bstrNewVal: string): void;

		CheckSystemClock(): number;

		GetExistingExpiryDate(): string;

		GetNewExpiryDate(): string;

		GetBillingFirstName(): string;

		SetBillingFirstName(bstrNewVal: string): void;

		GetBillingLastName(): string;

		SetBillingLastName(bstrNewVal: string): void;

		GetBillingPhone(): string;

		SetBillingPhone(bstrNewVal: string): void;

		GetBillingAddress1(): string;

		SetBillingAddress1(bstrNewVal: string): void;

		GetBillingAddress2(): string;

		SetBillingAddress2(bstrNewVal: string): void;

		GetBillingCity(): string;

		SetBillingCity(bstrNewVal: string): void;

		GetBillingState(): string;

		SetBillingState(bstrNewVal: string): void;

		GetBillingCountryCode(): string;

		SetBillingCountryCode(bstrNewVal: string): void;

		GetBillingZip(): string;

		SetBillingZip(bstrNewVal: string): void;

		SaveBillingInfo(bSave: number): number;

		IsCCRenewalCountry(bstrCountryCode: string): number;

		GetVATLabel(bstrCountryCode: string): string;

		GetCCRenewalExpiryDate(): string;

		SetVATNumber(bstrVATNumber: string): void;

		SetCreditCardType(bstrCCCode: string): void;

		SetCreditCardNumber(bstrCCNumber: string): void;

		SetCreditCardExpiryYear(dwCCYear: number): void;

		SetCreditCardExpiryMonth(dwCCMonth: number): void;

		GetCreditCardCount(): number;

		GetCreditCardCode(dwIndex: number): string;

		GetCreditCardName(dwIndex: number): string;

		GetVATNumber(): string;

		GetCreditCardType(): string;

		GetCreditCardNumber(): string;

		GetCreditCardExpiryYear(): number;

		GetCreditCardExpiryMonth(): number;

		GetDisconnectOption(): number;

		SetDisconnectOption(bNewVal: number): void;

		AsyncProcessHandshakeRequest(bReviseCustInfo: number): void;

		AsyncProcessNewLicenseRequest(): void;

		AsyncProcessReissueLicenseRequest(): void;

		AsyncProcessRetailRenewalLicenseRequest(): void;

		AsyncProcessReviseCustInfoRequest(): void;

		AsyncProcessCCRenewalPriceRequest(): void;

		AsyncProcessCCRenewalLicenseRequest(): void;

		GetAsyncProcessReturnCode(): number;

		IsUpgradeAvailable(): number;

		WantUpgrade(bWantUpgrade: number): void;

		AsyncProcessDroppedLicenseRequest(): void;

		GenerateInstallationId(): string;

		DepositConfirmationId(bstrVal: string): number;

		VerifyCheckDigits(bstrCIDIID: string): number;

		GetCurrentExpiryDate(): string;

		CancelAsyncProcessRequest(bIsLicenseRequest: number): void;

		GetCurrencyDescription(dwCurrencyIndex: number): string;

		GetPriceItemCount(): number;

		GetPriceItemLabel(dwIndex: number): string;

		GetPriceItemValue(dwCurrencyIndex: number, dwIndex: number): string;

		GetInvoiceText(): string;

		GetBackendErrorMsg(): string;

		GetCurrencyOption(): number;

		SetCurrencyOption(dwCurrencyOption: number): void;

		GetEndOfLifeHtmlText(): string;

		DisplaySSLCert(): number;

	}

	interface MsoEServicesDialog {
		/**
		 * @param ApplyWebComponentChanges 默认值为 false
		 */
		Close(ApplyWebComponentChanges?: boolean): void;

		AddTrustedDomain(Domain: string): void;

		readonly ApplicationName: string;

		readonly Application: any;

		readonly WebComponent: any;

		readonly ClipArt: any;

	}

	interface WebComponentProperties {
		readonly Shape: any;

		Name: string;

		URL: string;

		HTML: string;

		PreviewGraphic: string;

		PreviewHTML: string;

		Width: number;

		Height: number;

		Tag: string;

	}

	interface SmartDocument {
		readonly Application: any;

		readonly Creator: number;

		SolutionID: string;

		SolutionURL: string;

		/**
		 * @param ConsiderAllSchemas 默认值为 false
		 */
		PickSolution(ConsiderAllSchemas?: boolean): void;

		RefreshPane(): void;

	}

	interface SharedWorkspaceMember {
		readonly Application: any;

		readonly Creator: number;

		readonly DomainName: string;

		readonly Name: string;

		readonly Email: string;

		Delete(): void;

		readonly Id: string;

		readonly Parent: any;

	}

	interface SharedWorkspaceMembers {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SharedWorkspaceMember;

		readonly Count: number;

		Add(Email: string, DomainName: string, DisplayName: string, Role?: any): SharedWorkspaceMember;

		readonly Parent: any;

		readonly ItemCountExceeded: boolean;

	}

	interface SharedWorkspaceTask {
		readonly Application: any;

		readonly Creator: number;

		Title: string;

		AssignedTo: string;

		Status: MsoSharedWorkspaceTaskStatus;

		Priority: MsoSharedWorkspaceTaskPriority;

		Description: string;

		DueDate: any;

		readonly CreatedBy: string;

		readonly CreatedDate: any;

		readonly ModifiedBy: string;

		readonly ModifiedDate: any;

		Save(): void;

		Delete(): void;

		readonly Parent: any;

	}

	interface SharedWorkspaceTasks {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SharedWorkspaceTask;

		readonly Count: number;

		Add(Title: string, Status?: any, Priority?: any, Assignee?: any, Description?: any, DueDate?: any): SharedWorkspaceTask;

		readonly Parent: any;

		readonly ItemCountExceeded: boolean;

	}

	interface SharedWorkspaceFile {
		readonly Application: any;

		readonly Creator: number;

		readonly URL: string;

		readonly CreatedBy: string;

		readonly CreatedDate: any;

		readonly ModifiedBy: string;

		readonly ModifiedDate: any;

		Delete(): void;

		readonly Parent: any;

	}

	interface SharedWorkspaceFiles {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SharedWorkspaceFile;

		readonly Count: number;

		Add(FileName: string, ParentFolder?: any, OverwriteIfFileAlreadyExists?: any, KeepInSync?: any): SharedWorkspaceFile;

		readonly Parent: any;

		readonly ItemCountExceeded: boolean;

	}

	interface SharedWorkspaceFolder {
		readonly Application: any;

		readonly Creator: number;

		readonly FolderName: string;

		Delete(DeleteEventIfFolderContainsFiles?: any): void;

		readonly Parent: any;

	}

	interface SharedWorkspaceFolders {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SharedWorkspaceFolder;

		readonly Count: number;

		Add(FolderName: string, ParentFolder?: any): SharedWorkspaceFolder;

		readonly Parent: any;

		readonly ItemCountExceeded: boolean;

	}

	interface SharedWorkspaceLink {
		readonly Application: any;

		readonly Creator: number;

		URL: string;

		Description: string;

		Notes: string;

		readonly CreatedBy: string;

		readonly CreatedDate: any;

		readonly ModifiedBy: string;

		readonly ModifiedDate: any;

		Save(): void;

		Delete(): void;

		readonly Parent: any;

	}

	interface SharedWorkspaceLinks {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): SharedWorkspaceLink;

		readonly Count: number;

		Add(URL: string, Description?: any, Notes?: any): SharedWorkspaceLink;

		readonly Parent: any;

		readonly ItemCountExceeded: boolean;

	}

	interface SharedWorkspace {
		readonly Application: any;

		readonly Creator: number;

		Name: string;

		readonly Members: SharedWorkspaceMembers;

		readonly Tasks: SharedWorkspaceTasks;

		readonly Files: SharedWorkspaceFiles;

		readonly Folders: SharedWorkspaceFolders;

		readonly Links: SharedWorkspaceLinks;

		Refresh(): void;

		CreateNew(URL?: any, Name?: any): void;

		Delete(): void;

		readonly Parent: any;

		readonly URL: string;

		readonly Connected: boolean;

		readonly LastRefreshed: any;

		SourceURL: string;

		RemoveDocument(): void;

		Disconnect(): void;

	}

	interface Sync {
		readonly Application: any;

		readonly Creator: number;

		readonly Status: MsoSyncStatusType;

		readonly WorkspaceLastChangedBy: string;

		readonly LastSyncTime: any;

		readonly ErrorType: MsoSyncErrorType;

		GetUpdate(): void;

		PutUpdate(): void;

		OpenVersion(SyncVersionType: MsoSyncVersionType): void;

		ResolveConflict(SyncConflictResolution: MsoSyncConflictResolutionType): void;

		Unsuspend(): void;

		readonly Parent: any;

	}

	interface DocumentLibraryVersion {
		readonly Application: any;

		readonly Creator: number;

		readonly Modified: any;

		readonly Index: number;

		readonly Parent: any;

		readonly ModifiedBy: string;

		readonly Comments: string;

		Delete(): void;

		Open(): any;

		Restore(): any;

	}

	interface DocumentLibraryVersions {
		readonly Application: any;

		readonly Creator: number;

		Item(lIndex: number): DocumentLibraryVersion;

		readonly Count: number;

		readonly Parent: any;

		readonly IsVersioningEnabled: boolean;

	}

	interface UserPermission {
		readonly Application: any;

		readonly Creator: number;

		readonly UserId: string;

		Permission: number;

		ExpirationDate: any;

		readonly Parent: any;

		Remove(): void;

	}

	interface Permission {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): UserPermission;

		readonly Count: number;

		EnableTrustedBrowser: boolean;

		Add(UserId: string, Permission?: any, ExpirationDate?: any): UserPermission;

		ApplyPolicy(FileName: string): void;

		readonly Parent: any;

		RemoveAll(): void;

		Enabled: boolean;

		RequestPermissionURL: string;

		readonly PolicyName: string;

		readonly PolicyDescription: string;

		StoreLicenses: boolean;

		DocumentAuthor: string;

		readonly PermissionFromPolicy: boolean;

	}

	interface MsoDebugOptions_UTRunResult {
		readonly Application: any;

		readonly Creator: number;

		readonly Passed: boolean;

		readonly ErrorString: string;

	}

	interface MsoDebugOptions_UT {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly CollectionName: string;

		Run(): MsoDebugOptions_UTRunResult;

	}

	interface MsoDebugOptions_UTs {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): MsoDebugOptions_UT;

		readonly Count: number;

		GetUnitTestsInCollection(bstrCollectionName: string): MsoDebugOptions_UTs;

		GetUnitTest(bstrCollectionName: string, bstrUnitTestName: string): MsoDebugOptions_UT;

		GetMatchingUnitTestsInCollection(bstrCollectionName: string, bstrUnitTestNameFilter: string): MsoDebugOptions_UTs;

	}

	interface MsoDebugOptions_UTManager {
		readonly Application: any;

		readonly Creator: number;

		readonly UnitTests: MsoDebugOptions_UTs;

		NotifyStartOfTestSuiteRun(): void;

		NotifyEndOfTestSuiteRun(): void;

		ReportErrors: boolean;

	}

	interface MetaProperty {
		readonly Application: any;

		readonly Creator: number;

		Value: any;

		readonly Name: string;

		readonly Id: string;

		readonly IsReadOnly: boolean;

		readonly IsRequired: boolean;

		readonly Type: MsoMetaPropertyType;

		Validate(): string;

		readonly ValidationError: string;

		readonly Parent: any;

	}

	interface MetaProperties {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): MetaProperty;

		GetItemByInternalName(InternalName: string): MetaProperty;

		readonly Count: number;

		Validate(): string;

		readonly ValidationError: string;

		readonly Parent: any;

		readonly SchemaXml: string;

	}

	interface PolicyItem {
		readonly Application: any;

		readonly Creator: number;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly Data: string;

		readonly Parent: any;

	}

	interface ServerPolicy {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): PolicyItem;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly Statement: string;

		readonly Count: number;

		readonly BlockPreview: boolean;

		readonly Parent: any;

	}

	interface DocumentInspector {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Description: string;

		Inspect(): {Status: MsoDocInspectorStatus, Results: string};

		Fix(): {Status: MsoDocInspectorStatus, Results: string};

		readonly Parent: any;

	}

	interface DocumentInspectors {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): DocumentInspector;

		readonly Count: number;

		readonly Parent: any;

	}

	interface WorkflowTask {
		readonly Application: any;

		readonly Creator: number;

		readonly Id: string;

		readonly ListID: string;

		readonly WorkflowID: string;

		readonly Name: string;

		readonly Description: string;

		readonly AssignedTo: string;

		readonly CreatedBy: string;

		readonly DueDate: string;

		readonly CreatedDate: string;

		Show(): number;

	}

	interface WorkflowTasks {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): WorkflowTask;

		readonly Count: number;

	}

	interface WorkflowTemplate {
		readonly Application: any;

		readonly Creator: number;

		readonly Id: string;

		readonly Name: string;

		readonly Description: string;

		readonly DocumentLibraryName: string;

		readonly DocumentLibraryURL: string;

		Show(): number;

	}

	interface WorkflowTemplates {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): WorkflowTemplate;

		readonly Count: number;

	}

	interface CustomXMLPrefixMapping {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Prefix: string;

		readonly NamespaceURI: string;

	}

	interface CustomXMLPrefixMappings {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): CustomXMLPrefixMapping;

		AddNamespace(Prefix: string, NamespaceURI: string): void;

		LookupNamespace(Prefix: string): string;

		LookupPrefix(NamespaceURI: string): string;

	}

	interface CustomXMLSchema {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Location: string;

		readonly NamespaceURI: string;

		Delete(): void;

		Reload(): void;

	}

	interface CustomXMLSchemaCollection {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): CustomXMLSchema;

		NamespaceURI(Index: number): string;

		/**
		 * @param NamespaceURI 默认值为 ""
		 * @param Alias 默认值为 ""
		 * @param FileName 默认值为 ""
		 * @param InstallForAllUsers 默认值为 false
		 */
		Add(NamespaceURI?: string, Alias?: string, FileName?: string, InstallForAllUsers?: boolean): CustomXMLSchema;

		AddCollection(SchemaCollection: CustomXMLSchemaCollection): void;

		Validate(): boolean;

	}

	interface CustomXMLNodes {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): CustomXMLNode;

	}

	interface CustomXMLNode {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Attributes: CustomXMLNodes;

		readonly BaseName: string;

		readonly ChildNodes: CustomXMLNodes;

		readonly FirstChild: CustomXMLNode;

		readonly LastChild: CustomXMLNode;

		readonly NamespaceURI: string;

		readonly NextSibling: CustomXMLNode;

		readonly NodeType: MsoCustomXMLNodeType;

		NodeValue: string;

		readonly OwnerDocument: any;

		readonly OwnerPart: CustomXMLPart;

		readonly PreviousSibling: CustomXMLNode;

		readonly ParentNode: CustomXMLNode;

		Text: string;

		readonly XPath: string;

		readonly XML: string;

		/**
		 * @param Name 默认值为 ""
		 * @param NamespaceURI 默认值为 ""
		 * @param NodeType 默认值为 1
		 * @param NodeValue 默认值为 ""
		 */
		AppendChildNode(Name?: string, NamespaceURI?: string, NodeType?: MsoCustomXMLNodeType, NodeValue?: string): void;

		AppendChildSubtree(XML: string): void;

		Delete(): void;

		HasChildNodes(): boolean;

		/**
		 * @param Name 默认值为 ""
		 * @param NamespaceURI 默认值为 ""
		 * @param NodeType 默认值为 1
		 * @param NodeValue 默认值为 ""
		 * @param NextSibling 默认值为 null
		 */
		InsertNodeBefore(Name?: string, NamespaceURI?: string, NodeType?: MsoCustomXMLNodeType, NodeValue?: string, NextSibling?: CustomXMLNode): void;

		/**
		 * @param NextSibling 默认值为 null
		 */
		InsertSubtreeBefore(XML: string, NextSibling?: CustomXMLNode): void;

		RemoveChild(Child: CustomXMLNode): void;

		/**
		 * @param Name 默认值为 ""
		 * @param NamespaceURI 默认值为 ""
		 * @param NodeType 默认值为 1
		 * @param NodeValue 默认值为 ""
		 */
		ReplaceChildNode(OldNode: CustomXMLNode, Name?: string, NamespaceURI?: string, NodeType?: MsoCustomXMLNodeType, NodeValue?: string): void;

		ReplaceChildSubtree(XML: string, OldNode: CustomXMLNode): void;

		SelectNodes(XPath: string): CustomXMLNodes;

		SelectSingleNode(XPath: string): CustomXMLNode;

	}

	interface CustomXMLPart {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly DocumentElement: CustomXMLNode;

		readonly Id: string;

		readonly NamespaceURI: string;

		SchemaCollection: CustomXMLSchemaCollection;

		readonly NamespaceManager: CustomXMLPrefixMappings;

		readonly XML: string;

		/**
		 * @param Name 默认值为 ""
		 * @param NamespaceURI 默认值为 ""
		 * @param NextSibling 默认值为 null
		 * @param NodeType 默认值为 1
		 * @param NodeValue 默认值为 ""
		 */
		AddNode(Parent: CustomXMLNode, Name?: string, NamespaceURI?: string, NextSibling?: CustomXMLNode, NodeType?: MsoCustomXMLNodeType, NodeValue?: string): void;

		Delete(): void;

		Load(FilePath: string): boolean;

		LoadXML(XML: string): boolean;

		SelectNodes(XPath: string): CustomXMLNodes;

		SelectSingleNode(XPath: string): CustomXMLNode;

		readonly Errors: CustomXMLValidationErrors;

		readonly BuiltIn: boolean;

	}

	interface CustomXMLValidationErrors {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): CustomXMLValidationError;

		/**
		 * @param ErrorText 默认值为 ""
		 * @param ClearedOnUpdate 默认值为 true
		 */
		Add(Node: CustomXMLNode, ErrorName: string, ErrorText?: string, ClearedOnUpdate?: boolean): void;

	}

	interface CustomXMLValidationError {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Name: string;

		readonly Node: CustomXMLNode;

		readonly Text: string;

		readonly Type: MsoCustomXMLValidationErrorType;

		Delete(): void;

		readonly ErrorCode: number;

	}

	interface CustomXMLParts {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): CustomXMLPart;

		/**
		 * @param XML 默认值为 ""
		 */
		Add(XML?: string, SchemaCollection?: any): CustomXMLPart;

		SelectByID(Id: string): CustomXMLPart;

		SelectByNamespace(NamespaceURI: string): CustomXMLParts;

	}

	interface ThemeColor {
		readonly Application: any;

		readonly Creator: number;

		RGB: number;

		readonly Parent: any;

		readonly ThemeColorSchemeIndex: MsoThemeColorSchemeIndex;

	}

	interface ThemeColorScheme {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Colors(Index: MsoThemeColorSchemeIndex): ThemeColor;

		Load(FileName: string): void;

		Save(FileName: string): void;

		GetCustomColor(Name: string): number;

	}

	interface ThemeFont {
		readonly Application: any;

		readonly Creator: number;

		Name: string;

		readonly Parent: any;

	}

	interface ThemeFonts {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly Count: number;

		Item(Index: MsoFontLanguageIndex): ThemeFont;

	}

	interface ThemeFontScheme {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Load(FileName: string): void;

		Save(FileName: string): void;

		readonly MinorFont: ThemeFonts;

		readonly MajorFont: ThemeFonts;

	}

	interface ThemeEffectScheme {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		Load(FileName: string): void;

	}

	interface OfficeTheme {
		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

		readonly ThemeColorScheme: ThemeColorScheme;

		readonly ThemeFontScheme: ThemeFontScheme;

		readonly ThemeEffectScheme: ThemeEffectScheme;

	}

	interface CustomTaskPane {
		readonly Title: string;

		readonly Application: any;

		readonly Window: any;

		Visible: boolean;

		readonly ContentControl: any;

		Height: number;

		Width: number;

		DockPosition: MsoCTPDockPosition;

		DockPositionRestrict: MsoCTPDockPositionRestrict;

		Delete(): void;

	}

	interface CTPFactory {
		CreateCTP(CTPAxID: string, CTPTitle: string, CTPParentWindow?: any): CustomTaskPane;

	}

	interface CustomTaskPaneConsumer {
		CTPFactoryAvailable(CTPFactoryInst: CTPFactory): void;

	}

	interface RibbonUI {
		Invalidate(): void;

		InvalidateControl(ControlID: string): void;

		InvalidateControlMso(ControlID: string): void;

		ActivateTab(ControlID: string): void;

		ActivateTabMso(ControlID: string): void;

		ActivateTabQ(ControlID: string, Namespace: string): void;

	}

	interface RibbonControl {
		readonly Id: string;

		readonly Context: any;

		readonly Tag: string;

	}

	interface RibbonExtensibility {
		GetCustomUI(RibbonID: string): string;

	}

	interface Assistance {
		/**
		 * @param HelpId 默认值为 ""
		 * @param Scope 默认值为 ""
		 */
		ShowHelp(HelpId?: string, Scope?: string): void;

		/**
		 * @param Scope 默认值为 ""
		 */
		SearchHelp(Query: string, Scope?: string): void;

		SetDefaultContext(HelpId: string): void;

		ClearDefaultContext(HelpId: string): void;

	}

	interface MsoLeaderLines {
		Select(): void;

		readonly Border: MsoBorder;

		Delete(): void;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface GridLines {
		readonly Name: string;

		Select(): any;

		readonly Parent: any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface LegendEntries {
		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): LegendEntry;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: any): LegendEntry;

	}

	interface LegendEntry {
		readonly Parent: any;

		Delete(): any;

		readonly Font: ChartFont;

		readonly Index: number;

		readonly LegendKey: MsoLegendKey;

		Select(): any;

		AutoScaleFont: any;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoLegendKey {
		readonly Parent: any;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		Delete(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: XlColorIndex;

		MarkerSize: number;

		MarkerStyle: XlMarkerStyle;

		PictureType: number;

		PictureUnit: number;

		Select(): any;

		Smooth: boolean;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		Shadow: boolean;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		PictureUnit2: number;

	}

	interface SeriesCollection {
		readonly Parent: any;

		/**
		 * @param Rowcol 默认值为 2
		 */
		Add(Source: any, Rowcol?: XlRowCol, SeriesLabels?: any, CategoryLabels?: any, Replace?: any): MsoSeries;

		readonly Count: number;

		Extend(Source: any, Rowcol?: any, CategoryLabels?: any): any;

		Item(Index: any): MsoSeries;

		/**
		 * @param Rowcol 默认值为 2
		 */
		Paste(Rowcol?: XlRowCol, SeriesLabels?: any, CategoryLabels?: any, Replace?: any, NewSeries?: any): any;

		NewSeries(): MsoSeries;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: any): MsoSeries;

	}

	interface MsoSeries {
		readonly Parent: any;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any): any;

		AxisGroup: XlAxisGroup;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		Copy(): any;

		DataLabels(Index?: any): any;

		Delete(): any;

		ErrorBar(Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount?: any, MinusValues?: any): any;

		readonly ErrorBars: MsoErrorBars;

		Explosion: number;

		Formula: string;

		FormulaLocal: string;

		FormulaR1C1: string;

		FormulaR1C1Local: string;

		HasDataLabels: boolean;

		HasErrorBars: boolean;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: XlColorIndex;

		MarkerSize: number;

		MarkerStyle: XlMarkerStyle;

		Name: string;

		Paste(): any;

		PictureType: XlChartPictureType;

		PictureUnit: number;

		PlotOrder: number;

		Points(Index?: any): any;

		Select(): any;

		Smooth: boolean;

		Trendlines(Index?: any): any;

		Type: number;

		ChartType: XlChartType;

		ApplyCustomType(ChartType: XlChartType): void;

		Values: any;

		XValues: any;

		BubbleSizes: any;

		BarShape: XlBarShape;

		ApplyPictToSides: boolean;

		ApplyPictToFront: boolean;

		ApplyPictToEnd: boolean;

		Has3DEffect: boolean;

		Shadow: boolean;

		HasLeaderLines: boolean;

		readonly LeaderLines: MsoLeaderLines;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): any;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		PictureUnit2: number;

		readonly PlotColorIndex: number;

		InvertColor: number;

		InvertColorIndex: XlColorIndex;

		IsFiltered: boolean;

	}

	interface MsoErrorBars {
		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: MsoBorder;

		Delete(): any;

		ClearFormats(): any;

		EndStyle: XlEndStyleCap;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoTrendline {
		readonly Parent: any;

		Backward: number;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		readonly DataLabel: MsoDataLabel;

		Delete(): any;

		DisplayEquation: boolean;

		DisplayRSquared: boolean;

		Forward: number;

		readonly Index: number;

		Intercept: number;

		InterceptIsAuto: boolean;

		Name: string;

		NameIsAuto: boolean;

		Order: number;

		Period: number;

		Select(): any;

		Type: XlTrendlineType;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		Backward2: number;

		Forward2: number;

	}

	interface MsoDataLabel {
		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Caption: string;

		Characters(Start?: any, Length?: any): MsoCharacters;

		readonly Font: ChartFont;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		AutoText: boolean;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		ShowLegendKey: boolean;

		Type: any;

		Position: XlDataLabelPosition;

		ShowSeriesName: boolean;

		ShowCategoryName: boolean;

		ShowValue: boolean;

		ShowPercentage: boolean;

		ShowBubbleSize: boolean;

		Separator: any;

		readonly Format: MsoChartFormat;

		readonly _Height: number;

		readonly Application: any;

		readonly Creator: number;

		readonly _Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

		ShowRange: boolean;

		Height: number;

		Width: number;

	}

	interface Trendlines {
		readonly Parent: any;

		/**
		 * @param Type 默认值为 -4132
		 */
		Add(Type?: XlTrendlineType, Order?: any, Period?: any, Forward?: any, Backward?: any, Intercept?: any, DisplayEquation?: any, DisplayRSquared?: any, Name?: any): MsoTrendline;

		readonly Count: number;

		Item(Index?: any): MsoTrendline;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index?: any): MsoTrendline;

	}

	interface MsoDataLabels {
		readonly Parent: any;

		readonly Name: string;

		Select(): any;

		readonly Border: MsoBorder;

		Delete(): any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Characters(Start?: any, Length?: any): MsoCharacters;

		readonly Font: ChartFont;

		HorizontalAlignment: any;

		Orientation: any;

		Shadow: boolean;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		AutoText: boolean;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		ShowLegendKey: boolean;

		Type: any;

		Position: XlDataLabelPosition;

		ShowSeriesName: boolean;

		ShowCategoryName: boolean;

		ShowValue: boolean;

		ShowPercentage: boolean;

		ShowBubbleSize: boolean;

		Separator: any;

		readonly Count: number;

		Item(Index: any): MsoDataLabel;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: any): MsoDataLabel;

		Propagate(Index: any): void;

		ShowRange: boolean;

	}

	interface Points {
		readonly Parent: any;

		readonly Count: number;

		Item(Index: number): ChartPoint;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: number): ChartPoint;

	}

	interface ChartPoint {
		readonly Parent: any;

		/**
		 * @param Type 默认值为 2
		 */
		_ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any): any;

		readonly Border: MsoBorder;

		ClearFormats(): any;

		Copy(): any;

		readonly DataLabel: MsoDataLabel;

		Delete(): any;

		Explosion: number;

		HasDataLabel: boolean;

		readonly Interior: MsoInterior;

		InvertIfNegative: boolean;

		MarkerBackgroundColor: number;

		MarkerBackgroundColorIndex: XlColorIndex;

		MarkerForegroundColor: number;

		MarkerForegroundColorIndex: XlColorIndex;

		MarkerSize: number;

		MarkerStyle: XlMarkerStyle;

		Paste(): any;

		PictureType: XlChartPictureType;

		PictureUnit: number;

		Select(): any;

		ApplyPictToSides: boolean;

		ApplyPictToFront: boolean;

		ApplyPictToEnd: boolean;

		Shadow: boolean;

		SecondaryPlot: boolean;

		readonly Fill: ChartFillFormat;

		/**
		 * @param Type 默认值为 2
		 */
		ApplyDataLabels(Type?: XlDataLabelsType, IMsoLegendKey?: any, AutoText?: any, HasLeaderLines?: any, ShowSeriesName?: any, ShowCategoryName?: any, ShowValue?: any, ShowPercentage?: any, ShowBubbleSize?: any, Separator?: any): any;

		Has3DEffect: boolean;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		PictureUnit2: number;

		readonly Name: string;

		readonly Height: number;

		readonly Width: number;

		readonly Left: number;

		readonly Top: number;

		/**
		 * @param Index 默认值为 2
		 */
		PieSliceLocation(loc: XlPieSliceLocation, Index?: XlPieSliceIndex): number;

	}

	interface Axes {
		readonly Count: number;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		Item(Type: XlAxisType, AxisGroup?: XlAxisGroup): MsoAxis;

		readonly Application: any;

		readonly Creator: number;

		/**
		 * @param AxisGroup 默认值为 1
		 */
		_Default(Type: XlAxisType, AxisGroup?: XlAxisGroup): MsoAxis;

		readonly Parent: any;

	}

	interface MsoAxis {
		AxisBetweenCategories: boolean;

		readonly AxisGroup: XlAxisGroup;

		readonly AxisTitle: MsoAxisTitle;

		CategoryNames: any;

		Crosses: XlAxisCrosses;

		CrossesAt: number;

		Delete(): any;

		HasMajorGridlines: boolean;

		HasMinorGridlines: boolean;

		HasTitle: boolean;

		readonly MajorGridlines: GridLines;

		MajorTickMark: XlTickMark;

		MajorUnit: number;

		LogBase: number;

		TickLabelSpacingIsAuto: boolean;

		MajorUnitIsAuto: boolean;

		MaximumScale: number;

		MaximumScaleIsAuto: boolean;

		MinimumScale: number;

		MinimumScaleIsAuto: boolean;

		readonly MinorGridlines: GridLines;

		MinorTickMark: XlTickMark;

		MinorUnit: number;

		MinorUnitIsAuto: boolean;

		ReversePlotOrder: boolean;

		ScaleType: XlScaleType;

		Select(): any;

		TickLabelPosition: XlTickLabelPosition;

		readonly TickLabels: MsoTickLabels;

		TickLabelSpacing: number;

		TickMarkSpacing: number;

		Type: XlAxisType;

		BaseUnit: XlTimeUnit;

		BaseUnitIsAuto: boolean;

		MajorUnitScale: XlTimeUnit;

		MinorUnitScale: XlTimeUnit;

		CategoryType: XlCategoryType;

		readonly Left: number;

		readonly Top: number;

		readonly Width: number;

		readonly Height: number;

		DisplayUnit: XlDisplayUnit;

		DisplayUnitCustom: number;

		HasDisplayUnitLabel: boolean;

		readonly DisplayUnitLabel: MsoDisplayUnitLabel;

		readonly Border: MsoBorder;

		readonly Name: string;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

		readonly Parent: any;

	}

	interface MsoAxisTitle {
		Caption: string;

		Characters(Start?: any, Length?: any): MsoCharacters;

		readonly Font: ChartFont;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Delete(): any;

		readonly Border: MsoBorder;

		readonly Name: string;

		readonly Parent: any;

		Select(): any;

		IncludeInLayout: boolean;

		Position: XlChartElementPosition;

		readonly Format: MsoChartFormat;

		readonly Height: number;

		readonly Application: any;

		readonly Creator: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface MsoTickLabels {
		readonly Parent: any;

		Delete(): any;

		readonly Font: ChartFont;

		readonly Name: string;

		NumberFormat: string;

		NumberFormatLinked: boolean;

		NumberFormatLocal: any;

		Orientation: XlTickLabelOrientation;

		Select(): any;

		ReadingOrder: number;

		AutoScaleFont: any;

		readonly Depth: number;

		Offset: number;

		Alignment: number;

		MultiLevel: boolean;

		readonly Format: MsoChartFormat;

		readonly Application: any;

		readonly Creator: number;

	}

	interface MsoDisplayUnitLabel {
		Caption: string;

		Characters(Start?: any, Length?: any): MsoCharacters;

		readonly Font: ChartFont;

		HorizontalAlignment: any;

		Left: number;

		Orientation: any;

		Shadow: boolean;

		Text: string;

		Top: number;

		VerticalAlignment: any;

		ReadingOrder: number;

		AutoScaleFont: any;

		readonly Interior: MsoInterior;

		readonly Fill: ChartFillFormat;

		Delete(): any;

		readonly Border: MsoBorder;

		readonly Name: string;

		readonly Parent: any;

		Select(): any;

		IncludeInLayout: boolean;

		Position: XlChartElementPosition;

		readonly Format: MsoChartFormat;

		readonly Height: number;

		readonly Application: any;

		readonly Creator: number;

		readonly Width: number;

		Formula: string;

		FormulaR1C1: string;

		FormulaLocal: string;

		FormulaR1C1Local: string;

	}

	interface MsoHyperlinks {
	}

	interface ChartGroups {
		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): MsoChartGroup;

		readonly Application: any;

		readonly Creator: number;

	}

	interface SmartArtLayouts {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): SmartArtLayout;

		readonly Parent: any;

		readonly Count: number;

	}

	interface SmartArtQuickStyles {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): SmartArtQuickStyle;

		readonly Parent: any;

		readonly Count: number;

	}

	interface SmartArtColors {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: any): SmartArtColor;

		readonly Parent: any;

		readonly Count: number;

	}

	interface PickerField {
		readonly Application: any;

		readonly Creator: number;

		readonly Name: string;

		readonly Type: MsoPickerField;

		readonly IsHidden: boolean;

	}

	interface PickerFields {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): PickerField;

		readonly Count: number;

	}

	interface PickerProperty {
		readonly Application: any;

		readonly Creator: number;

		readonly Id: string;

		readonly Value: any;

		readonly Type: MsoPickerField;

	}

	interface PickerProperties {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): PickerProperty;

		readonly Count: number;

		Add(Id: string, Value: string, Type: MsoPickerField): PickerProperty;

		Remove(Id: string): void;

	}

	interface PickerResult {
		readonly Application: any;

		readonly Creator: number;

		readonly Id: string;

		DisplayName: string;

		Type: string;

		SIPId: string;

		ItemData: any;

		SubItems: any;

		readonly DuplicateResults: any;

		Fields: PickerFields;

	}

	interface PickerResults {
		readonly Application: any;

		readonly Creator: number;

		Item(Index: number): PickerResult;

		readonly Count: number;

		/**
		 * @param SIPId 默认值为 ""
		 */
		Add(Id: string, DisplayName: string, Type: string, SIPId?: string, ItemData?: any, SubItems?: any): PickerResult;

	}

	interface PickerDialog {
		readonly Application: any;

		readonly Creator: number;

		DataHandlerId: string;

		Title: string;

		readonly Properties: PickerProperties;

		CreatePickerResults(): PickerResults;

		/**
		 * @param IsMultiSelect 默认值为 true
		 * @param ExistingResults 默认值为 null
		 */
		Show(IsMultiSelect?: boolean, ExistingResults?: PickerResults): PickerResults;

		Resolve(TokenText: string, duplicateDlgMode: number): PickerResults;

	}

	interface MsoContactCard {
		readonly Application: any;

		readonly Creator: number;

		readonly Address: string;

		readonly AddressType: MsoContactCardAddressType;

		readonly CardType: MsoContactCardType;

		readonly Parent: any;

	}

	interface ContactCard {
		readonly Application: any;

		readonly Creator: number;

		Close(): void;

		/**
		 * @param ShowWithDelay 默认值为 false
		 */
		Show(CardStyle: MsoContactCardStyle, RectangleLeft: number, RectangleRight: number, RectangleTop: number, RectangleBottom: number, HorizontalPosition: number, ShowWithDelay?: boolean): void;

	}

	interface FullSeriesCollection {
		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): MsoSeries;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: any): MsoSeries;

	}

	interface MsoCategory {
		readonly Parent: any;

		readonly Name: string;

		IsFiltered: boolean;

	}

	interface CategoryCollection {
		readonly Parent: any;

		readonly Count: number;

		Item(Index: any): MsoCategory;

		readonly Application: any;

		readonly Creator: number;

		_Default(Index: any): MsoCategory;

	}

	enum MsoLineDashStyle {
		msoLineDashStyleMixed = -2,
		msoLineSolid = 1,
		msoLineSquareDot = 2,
		msoLineRoundDot = 3,
		msoLineDash = 4,
		msoLineDashDot = 5,
		msoLineDashDotDot = 6,
		msoLineLongDash = 7,
		msoLineLongDashDot = 8,
		msoLineLongDashDotDot = 9,
		msoLineSysDash = 10,
		msoLineSysDot = 11,
		msoLineSysDashDot = 12,
	}

	enum MsoLineStyle {
		msoLineStyleMixed = -2,
		msoLineSingle = 1,
		msoLineThinThin = 2,
		msoLineThinThick = 3,
		msoLineThickThin = 4,
		msoLineThickBetweenThin = 5,
	}

	enum MsoArrowheadStyle {
		msoArrowheadStyleMixed = -2,
		msoArrowheadNone = 1,
		msoArrowheadTriangle = 2,
		msoArrowheadOpen = 3,
		msoArrowheadStealth = 4,
		msoArrowheadDiamond = 5,
		msoArrowheadOval = 6,
	}

	enum MsoArrowheadWidth {
		msoArrowheadWidthMixed = -2,
		msoArrowheadNarrow = 1,
		msoArrowheadWidthMedium = 2,
		msoArrowheadWide = 3,
	}

	enum MsoArrowheadLength {
		msoArrowheadLengthMixed = -2,
		msoArrowheadShort = 1,
		msoArrowheadLengthMedium = 2,
		msoArrowheadLong = 3,
	}

	enum MsoFillType {
		msoFillMixed = -2,
		msoFillSolid = 1,
		msoFillPatterned = 2,
		msoFillGradient = 3,
		msoFillTextured = 4,
		msoFillBackground = 5,
		msoFillPicture = 6,
	}

	enum MsoGradientStyle {
		msoGradientMixed = -2,
		msoGradientHorizontal = 1,
		msoGradientVertical = 2,
		msoGradientDiagonalUp = 3,
		msoGradientDiagonalDown = 4,
		msoGradientFromCorner = 5,
		msoGradientFromTitle = 6,
		msoGradientFromCenter = 7,
	}

	enum MsoGradientColorType {
		msoGradientColorMixed = -2,
		msoGradientOneColor = 1,
		msoGradientTwoColors = 2,
		msoGradientPresetColors = 3,
		msoGradientMultiColor = 4,
	}

	enum MsoTextureType {
		msoTextureTypeMixed = -2,
		msoTexturePreset = 1,
		msoTextureUserDefined = 2,
	}

	enum MsoPresetTexture {
		msoPresetTextureMixed = -2,
		msoTexturePapyrus = 1,
		msoTextureCanvas = 2,
		msoTextureDenim = 3,
		msoTextureWovenMat = 4,
		msoTextureWaterDroplets = 5,
		msoTexturePaperBag = 6,
		msoTextureFishFossil = 7,
		msoTextureSand = 8,
		msoTextureGreenMarble = 9,
		msoTextureWhiteMarble = 10,
		msoTextureBrownMarble = 11,
		msoTextureGranite = 12,
		msoTextureNewsprint = 13,
		msoTextureRecycledPaper = 14,
		msoTextureParchment = 15,
		msoTextureStationery = 16,
		msoTextureBlueTissuePaper = 17,
		msoTexturePinkTissuePaper = 18,
		msoTexturePurpleMesh = 19,
		msoTextureBouquet = 20,
		msoTextureCork = 21,
		msoTextureWalnut = 22,
		msoTextureOak = 23,
		msoTextureMediumWood = 24,
	}

	enum MsoPatternType {
		msoPatternMixed = -2,
		msoPattern5Percent = 1,
		msoPattern10Percent = 2,
		msoPattern20Percent = 3,
		msoPattern25Percent = 4,
		msoPattern30Percent = 5,
		msoPattern40Percent = 6,
		msoPattern50Percent = 7,
		msoPattern60Percent = 8,
		msoPattern70Percent = 9,
		msoPattern75Percent = 10,
		msoPattern80Percent = 11,
		msoPattern90Percent = 12,
		msoPatternDarkHorizontal = 13,
		msoPatternDarkVertical = 14,
		msoPatternDarkDownwardDiagonal = 15,
		msoPatternDarkUpwardDiagonal = 16,
		msoPatternSmallCheckerBoard = 17,
		msoPatternTrellis = 18,
		msoPatternLightHorizontal = 19,
		msoPatternLightVertical = 20,
		msoPatternLightDownwardDiagonal = 21,
		msoPatternLightUpwardDiagonal = 22,
		msoPatternSmallGrid = 23,
		msoPatternDottedDiamond = 24,
		msoPatternWideDownwardDiagonal = 25,
		msoPatternWideUpwardDiagonal = 26,
		msoPatternDashedUpwardDiagonal = 27,
		msoPatternDashedDownwardDiagonal = 28,
		msoPatternNarrowVertical = 29,
		msoPatternNarrowHorizontal = 30,
		msoPatternDashedVertical = 31,
		msoPatternDashedHorizontal = 32,
		msoPatternLargeConfetti = 33,
		msoPatternLargeGrid = 34,
		msoPatternHorizontalBrick = 35,
		msoPatternLargeCheckerBoard = 36,
		msoPatternSmallConfetti = 37,
		msoPatternZigZag = 38,
		msoPatternSolidDiamond = 39,
		msoPatternDiagonalBrick = 40,
		msoPatternOutlinedDiamond = 41,
		msoPatternPlaid = 42,
		msoPatternSphere = 43,
		msoPatternWeave = 44,
		msoPatternDottedGrid = 45,
		msoPatternDivot = 46,
		msoPatternShingle = 47,
		msoPatternWave = 48,
		msoPatternHorizontal = 49,
		msoPatternVertical = 50,
		msoPatternCross = 51,
		msoPatternDownwardDiagonal = 52,
		msoPatternUpwardDiagonal = 53,
		msoPatternDiagonalCross = 54,
	}

	enum MsoPresetGradientType {
		msoPresetGradientMixed = -2,
		msoGradientEarlySunset = 1,
		msoGradientLateSunset = 2,
		msoGradientNightfall = 3,
		msoGradientDaybreak = 4,
		msoGradientHorizon = 5,
		msoGradientDesert = 6,
		msoGradientOcean = 7,
		msoGradientCalmWater = 8,
		msoGradientFire = 9,
		msoGradientFog = 10,
		msoGradientMoss = 11,
		msoGradientPeacock = 12,
		msoGradientWheat = 13,
		msoGradientParchment = 14,
		msoGradientMahogany = 15,
		msoGradientRainbow = 16,
		msoGradientRainbowII = 17,
		msoGradientGold = 18,
		msoGradientGoldII = 19,
		msoGradientBrass = 20,
		msoGradientChrome = 21,
		msoGradientChromeII = 22,
		msoGradientSilver = 23,
		msoGradientSapphire = 24,
	}

	enum MsoShadowType {
		msoShadowMixed = -2,
		msoShadow1 = 1,
		msoShadow2 = 2,
		msoShadow3 = 3,
		msoShadow4 = 4,
		msoShadow5 = 5,
		msoShadow6 = 6,
		msoShadow7 = 7,
		msoShadow8 = 8,
		msoShadow9 = 9,
		msoShadow10 = 10,
		msoShadow11 = 11,
		msoShadow12 = 12,
		msoShadow13 = 13,
		msoShadow14 = 14,
		msoShadow15 = 15,
		msoShadow16 = 16,
		msoShadow17 = 17,
		msoShadow18 = 18,
		msoShadow19 = 19,
		msoShadow20 = 20,
		msoShadow21 = 21,
		msoShadow22 = 22,
		msoShadow23 = 23,
		msoShadow24 = 24,
		msoShadow25 = 25,
		msoShadow26 = 26,
		msoShadow27 = 27,
		msoShadow28 = 28,
		msoShadow29 = 29,
		msoShadow30 = 30,
		msoShadow31 = 31,
		msoShadow32 = 32,
		msoShadow33 = 33,
		msoShadow34 = 34,
		msoShadow35 = 35,
		msoShadow36 = 36,
		msoShadow37 = 37,
		msoShadow38 = 38,
		msoShadow39 = 39,
		msoShadow40 = 40,
		msoShadow41 = 41,
		msoShadow42 = 42,
		msoShadow43 = 43,
	}

	enum MsoPresetTextEffect {
		msoTextEffectMixed = -2,
		msoTextEffect1 = 0,
		msoTextEffect2 = 1,
		msoTextEffect3 = 2,
		msoTextEffect4 = 3,
		msoTextEffect5 = 4,
		msoTextEffect6 = 5,
		msoTextEffect7 = 6,
		msoTextEffect8 = 7,
		msoTextEffect9 = 8,
		msoTextEffect10 = 9,
		msoTextEffect11 = 10,
		msoTextEffect12 = 11,
		msoTextEffect13 = 12,
		msoTextEffect14 = 13,
		msoTextEffect15 = 14,
		msoTextEffect16 = 15,
		msoTextEffect17 = 16,
		msoTextEffect18 = 17,
		msoTextEffect19 = 18,
		msoTextEffect20 = 19,
		msoTextEffect21 = 20,
		msoTextEffect22 = 21,
		msoTextEffect23 = 22,
		msoTextEffect24 = 23,
		msoTextEffect25 = 24,
		msoTextEffect26 = 25,
		msoTextEffect27 = 26,
		msoTextEffect28 = 27,
		msoTextEffect29 = 28,
		msoTextEffect30 = 29,
		msoTextEffect31 = 30,
		msoTextEffect32 = 31,
		msoTextEffect33 = 32,
		msoTextEffect34 = 33,
		msoTextEffect35 = 34,
		msoTextEffect36 = 35,
		msoTextEffect37 = 36,
		msoTextEffect38 = 37,
		msoTextEffect39 = 38,
		msoTextEffect40 = 39,
		msoTextEffect41 = 40,
		msoTextEffect42 = 41,
		msoTextEffect43 = 42,
		msoTextEffect44 = 43,
		msoTextEffect45 = 44,
		msoTextEffect46 = 45,
		msoTextEffect47 = 46,
		msoTextEffect48 = 47,
		msoTextEffect49 = 48,
		msoTextEffect50 = 49,
	}

	enum MsoPresetTextEffectShape {
		msoTextEffectShapeMixed = -2,
		msoTextEffectShapePlainText = 1,
		msoTextEffectShapeStop = 2,
		msoTextEffectShapeTriangleUp = 3,
		msoTextEffectShapeTriangleDown = 4,
		msoTextEffectShapeChevronUp = 5,
		msoTextEffectShapeChevronDown = 6,
		msoTextEffectShapeRingInside = 7,
		msoTextEffectShapeRingOutside = 8,
		msoTextEffectShapeArchUpCurve = 9,
		msoTextEffectShapeArchDownCurve = 10,
		msoTextEffectShapeCircleCurve = 11,
		msoTextEffectShapeButtonCurve = 12,
		msoTextEffectShapeArchUpPour = 13,
		msoTextEffectShapeArchDownPour = 14,
		msoTextEffectShapeCirclePour = 15,
		msoTextEffectShapeButtonPour = 16,
		msoTextEffectShapeCurveUp = 17,
		msoTextEffectShapeCurveDown = 18,
		msoTextEffectShapeCanUp = 19,
		msoTextEffectShapeCanDown = 20,
		msoTextEffectShapeWave1 = 21,
		msoTextEffectShapeWave2 = 22,
		msoTextEffectShapeDoubleWave1 = 23,
		msoTextEffectShapeDoubleWave2 = 24,
		msoTextEffectShapeInflate = 25,
		msoTextEffectShapeDeflate = 26,
		msoTextEffectShapeInflateBottom = 27,
		msoTextEffectShapeDeflateBottom = 28,
		msoTextEffectShapeInflateTop = 29,
		msoTextEffectShapeDeflateTop = 30,
		msoTextEffectShapeDeflateInflate = 31,
		msoTextEffectShapeDeflateInflateDeflate = 32,
		msoTextEffectShapeFadeRight = 33,
		msoTextEffectShapeFadeLeft = 34,
		msoTextEffectShapeFadeUp = 35,
		msoTextEffectShapeFadeDown = 36,
		msoTextEffectShapeSlantUp = 37,
		msoTextEffectShapeSlantDown = 38,
		msoTextEffectShapeCascadeUp = 39,
		msoTextEffectShapeCascadeDown = 40,
	}

	enum MsoTextEffectAlignment {
		msoTextEffectAlignmentMixed = -2,
		msoTextEffectAlignmentLeft = 1,
		msoTextEffectAlignmentCentered = 2,
		msoTextEffectAlignmentRight = 3,
		msoTextEffectAlignmentLetterJustify = 4,
		msoTextEffectAlignmentWordJustify = 5,
		msoTextEffectAlignmentStretchJustify = 6,
	}

	enum MsoPresetLightingDirection {
		msoPresetLightingDirectionMixed = -2,
		msoLightingTopLeft = 1,
		msoLightingTop = 2,
		msoLightingTopRight = 3,
		msoLightingLeft = 4,
		msoLightingNone = 5,
		msoLightingRight = 6,
		msoLightingBottomLeft = 7,
		msoLightingBottom = 8,
		msoLightingBottomRight = 9,
	}

	enum MsoPresetLightingSoftness {
		msoPresetLightingSoftnessMixed = -2,
		msoLightingDim = 1,
		msoLightingNormal = 2,
		msoLightingBright = 3,
	}

	enum MsoPresetMaterial {
		msoPresetMaterialMixed = -2,
		msoMaterialMatte = 1,
		msoMaterialPlastic = 2,
		msoMaterialMetal = 3,
		msoMaterialWireFrame = 4,
		msoMaterialMatte2 = 5,
		msoMaterialPlastic2 = 6,
		msoMaterialMetal2 = 7,
		msoMaterialWarmMatte = 8,
		msoMaterialTranslucentPowder = 9,
		msoMaterialPowder = 10,
		msoMaterialDarkEdge = 11,
		msoMaterialSoftEdge = 12,
		msoMaterialClear = 13,
		msoMaterialFlat = 14,
		msoMaterialSoftMetal = 15,
	}

	enum MsoPresetExtrusionDirection {
		msoPresetExtrusionDirectionMixed = -2,
		msoExtrusionBottomRight = 1,
		msoExtrusionBottom = 2,
		msoExtrusionBottomLeft = 3,
		msoExtrusionRight = 4,
		msoExtrusionNone = 5,
		msoExtrusionLeft = 6,
		msoExtrusionTopRight = 7,
		msoExtrusionTop = 8,
		msoExtrusionTopLeft = 9,
	}

	enum MsoPresetThreeDFormat {
		msoPresetThreeDFormatMixed = -2,
		msoThreeD1 = 1,
		msoThreeD2 = 2,
		msoThreeD3 = 3,
		msoThreeD4 = 4,
		msoThreeD5 = 5,
		msoThreeD6 = 6,
		msoThreeD7 = 7,
		msoThreeD8 = 8,
		msoThreeD9 = 9,
		msoThreeD10 = 10,
		msoThreeD11 = 11,
		msoThreeD12 = 12,
		msoThreeD13 = 13,
		msoThreeD14 = 14,
		msoThreeD15 = 15,
		msoThreeD16 = 16,
		msoThreeD17 = 17,
		msoThreeD18 = 18,
		msoThreeD19 = 19,
		msoThreeD20 = 20,
	}

	enum MsoExtrusionColorType {
		msoExtrusionColorTypeMixed = -2,
		msoExtrusionColorAutomatic = 1,
		msoExtrusionColorCustom = 2,
	}

	enum MsoAlignCmd {
		msoAlignLefts = 0,
		msoAlignCenters = 1,
		msoAlignRights = 2,
		msoAlignTops = 3,
		msoAlignMiddles = 4,
		msoAlignBottoms = 5,
	}

	enum MsoDistributeCmd {
		msoDistributeHorizontally = 0,
		msoDistributeVertically = 1,
	}

	enum MsoConnectorType {
		msoConnectorTypeMixed = -2,
		msoConnectorStraight = 1,
		msoConnectorElbow = 2,
		msoConnectorCurve = 3,
	}

	enum MsoHorizontalAnchor {
		msoHorizontalAnchorMixed = -2,
		msoAnchorNone = 1,
		msoAnchorCenter = 2,
	}

	enum MsoVerticalAnchor {
		msoVerticalAnchorMixed = -2,
		msoAnchorTop = 1,
		msoAnchorTopBaseline = 2,
		msoAnchorMiddle = 3,
		msoAnchorBottom = 4,
		msoAnchorBottomBaseLine = 5,
	}

	enum MsoOrientation {
		msoOrientationMixed = -2,
		msoOrientationHorizontal = 1,
		msoOrientationVertical = 2,
	}

	enum MsoZOrderCmd {
		msoBringToFront = 0,
		msoSendToBack = 1,
		msoBringForward = 2,
		msoSendBackward = 3,
		msoBringInFrontOfText = 4,
		msoSendBehindText = 5,
	}

	enum MsoSegmentType {
		msoSegmentLine = 0,
		msoSegmentCurve = 1,
	}

	enum MsoEditingType {
		msoEditingAuto = 0,
		msoEditingCorner = 1,
		msoEditingSmooth = 2,
		msoEditingSymmetric = 3,
	}

	enum MsoAutoShapeType {
		msoShapeMixed = -2,
		msoShapeRectangle = 1,
		msoShapeParallelogram = 2,
		msoShapeTrapezoid = 3,
		msoShapeDiamond = 4,
		msoShapeRoundedRectangle = 5,
		msoShapeOctagon = 6,
		msoShapeIsoscelesTriangle = 7,
		msoShapeRightTriangle = 8,
		msoShapeOval = 9,
		msoShapeHexagon = 10,
		msoShapeCross = 11,
		msoShapeRegularPentagon = 12,
		msoShapeCan = 13,
		msoShapeCube = 14,
		msoShapeBevel = 15,
		msoShapeFoldedCorner = 16,
		msoShapeSmileyFace = 17,
		msoShapeDonut = 18,
		msoShapeNoSymbol = 19,
		msoShapeBlockArc = 20,
		msoShapeHeart = 21,
		msoShapeLightningBolt = 22,
		msoShapeSun = 23,
		msoShapeMoon = 24,
		msoShapeArc = 25,
		msoShapeDoubleBracket = 26,
		msoShapeDoubleBrace = 27,
		msoShapePlaque = 28,
		msoShapeLeftBracket = 29,
		msoShapeRightBracket = 30,
		msoShapeLeftBrace = 31,
		msoShapeRightBrace = 32,
		msoShapeRightArrow = 33,
		msoShapeLeftArrow = 34,
		msoShapeUpArrow = 35,
		msoShapeDownArrow = 36,
		msoShapeLeftRightArrow = 37,
		msoShapeUpDownArrow = 38,
		msoShapeQuadArrow = 39,
		msoShapeLeftRightUpArrow = 40,
		msoShapeBentArrow = 41,
		msoShapeUTurnArrow = 42,
		msoShapeLeftUpArrow = 43,
		msoShapeBentUpArrow = 44,
		msoShapeCurvedRightArrow = 45,
		msoShapeCurvedLeftArrow = 46,
		msoShapeCurvedUpArrow = 47,
		msoShapeCurvedDownArrow = 48,
		msoShapeStripedRightArrow = 49,
		msoShapeNotchedRightArrow = 50,
		msoShapePentagon = 51,
		msoShapeChevron = 52,
		msoShapeRightArrowCallout = 53,
		msoShapeLeftArrowCallout = 54,
		msoShapeUpArrowCallout = 55,
		msoShapeDownArrowCallout = 56,
		msoShapeLeftRightArrowCallout = 57,
		msoShapeUpDownArrowCallout = 58,
		msoShapeQuadArrowCallout = 59,
		msoShapeCircularArrow = 60,
		msoShapeFlowchartProcess = 61,
		msoShapeFlowchartAlternateProcess = 62,
		msoShapeFlowchartDecision = 63,
		msoShapeFlowchartData = 64,
		msoShapeFlowchartPredefinedProcess = 65,
		msoShapeFlowchartInternalStorage = 66,
		msoShapeFlowchartDocument = 67,
		msoShapeFlowchartMultidocument = 68,
		msoShapeFlowchartTerminator = 69,
		msoShapeFlowchartPreparation = 70,
		msoShapeFlowchartManualInput = 71,
		msoShapeFlowchartManualOperation = 72,
		msoShapeFlowchartConnector = 73,
		msoShapeFlowchartOffpageConnector = 74,
		msoShapeFlowchartCard = 75,
		msoShapeFlowchartPunchedTape = 76,
		msoShapeFlowchartSummingJunction = 77,
		msoShapeFlowchartOr = 78,
		msoShapeFlowchartCollate = 79,
		msoShapeFlowchartSort = 80,
		msoShapeFlowchartExtract = 81,
		msoShapeFlowchartMerge = 82,
		msoShapeFlowchartStoredData = 83,
		msoShapeFlowchartDelay = 84,
		msoShapeFlowchartSequentialAccessStorage = 85,
		msoShapeFlowchartMagneticDisk = 86,
		msoShapeFlowchartDirectAccessStorage = 87,
		msoShapeFlowchartDisplay = 88,
		msoShapeExplosion1 = 89,
		msoShapeExplosion2 = 90,
		msoShape4pointStar = 91,
		msoShape5pointStar = 92,
		msoShape8pointStar = 93,
		msoShape16pointStar = 94,
		msoShape24pointStar = 95,
		msoShape32pointStar = 96,
		msoShapeUpRibbon = 97,
		msoShapeDownRibbon = 98,
		msoShapeCurvedUpRibbon = 99,
		msoShapeCurvedDownRibbon = 100,
		msoShapeVerticalScroll = 101,
		msoShapeHorizontalScroll = 102,
		msoShapeWave = 103,
		msoShapeDoubleWave = 104,
		msoShapeRectangularCallout = 105,
		msoShapeRoundedRectangularCallout = 106,
		msoShapeOvalCallout = 107,
		msoShapeCloudCallout = 108,
		msoShapeLineCallout1 = 109,
		msoShapeLineCallout2 = 110,
		msoShapeLineCallout3 = 111,
		msoShapeLineCallout4 = 112,
		msoShapeLineCallout1AccentBar = 113,
		msoShapeLineCallout2AccentBar = 114,
		msoShapeLineCallout3AccentBar = 115,
		msoShapeLineCallout4AccentBar = 116,
		msoShapeLineCallout1NoBorder = 117,
		msoShapeLineCallout2NoBorder = 118,
		msoShapeLineCallout3NoBorder = 119,
		msoShapeLineCallout4NoBorder = 120,
		msoShapeLineCallout1BorderandAccentBar = 121,
		msoShapeLineCallout2BorderandAccentBar = 122,
		msoShapeLineCallout3BorderandAccentBar = 123,
		msoShapeLineCallout4BorderandAccentBar = 124,
		msoShapeActionButtonCustom = 125,
		msoShapeActionButtonHome = 126,
		msoShapeActionButtonHelp = 127,
		msoShapeActionButtonInformation = 128,
		msoShapeActionButtonBackorPrevious = 129,
		msoShapeActionButtonForwardorNext = 130,
		msoShapeActionButtonBeginning = 131,
		msoShapeActionButtonEnd = 132,
		msoShapeActionButtonReturn = 133,
		msoShapeActionButtonDocument = 134,
		msoShapeActionButtonSound = 135,
		msoShapeActionButtonMovie = 136,
		msoShapeBalloon = 137,
		msoShapeNotPrimitive = 138,
		msoShapeFlowchartOfflineStorage = 139,
		msoShapeLeftRightRibbon = 140,
		msoShapeDiagonalStripe = 141,
		msoShapePie = 142,
		msoShapeNonIsoscelesTrapezoid = 143,
		msoShapeDecagon = 144,
		msoShapeHeptagon = 145,
		msoShapeDodecagon = 146,
		msoShape6pointStar = 147,
		msoShape7pointStar = 148,
		msoShape10pointStar = 149,
		msoShape12pointStar = 150,
		msoShapeRound1Rectangle = 151,
		msoShapeRound2SameRectangle = 152,
		msoShapeRound2DiagRectangle = 153,
		msoShapeSnipRoundRectangle = 154,
		msoShapeSnip1Rectangle = 155,
		msoShapeSnip2SameRectangle = 156,
		msoShapeSnip2DiagRectangle = 157,
		msoShapeFrame = 158,
		msoShapeHalfFrame = 159,
		msoShapeTear = 160,
		msoShapeChord = 161,
		msoShapeCorner = 162,
		msoShapeMathPlus = 163,
		msoShapeMathMinus = 164,
		msoShapeMathMultiply = 165,
		msoShapeMathDivide = 166,
		msoShapeMathEqual = 167,
		msoShapeMathNotEqual = 168,
		msoShapeCornerTabs = 169,
		msoShapeSquareTabs = 170,
		msoShapePlaqueTabs = 171,
		msoShapeGear6 = 172,
		msoShapeGear9 = 173,
		msoShapeFunnel = 174,
		msoShapePieWedge = 175,
		msoShapeLeftCircularArrow = 176,
		msoShapeLeftRightCircularArrow = 177,
		msoShapeSwooshArrow = 178,
		msoShapeCloud = 179,
		msoShapeChartX = 180,
		msoShapeChartStar = 181,
		msoShapeChartPlus = 182,
		msoShapeLineInverse = 183,
	}

	enum MsoShapeType {
		msoShapeTypeMixed = -2,
		msoAutoShape = 1,
		msoCallout = 2,
		msoChart = 3,
		msoComment = 4,
		msoFreeform = 5,
		msoGroup = 6,
		msoEmbeddedOLEObject = 7,
		msoFormControl = 8,
		msoLine = 9,
		msoLinkedOLEObject = 10,
		msoLinkedPicture = 11,
		msoOLEControlObject = 12,
		msoPicture = 13,
		msoPlaceholder = 14,
		msoTextEffect = 15,
		msoMedia = 16,
		msoTextBox = 17,
		msoScriptAnchor = 18,
		msoTable = 19,
		msoCanvas = 20,
		msoDiagram = 21,
		msoInk = 22,
		msoInkComment = 23,
		msoSmartArt = 24,
		msoSlicer = 25,
		msoWebVideo = 26,
	}

	enum MsoFlipCmd {
		msoFlipHorizontal = 0,
		msoFlipVertical = 1,
	}

	enum MsoTriState {
		msoTrue = -1,
		msoFalse = 0,
		msoCTrue = 1,
		msoTriStateToggle = -3,
		msoTriStateMixed = -2,
	}

	enum MsoColorType {
		msoColorTypeMixed = -2,
		msoColorTypeRGB = 1,
		msoColorTypeScheme = 2,
		msoColorTypeCMYK = 3,
		msoColorTypeCMS = 4,
		msoColorTypeInk = 5,
	}

	enum MsoPictureColorType {
		msoPictureMixed = -2,
		msoPictureAutomatic = 1,
		msoPictureGrayscale = 2,
		msoPictureBlackAndWhite = 3,
		msoPictureWatermark = 4,
	}

	enum MsoCalloutAngleType {
		msoCalloutAngleMixed = -2,
		msoCalloutAngleAutomatic = 1,
		msoCalloutAngle30 = 2,
		msoCalloutAngle45 = 3,
		msoCalloutAngle60 = 4,
		msoCalloutAngle90 = 5,
	}

	enum MsoCalloutDropType {
		msoCalloutDropMixed = -2,
		msoCalloutDropCustom = 1,
		msoCalloutDropTop = 2,
		msoCalloutDropCenter = 3,
		msoCalloutDropBottom = 4,
	}

	enum MsoCalloutType {
		msoCalloutMixed = -2,
		msoCalloutOne = 1,
		msoCalloutTwo = 2,
		msoCalloutThree = 3,
		msoCalloutFour = 4,
	}

	enum MsoBlackWhiteMode {
		msoBlackWhiteMixed = -2,
		msoBlackWhiteAutomatic = 1,
		msoBlackWhiteGrayScale = 2,
		msoBlackWhiteLightGrayScale = 3,
		msoBlackWhiteInverseGrayScale = 4,
		msoBlackWhiteGrayOutline = 5,
		msoBlackWhiteBlackTextAndLine = 6,
		msoBlackWhiteHighContrast = 7,
		msoBlackWhiteBlack = 8,
		msoBlackWhiteWhite = 9,
		msoBlackWhiteDontShow = 10,
	}

	enum MsoMixedType {
		msoIntegerMixed = 32768,
		msoSingleMixed = -2147483648,
	}

	enum MsoTextOrientation {
		msoTextOrientationMixed = -2,
		msoTextOrientationHorizontal = 1,
		msoTextOrientationUpward = 2,
		msoTextOrientationDownward = 3,
		msoTextOrientationVerticalFarEast = 4,
		msoTextOrientationVertical = 5,
		msoTextOrientationHorizontalRotatedFarEast = 6,
	}

	enum MsoScaleFrom {
		msoScaleFromTopLeft = 0,
		msoScaleFromMiddle = 1,
		msoScaleFromBottomRight = 2,
	}

	enum MsoBarPosition {
		msoBarLeft = 0,
		msoBarTop = 1,
		msoBarRight = 2,
		msoBarBottom = 3,
		msoBarFloating = 4,
		msoBarPopup = 5,
		msoBarMenuBar = 6,
	}

	enum MsoBarProtection {
		msoBarNoProtection = 0,
		msoBarNoCustomize = 1,
		msoBarNoResize = 2,
		msoBarNoMove = 4,
		msoBarNoChangeVisible = 8,
		msoBarNoChangeDock = 16,
		msoBarNoVerticalDock = 32,
		msoBarNoHorizontalDock = 64,
	}

	enum MsoBarType {
		msoBarTypeNormal = 0,
		msoBarTypeMenuBar = 1,
		msoBarTypePopup = 2,
	}

	enum MsoControlType {
		msoControlCustom = 0,
		msoControlButton = 1,
		msoControlEdit = 2,
		msoControlDropdown = 3,
		msoControlComboBox = 4,
		msoControlButtonDropdown = 5,
		msoControlSplitDropdown = 6,
		msoControlOCXDropdown = 7,
		msoControlGenericDropdown = 8,
		msoControlGraphicDropdown = 9,
		msoControlPopup = 10,
		msoControlGraphicPopup = 11,
		msoControlButtonPopup = 12,
		msoControlSplitButtonPopup = 13,
		msoControlSplitButtonMRUPopup = 14,
		msoControlLabel = 15,
		msoControlExpandingGrid = 16,
		msoControlSplitExpandingGrid = 17,
		msoControlGrid = 18,
		msoControlGauge = 19,
		msoControlGraphicCombo = 20,
		msoControlPane = 21,
		msoControlActiveX = 22,
		msoControlSpinner = 23,
		msoControlLabelEx = 24,
		msoControlWorkPane = 25,
		msoControlAutoCompleteCombo = 26,
	}

	enum MsoButtonState {
		msoButtonUp = 0,
		msoButtonDown = -1,
		msoButtonMixed = 2,
	}

	enum MsoControlOLEUsage {
		msoControlOLEUsageNeither = 0,
		msoControlOLEUsageServer = 1,
		msoControlOLEUsageClient = 2,
		msoControlOLEUsageBoth = 3,
	}

	enum MsoButtonStyleHidden {
		msoButtonWrapText = 4,
		msoButtonTextBelow = 8,
	}

	enum MsoButtonStyle {
		msoButtonAutomatic = 0,
		msoButtonIcon = 1,
		msoButtonCaption = 2,
		msoButtonIconAndCaption = 3,
		msoButtonIconAndWrapCaption = 7,
		msoButtonIconAndCaptionBelow = 11,
		msoButtonWrapCaption = 14,
		msoButtonIconAndWrapCaptionBelow = 15,
	}

	enum MsoComboStyle {
		msoComboNormal = 0,
		msoComboLabel = 1,
	}

	enum MsoOLEMenuGroup {
		msoOLEMenuGroupNone = -1,
		msoOLEMenuGroupFile = 0,
		msoOLEMenuGroupEdit = 1,
		msoOLEMenuGroupContainer = 2,
		msoOLEMenuGroupObject = 3,
		msoOLEMenuGroupWindow = 4,
		msoOLEMenuGroupHelp = 5,
	}

	enum MsoMenuAnimation {
		msoMenuAnimationNone = 0,
		msoMenuAnimationRandom = 1,
		msoMenuAnimationUnfold = 2,
		msoMenuAnimationSlide = 3,
	}

	enum MsoBarRow {
		msoBarRowFirst = 0,
		msoBarRowLast = -1,
	}

	enum MsoCommandBarButtonHyperlinkType {
		msoCommandBarButtonHyperlinkNone = 0,
		msoCommandBarButtonHyperlinkOpen = 1,
		msoCommandBarButtonHyperlinkInsertPicture = 2,
	}

	enum MsoHyperlinkType {
		msoHyperlinkRange = 0,
		msoHyperlinkShape = 1,
		msoHyperlinkInlineShape = 2,
	}

	enum MsoExtraInfoMethod {
		msoMethodGet = 0,
		msoMethodPost = 1,
	}

	enum MsoAnimationType {
		msoAnimationIdle = 1,
		msoAnimationGreeting = 2,
		msoAnimationGoodbye = 3,
		msoAnimationBeginSpeaking = 4,
		msoAnimationRestPose = 5,
		msoAnimationCharacterSuccessMajor = 6,
		msoAnimationGetAttentionMajor = 11,
		msoAnimationGetAttentionMinor = 12,
		msoAnimationSearching = 13,
		msoAnimationPrinting = 18,
		msoAnimationGestureRight = 19,
		msoAnimationWritingNotingSomething = 22,
		msoAnimationWorkingAtSomething = 23,
		msoAnimationThinking = 24,
		msoAnimationSendingMail = 25,
		msoAnimationListensToComputer = 26,
		msoAnimationDisappear = 31,
		msoAnimationAppear = 32,
		msoAnimationGetArtsy = 100,
		msoAnimationGetTechy = 101,
		msoAnimationGetWizardy = 102,
		msoAnimationCheckingSomething = 103,
		msoAnimationLookDown = 104,
		msoAnimationLookDownLeft = 105,
		msoAnimationLookDownRight = 106,
		msoAnimationLookLeft = 107,
		msoAnimationLookRight = 108,
		msoAnimationLookUp = 109,
		msoAnimationLookUpLeft = 110,
		msoAnimationLookUpRight = 111,
		msoAnimationSaving = 112,
		msoAnimationGestureDown = 113,
		msoAnimationGestureLeft = 114,
		msoAnimationGestureUp = 115,
		msoAnimationEmptyTrash = 116,
	}

	enum MsoButtonSetType {
		msoButtonSetNone = 0,
		msoButtonSetOK = 1,
		msoButtonSetCancel = 2,
		msoButtonSetOkCancel = 3,
		msoButtonSetYesNo = 4,
		msoButtonSetYesNoCancel = 5,
		msoButtonSetBackClose = 6,
		msoButtonSetNextClose = 7,
		msoButtonSetBackNextClose = 8,
		msoButtonSetRetryCancel = 9,
		msoButtonSetAbortRetryIgnore = 10,
		msoButtonSetSearchClose = 11,
		msoButtonSetBackNextSnooze = 12,
		msoButtonSetTipsOptionsClose = 13,
		msoButtonSetYesAllNoCancel = 14,
	}

	enum MsoIconType {
		msoIconNone = 0,
		msoIconAlert = 2,
		msoIconTip = 3,
		msoIconAlertInfo = 4,
		msoIconAlertWarning = 5,
		msoIconAlertQuery = 6,
		msoIconAlertCritical = 7,
	}

	enum MsoBalloonType {
		msoBalloonTypeButtons = 0,
		msoBalloonTypeBullets = 1,
		msoBalloonTypeNumbers = 2,
	}

	enum MsoModeType {
		msoModeModal = 0,
		msoModeAutoDown = 1,
		msoModeModeless = 2,
	}

	enum MsoBalloonErrorType {
		msoBalloonErrorNone = 0,
		msoBalloonErrorOther = 1,
		msoBalloonErrorTooBig = 2,
		msoBalloonErrorOutOfMemory = 3,
		msoBalloonErrorBadPictureRef = 4,
		msoBalloonErrorBadReference = 5,
		msoBalloonErrorButtonlessModal = 6,
		msoBalloonErrorButtonModeless = 7,
		msoBalloonErrorBadCharacter = 8,
		msoBalloonErrorCOMFailure = 9,
		msoBalloonErrorCharNotTopmostForModal = 10,
		msoBalloonErrorTooManyControls = 11,
	}

	enum MsoWizardActType {
		msoWizardActInactive = 0,
		msoWizardActActive = 1,
		msoWizardActSuspend = 2,
		msoWizardActResume = 3,
	}

	enum MsoWizardMsgType {
		msoWizardMsgLocalStateOn = 1,
		msoWizardMsgLocalStateOff = 2,
		msoWizardMsgShowHelp = 3,
		msoWizardMsgSuspending = 4,
		msoWizardMsgResuming = 5,
	}

	enum MsoBalloonButtonType {
		msoBalloonButtonYesToAll = -15,
		msoBalloonButtonOptions = -14,
		msoBalloonButtonTips = -13,
		msoBalloonButtonClose = -12,
		msoBalloonButtonSnooze = -11,
		msoBalloonButtonSearch = -10,
		msoBalloonButtonIgnore = -9,
		msoBalloonButtonAbort = -8,
		msoBalloonButtonRetry = -7,
		msoBalloonButtonNext = -6,
		msoBalloonButtonBack = -5,
		msoBalloonButtonNo = -4,
		msoBalloonButtonYes = -3,
		msoBalloonButtonCancel = -2,
		msoBalloonButtonOK = -1,
		msoBalloonButtonNull = 0,
	}

	enum DocProperties {
		offPropertyTypeNumber = 1,
		offPropertyTypeBoolean = 2,
		offPropertyTypeDate = 3,
		offPropertyTypeString = 4,
		offPropertyTypeFloat = 5,
	}

	enum MsoDocProperties {
		msoPropertyTypeNumber = 1,
		msoPropertyTypeBoolean = 2,
		msoPropertyTypeDate = 3,
		msoPropertyTypeString = 4,
		msoPropertyTypeFloat = 5,
	}

	enum MsoAppLanguageID {
		msoLanguageIDInstall = 1,
		msoLanguageIDUI = 2,
		msoLanguageIDHelp = 3,
		msoLanguageIDExeMode = 4,
		msoLanguageIDUIPrevious = 5,
	}

	enum MsoFarEastLineBreakLanguageID {
		MsoFarEastLineBreakLanguageJapanese = 1041,
		MsoFarEastLineBreakLanguageKorean = 1042,
		MsoFarEastLineBreakLanguageSimplifiedChinese = 2052,
		MsoFarEastLineBreakLanguageTraditionalChinese = 1028,
	}

	enum MsoFeatureInstall {
		msoFeatureInstallNone = 0,
		msoFeatureInstallOnDemand = 1,
		msoFeatureInstallOnDemandWithUI = 2,
	}

	enum MsoScriptLanguage {
		msoScriptLanguageJava = 1,
		msoScriptLanguageVisualBasic = 2,
		msoScriptLanguageASP = 3,
		msoScriptLanguageOther = 4,
	}

	enum MsoScriptLocation {
		msoScriptLocationInHead = 1,
		msoScriptLocationInBody = 2,
	}

	enum MsoFileFindOptions {
		msoOptionsNew = 1,
		msoOptionsAdd = 2,
		msoOptionsWithin = 3,
	}

	enum MsoFileFindView {
		msoViewFileInfo = 1,
		msoViewPreview = 2,
		msoViewSummaryInfo = 3,
	}

	enum MsoFileFindSortBy {
		msoFileFindSortbyAuthor = 1,
		msoFileFindSortbyDateCreated = 2,
		msoFileFindSortbyLastSavedBy = 3,
		msoFileFindSortbyDateSaved = 4,
		msoFileFindSortbyFileName = 5,
		msoFileFindSortbySize = 6,
		msoFileFindSortbyTitle = 7,
	}

	enum MsoFileFindListBy {
		msoListbyName = 1,
		msoListbyTitle = 2,
	}

	enum MsoLastModified {
		msoLastModifiedYesterday = 1,
		msoLastModifiedToday = 2,
		msoLastModifiedLastWeek = 3,
		msoLastModifiedThisWeek = 4,
		msoLastModifiedLastMonth = 5,
		msoLastModifiedThisMonth = 6,
		msoLastModifiedAnyTime = 7,
	}

	enum MsoSortBy {
		msoSortByFileName = 1,
		msoSortBySize = 2,
		msoSortByFileType = 3,
		msoSortByLastModified = 4,
		msoSortByNone = 5,
	}

	enum MsoSortOrder {
		msoSortOrderAscending = 1,
		msoSortOrderDescending = 2,
	}

	enum MsoConnector {
		msoConnectorAnd = 1,
		msoConnectorOr = 2,
	}

	enum MsoCondition {
		msoConditionFileTypeAllFiles = 1,
		msoConditionFileTypeOfficeFiles = 2,
		msoConditionFileTypeWordDocuments = 3,
		msoConditionFileTypeExcelWorkbooks = 4,
		msoConditionFileTypePowerPointPresentations = 5,
		msoConditionFileTypeBinders = 6,
		msoConditionFileTypeDatabases = 7,
		msoConditionFileTypeTemplates = 8,
		msoConditionIncludes = 9,
		msoConditionIncludesPhrase = 10,
		msoConditionBeginsWith = 11,
		msoConditionEndsWith = 12,
		msoConditionIncludesNearEachOther = 13,
		msoConditionIsExactly = 14,
		msoConditionIsNot = 15,
		msoConditionYesterday = 16,
		msoConditionToday = 17,
		msoConditionTomorrow = 18,
		msoConditionLastWeek = 19,
		msoConditionThisWeek = 20,
		msoConditionNextWeek = 21,
		msoConditionLastMonth = 22,
		msoConditionThisMonth = 23,
		msoConditionNextMonth = 24,
		msoConditionAnytime = 25,
		msoConditionAnytimeBetween = 26,
		msoConditionOn = 27,
		msoConditionOnOrAfter = 28,
		msoConditionOnOrBefore = 29,
		msoConditionInTheNext = 30,
		msoConditionInTheLast = 31,
		msoConditionEquals = 32,
		msoConditionDoesNotEqual = 33,
		msoConditionAnyNumberBetween = 34,
		msoConditionAtMost = 35,
		msoConditionAtLeast = 36,
		msoConditionMoreThan = 37,
		msoConditionLessThan = 38,
		msoConditionIsYes = 39,
		msoConditionIsNo = 40,
		msoConditionIncludesFormsOf = 41,
		msoConditionFreeText = 42,
		msoConditionFileTypeOutlookItems = 43,
		msoConditionFileTypeMailItem = 44,
		msoConditionFileTypeCalendarItem = 45,
		msoConditionFileTypeContactItem = 46,
		msoConditionFileTypeNoteItem = 47,
		msoConditionFileTypeJournalItem = 48,
		msoConditionFileTypeTaskItem = 49,
		msoConditionFileTypePhotoDrawFiles = 50,
		msoConditionFileTypeDataConnectionFiles = 51,
		msoConditionFileTypePublisherFiles = 52,
		msoConditionFileTypeProjectFiles = 53,
		msoConditionFileTypeDocumentImagingFiles = 54,
		msoConditionFileTypeVisioFiles = 55,
		msoConditionFileTypeDesignerFiles = 56,
		msoConditionFileTypeWebPages = 57,
		msoConditionEqualsLow = 58,
		msoConditionEqualsNormal = 59,
		msoConditionEqualsHigh = 60,
		msoConditionNotEqualToLow = 61,
		msoConditionNotEqualToNormal = 62,
		msoConditionNotEqualToHigh = 63,
		msoConditionEqualsNotStarted = 64,
		msoConditionEqualsInProgress = 65,
		msoConditionEqualsCompleted = 66,
		msoConditionEqualsWaitingForSomeoneElse = 67,
		msoConditionEqualsDeferred = 68,
		msoConditionNotEqualToNotStarted = 69,
		msoConditionNotEqualToInProgress = 70,
		msoConditionNotEqualToCompleted = 71,
		msoConditionNotEqualToWaitingForSomeoneElse = 72,
		msoConditionNotEqualToDeferred = 73,
	}

	enum MsoFileType {
		msoFileTypeAllFiles = 1,
		msoFileTypeOfficeFiles = 2,
		msoFileTypeWordDocuments = 3,
		msoFileTypeExcelWorkbooks = 4,
		msoFileTypePowerPointPresentations = 5,
		msoFileTypeBinders = 6,
		msoFileTypeDatabases = 7,
		msoFileTypeTemplates = 8,
		msoFileTypeOutlookItems = 9,
		msoFileTypeMailItem = 10,
		msoFileTypeCalendarItem = 11,
		msoFileTypeContactItem = 12,
		msoFileTypeNoteItem = 13,
		msoFileTypeJournalItem = 14,
		msoFileTypeTaskItem = 15,
		msoFileTypePhotoDrawFiles = 16,
		msoFileTypeDataConnectionFiles = 17,
		msoFileTypePublisherFiles = 18,
		msoFileTypeProjectFiles = 19,
		msoFileTypeDocumentImagingFiles = 20,
		msoFileTypeVisioFiles = 21,
		msoFileTypeDesignerFiles = 22,
		msoFileTypeWebPages = 23,
	}

	enum MsoLanguageID {
		msoLanguageIDMixed = -2,
		msoLanguageIDNone = 0,
		msoLanguageIDNoProofing = 1024,
		msoLanguageIDAfrikaans = 1078,
		msoLanguageIDAlbanian = 1052,
		msoLanguageIDAmharic = 1118,
		msoLanguageIDArabicAlgeria = 5121,
		msoLanguageIDArabicBahrain = 15361,
		msoLanguageIDArabicEgypt = 3073,
		msoLanguageIDArabicIraq = 2049,
		msoLanguageIDArabicJordan = 11265,
		msoLanguageIDArabicKuwait = 13313,
		msoLanguageIDArabicLebanon = 12289,
		msoLanguageIDArabicLibya = 4097,
		msoLanguageIDArabicMorocco = 6145,
		msoLanguageIDArabicOman = 8193,
		msoLanguageIDArabicQatar = 16385,
		msoLanguageIDArabic = 1025,
		msoLanguageIDArabicSyria = 10241,
		msoLanguageIDArabicTunisia = 7169,
		msoLanguageIDArabicUAE = 14337,
		msoLanguageIDArabicYemen = 9217,
		msoLanguageIDArmenian = 1067,
		msoLanguageIDAssamese = 1101,
		msoLanguageIDAzeriCyrillic = 2092,
		msoLanguageIDAzeriLatin = 1068,
		msoLanguageIDBasque = 1069,
		msoLanguageIDByelorussian = 1059,
		msoLanguageIDBengali = 1093,
		msoLanguageIDBosnian = 4122,
		msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218,
		msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146,
		msoLanguageIDBulgarian = 1026,
		msoLanguageIDBurmese = 1109,
		msoLanguageIDCatalan = 1027,
		msoLanguageIDChineseHongKongSAR = 3076,
		msoLanguageIDChineseMacaoSAR = 5124,
		msoLanguageIDSimplifiedChinese = 2052,
		msoLanguageIDChineseSingapore = 4100,
		msoLanguageIDTraditionalChinese = 1028,
		msoLanguageIDCherokee = 1116,
		msoLanguageIDCroatian = 1050,
		msoLanguageIDCzech = 1029,
		msoLanguageIDDanish = 1030,
		msoLanguageIDDivehi = 1125,
		msoLanguageIDBelgianDutch = 2067,
		msoLanguageIDDutch = 1043,
		msoLanguageIDDzongkhaBhutan = 2129,
		msoLanguageIDEdo = 1126,
		msoLanguageIDEnglishAUS = 3081,
		msoLanguageIDEnglishBelize = 10249,
		msoLanguageIDEnglishCanadian = 4105,
		msoLanguageIDEnglishCaribbean = 9225,
		msoLanguageIDEnglishIndonesia = 14345,
		msoLanguageIDEnglishIreland = 6153,
		msoLanguageIDEnglishJamaica = 8201,
		msoLanguageIDEnglishNewZealand = 5129,
		msoLanguageIDEnglishPhilippines = 13321,
		msoLanguageIDEnglishSouthAfrica = 7177,
		msoLanguageIDEnglishTrinidadTobago = 11273,
		msoLanguageIDEnglishUK = 2057,
		msoLanguageIDEnglishUS = 1033,
		msoLanguageIDEnglishZimbabwe = 12297,
		msoLanguageIDEstonian = 1061,
		msoLanguageIDFaeroese = 1080,
		msoLanguageIDFarsi = 1065,
		msoLanguageIDFilipino = 1124,
		msoLanguageIDFinnish = 1035,
		msoLanguageIDBelgianFrench = 2060,
		msoLanguageIDFrenchCameroon = 11276,
		msoLanguageIDFrenchCanadian = 3084,
		msoLanguageIDFrenchCotedIvoire = 12300,
		msoLanguageIDFrench = 1036,
		msoLanguageIDFrenchHaiti = 15372,
		msoLanguageIDFrenchLuxembourg = 5132,
		msoLanguageIDFrenchMali = 13324,
		msoLanguageIDFrenchMonaco = 6156,
		msoLanguageIDFrenchMorocco = 14348,
		msoLanguageIDFrenchReunion = 8204,
		msoLanguageIDFrenchSenegal = 10252,
		msoLanguageIDSwissFrench = 4108,
		msoLanguageIDFrenchWestIndies = 7180,
		msoLanguageIDFrenchZaire = 9228,
		msoLanguageIDFrenchCongoDRC = 9228,
		msoLanguageIDFrisianNetherlands = 1122,
		msoLanguageIDFulfulde = 1127,
		msoLanguageIDGaelicIreland = 2108,
		msoLanguageIDGaelicScotland = 1084,
		msoLanguageIDGalician = 1110,
		msoLanguageIDGeorgian = 1079,
		msoLanguageIDGermanAustria = 3079,
		msoLanguageIDGerman = 1031,
		msoLanguageIDGermanLiechtenstein = 5127,
		msoLanguageIDGermanLuxembourg = 4103,
		msoLanguageIDSwissGerman = 2055,
		msoLanguageIDGreek = 1032,
		msoLanguageIDGuarani = 1140,
		msoLanguageIDGujarati = 1095,
		msoLanguageIDHausa = 1128,
		msoLanguageIDHawaiian = 1141,
		msoLanguageIDHebrew = 1037,
		msoLanguageIDHindi = 1081,
		msoLanguageIDHungarian = 1038,
		msoLanguageIDIbibio = 1129,
		msoLanguageIDIcelandic = 1039,
		msoLanguageIDIgbo = 1136,
		msoLanguageIDIndonesian = 1057,
		msoLanguageIDInuktitut = 1117,
		msoLanguageIDItalian = 1040,
		msoLanguageIDSwissItalian = 2064,
		msoLanguageIDJapanese = 1041,
		msoLanguageIDKannada = 1099,
		msoLanguageIDKanuri = 1137,
		msoLanguageIDKashmiri = 1120,
		msoLanguageIDKashmiriDevanagari = 2144,
		msoLanguageIDKazakh = 1087,
		msoLanguageIDKhmer = 1107,
		msoLanguageIDKirghiz = 1088,
		msoLanguageIDKonkani = 1111,
		msoLanguageIDKorean = 1042,
		msoLanguageIDKyrgyz = 1088,
		msoLanguageIDLatin = 1142,
		msoLanguageIDLao = 1108,
		msoLanguageIDLatvian = 1062,
		msoLanguageIDLithuanian = 1063,
		msoLanguageIDMacedonian = 1071,
		msoLanguageIDMacedonianFYROM = 1071,
		msoLanguageIDMalaysian = 1086,
		msoLanguageIDMalayBruneiDarussalam = 2110,
		msoLanguageIDMalayalam = 1100,
		msoLanguageIDMaltese = 1082,
		msoLanguageIDManipuri = 1112,
		msoLanguageIDMaori = 1153,
		msoLanguageIDMarathi = 1102,
		msoLanguageIDMongolian = 1104,
		msoLanguageIDNepali = 1121,
		msoLanguageIDNorwegianBokmol = 1044,
		msoLanguageIDNorwegianNynorsk = 2068,
		msoLanguageIDOriya = 1096,
		msoLanguageIDOromo = 1138,
		msoLanguageIDPashto = 1123,
		msoLanguageIDPolish = 1045,
		msoLanguageIDBrazilianPortuguese = 1046,
		msoLanguageIDPortuguese = 2070,
		msoLanguageIDPunjabi = 1094,
		msoLanguageIDQuechuaBolivia = 1131,
		msoLanguageIDQuechuaEcuador = 2155,
		msoLanguageIDQuechuaPeru = 3179,
		msoLanguageIDRhaetoRomanic = 1047,
		msoLanguageIDRomanianMoldova = 2072,
		msoLanguageIDRomanian = 1048,
		msoLanguageIDRussianMoldova = 2073,
		msoLanguageIDRussian = 1049,
		msoLanguageIDSamiLappish = 1083,
		msoLanguageIDSanskrit = 1103,
		msoLanguageIDSepedi = 1132,
		msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194,
		msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170,
		msoLanguageIDSerbianCyrillic = 3098,
		msoLanguageIDSerbianLatin = 2074,
		msoLanguageIDSesotho = 1072,
		msoLanguageIDSindhi = 1113,
		msoLanguageIDSindhiPakistan = 2137,
		msoLanguageIDSinhalese = 1115,
		msoLanguageIDSlovak = 1051,
		msoLanguageIDSlovenian = 1060,
		msoLanguageIDSomali = 1143,
		msoLanguageIDSorbian = 1070,
		msoLanguageIDSpanishArgentina = 11274,
		msoLanguageIDSpanishBolivia = 16394,
		msoLanguageIDSpanishChile = 13322,
		msoLanguageIDSpanishColombia = 9226,
		msoLanguageIDSpanishCostaRica = 5130,
		msoLanguageIDSpanishDominicanRepublic = 7178,
		msoLanguageIDSpanishEcuador = 12298,
		msoLanguageIDSpanishElSalvador = 17418,
		msoLanguageIDSpanishGuatemala = 4106,
		msoLanguageIDSpanishHonduras = 18442,
		msoLanguageIDMexicanSpanish = 2058,
		msoLanguageIDSpanishNicaragua = 19466,
		msoLanguageIDSpanishPanama = 6154,
		msoLanguageIDSpanishParaguay = 15370,
		msoLanguageIDSpanishPeru = 10250,
		msoLanguageIDSpanishPuertoRico = 20490,
		msoLanguageIDSpanishModernSort = 3082,
		msoLanguageIDSpanish = 1034,
		msoLanguageIDSpanishUruguay = 14346,
		msoLanguageIDSpanishVenezuela = 8202,
		msoLanguageIDSutu = 1072,
		msoLanguageIDSwahili = 1089,
		msoLanguageIDSwedishFinland = 2077,
		msoLanguageIDSwedish = 1053,
		msoLanguageIDSyriac = 1114,
		msoLanguageIDTajik = 1064,
		msoLanguageIDTamil = 1097,
		msoLanguageIDTamazight = 1119,
		msoLanguageIDTamazightLatin = 2143,
		msoLanguageIDTatar = 1092,
		msoLanguageIDTelugu = 1098,
		msoLanguageIDThai = 1054,
		msoLanguageIDTibetan = 1105,
		msoLanguageIDTigrignaEthiopic = 1139,
		msoLanguageIDTigrignaEritrea = 2163,
		msoLanguageIDTsonga = 1073,
		msoLanguageIDTswana = 1074,
		msoLanguageIDTurkish = 1055,
		msoLanguageIDTurkmen = 1090,
		msoLanguageIDUkrainian = 1058,
		msoLanguageIDUrdu = 1056,
		msoLanguageIDUzbekCyrillic = 2115,
		msoLanguageIDUzbekLatin = 1091,
		msoLanguageIDVenda = 1075,
		msoLanguageIDVietnamese = 1066,
		msoLanguageIDWelsh = 1106,
		msoLanguageIDXhosa = 1076,
		msoLanguageIDYi = 1144,
		msoLanguageIDYiddish = 1085,
		msoLanguageIDYoruba = 1130,
		msoLanguageIDZulu = 1077,
	}

	enum MsoScreenSize {
		msoScreenSize544x376 = 0,
		msoScreenSize640x480 = 1,
		msoScreenSize720x512 = 2,
		msoScreenSize800x600 = 3,
		msoScreenSize1024x768 = 4,
		msoScreenSize1152x882 = 5,
		msoScreenSize1152x900 = 6,
		msoScreenSize1280x1024 = 7,
		msoScreenSize1600x1200 = 8,
		msoScreenSize1800x1440 = 9,
		msoScreenSize1920x1200 = 10,
	}

	enum MsoCharacterSet {
		msoCharacterSetArabic = 1,
		msoCharacterSetCyrillic = 2,
		msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3,
		msoCharacterSetGreek = 4,
		msoCharacterSetHebrew = 5,
		msoCharacterSetJapanese = 6,
		msoCharacterSetKorean = 7,
		msoCharacterSetMultilingualUnicode = 8,
		msoCharacterSetSimplifiedChinese = 9,
		msoCharacterSetThai = 10,
		msoCharacterSetTraditionalChinese = 11,
		msoCharacterSetVietnamese = 12,
	}

	enum MsoEncoding {
		msoEncodingThai = 874,
		msoEncodingJapaneseShiftJIS = 932,
		msoEncodingSimplifiedChineseGBK = 936,
		msoEncodingKorean = 949,
		msoEncodingTraditionalChineseBig5 = 950,
		msoEncodingUnicodeLittleEndian = 1200,
		msoEncodingUnicodeBigEndian = 1201,
		msoEncodingCentralEuropean = 1250,
		msoEncodingCyrillic = 1251,
		msoEncodingWestern = 1252,
		msoEncodingGreek = 1253,
		msoEncodingTurkish = 1254,
		msoEncodingHebrew = 1255,
		msoEncodingArabic = 1256,
		msoEncodingBaltic = 1257,
		msoEncodingVietnamese = 1258,
		msoEncodingAutoDetect = 50001,
		msoEncodingJapaneseAutoDetect = 50932,
		msoEncodingSimplifiedChineseAutoDetect = 50936,
		msoEncodingKoreanAutoDetect = 50949,
		msoEncodingTraditionalChineseAutoDetect = 50950,
		msoEncodingCyrillicAutoDetect = 51251,
		msoEncodingGreekAutoDetect = 51253,
		msoEncodingArabicAutoDetect = 51256,
		msoEncodingISO88591Latin1 = 28591,
		msoEncodingISO88592CentralEurope = 28592,
		msoEncodingISO88593Latin3 = 28593,
		msoEncodingISO88594Baltic = 28594,
		msoEncodingISO88595Cyrillic = 28595,
		msoEncodingISO88596Arabic = 28596,
		msoEncodingISO88597Greek = 28597,
		msoEncodingISO88598Hebrew = 28598,
		msoEncodingISO88599Turkish = 28599,
		msoEncodingISO885915Latin9 = 28605,
		msoEncodingISO88598HebrewLogical = 38598,
		msoEncodingISO2022JPNoHalfwidthKatakana = 50220,
		msoEncodingISO2022JPJISX02021984 = 50221,
		msoEncodingISO2022JPJISX02011989 = 50222,
		msoEncodingISO2022KR = 50225,
		msoEncodingISO2022CNTraditionalChinese = 50227,
		msoEncodingISO2022CNSimplifiedChinese = 50229,
		msoEncodingMacRoman = 10000,
		msoEncodingMacJapanese = 10001,
		msoEncodingMacTraditionalChineseBig5 = 10002,
		msoEncodingMacKorean = 10003,
		msoEncodingMacArabic = 10004,
		msoEncodingMacHebrew = 10005,
		msoEncodingMacGreek1 = 10006,
		msoEncodingMacCyrillic = 10007,
		msoEncodingMacSimplifiedChineseGB2312 = 10008,
		msoEncodingMacRomania = 10010,
		msoEncodingMacUkraine = 10017,
		msoEncodingMacLatin2 = 10029,
		msoEncodingMacIcelandic = 10079,
		msoEncodingMacTurkish = 10081,
		msoEncodingMacCroatia = 10082,
		msoEncodingEBCDICUSCanada = 37,
		msoEncodingEBCDICInternational = 500,
		msoEncodingEBCDICMultilingualROECELatin2 = 870,
		msoEncodingEBCDICGreekModern = 875,
		msoEncodingEBCDICTurkishLatin5 = 1026,
		msoEncodingEBCDICGermany = 20273,
		msoEncodingEBCDICDenmarkNorway = 20277,
		msoEncodingEBCDICFinlandSweden = 20278,
		msoEncodingEBCDICItaly = 20280,
		msoEncodingEBCDICLatinAmericaSpain = 20284,
		msoEncodingEBCDICUnitedKingdom = 20285,
		msoEncodingEBCDICJapaneseKatakanaExtended = 20290,
		msoEncodingEBCDICFrance = 20297,
		msoEncodingEBCDICArabic = 20420,
		msoEncodingEBCDICGreek = 20423,
		msoEncodingEBCDICHebrew = 20424,
		msoEncodingEBCDICKoreanExtended = 20833,
		msoEncodingEBCDICThai = 20838,
		msoEncodingEBCDICIcelandic = 20871,
		msoEncodingEBCDICTurkish = 20905,
		msoEncodingEBCDICRussian = 20880,
		msoEncodingEBCDICSerbianBulgarian = 21025,
		msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930,
		msoEncodingEBCDICUSCanadaAndJapanese = 50931,
		msoEncodingEBCDICKoreanExtendedAndKorean = 50933,
		msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935,
		msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937,
		msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939,
		msoEncodingOEMUnitedStates = 437,
		msoEncodingOEMGreek437G = 737,
		msoEncodingOEMBaltic = 775,
		msoEncodingOEMMultilingualLatinI = 850,
		msoEncodingOEMMultilingualLatinII = 852,
		msoEncodingOEMCyrillic = 855,
		msoEncodingOEMTurkish = 857,
		msoEncodingOEMPortuguese = 860,
		msoEncodingOEMIcelandic = 861,
		msoEncodingOEMHebrew = 862,
		msoEncodingOEMCanadianFrench = 863,
		msoEncodingOEMArabic = 864,
		msoEncodingOEMNordic = 865,
		msoEncodingOEMCyrillicII = 866,
		msoEncodingOEMModernGreek = 869,
		msoEncodingEUCJapanese = 51932,
		msoEncodingEUCChineseSimplifiedChinese = 51936,
		msoEncodingEUCKorean = 51949,
		msoEncodingEUCTaiwaneseTraditionalChinese = 51950,
		msoEncodingISCIIDevanagari = 57002,
		msoEncodingISCIIBengali = 57003,
		msoEncodingISCIITamil = 57004,
		msoEncodingISCIITelugu = 57005,
		msoEncodingISCIIAssamese = 57006,
		msoEncodingISCIIOriya = 57007,
		msoEncodingISCIIKannada = 57008,
		msoEncodingISCIIMalayalam = 57009,
		msoEncodingISCIIGujarati = 57010,
		msoEncodingISCIIPunjabi = 57011,
		msoEncodingArabicASMO = 708,
		msoEncodingArabicTransparentASMO = 720,
		msoEncodingKoreanJohab = 1361,
		msoEncodingTaiwanCNS = 20000,
		msoEncodingTaiwanTCA = 20001,
		msoEncodingTaiwanEten = 20002,
		msoEncodingTaiwanIBM5550 = 20003,
		msoEncodingTaiwanTeleText = 20004,
		msoEncodingTaiwanWang = 20005,
		msoEncodingIA5IRV = 20105,
		msoEncodingIA5German = 20106,
		msoEncodingIA5Swedish = 20107,
		msoEncodingIA5Norwegian = 20108,
		msoEncodingUSASCII = 20127,
		msoEncodingT61 = 20261,
		msoEncodingISO6937NonSpacingAccent = 20269,
		msoEncodingKOI8R = 20866,
		msoEncodingExtAlphaLowercase = 21027,
		msoEncodingKOI8U = 21866,
		msoEncodingEuropa3 = 29001,
		msoEncodingHZGBSimplifiedChinese = 52936,
		msoEncodingSimplifiedChineseGB18030 = 54936,
		msoEncodingUTF7 = 65000,
		msoEncodingUTF8 = 65001,
	}

	enum MsoHTMLProjectOpen {
		msoHTMLProjectOpenSourceView = 1,
		msoHTMLProjectOpenTextView = 2,
	}

	enum MsoHTMLProjectState {
		msoHTMLProjectStateDocumentLocked = 1,
		msoHTMLProjectStateProjectLocked = 2,
		msoHTMLProjectStateDocumentProjectUnlocked = 3,
	}

	enum MsoFileDialogType {
		msoFileDialogOpen = 1,
		msoFileDialogSaveAs = 2,
		msoFileDialogFilePicker = 3,
		msoFileDialogFolderPicker = 4,
	}

	enum MsoFileDialogView {
		msoFileDialogViewList = 1,
		msoFileDialogViewDetails = 2,
		msoFileDialogViewProperties = 3,
		msoFileDialogViewPreview = 4,
		msoFileDialogViewThumbnail = 5,
		msoFileDialogViewLargeIcons = 6,
		msoFileDialogViewSmallIcons = 7,
		msoFileDialogViewWebView = 8,
		msoFileDialogViewTiles = 9,
	}

	enum MsoAutomationSecurity {
		msoAutomationSecurityLow = 1,
		msoAutomationSecurityByUI = 2,
		msoAutomationSecurityForceDisable = 3,
	}

	enum MailFormat {
		mfPlainText = 1,
		mfHTML = 2,
		mfRTF = 3,
	}

	enum MsoAlertButtonType {
		msoAlertButtonOK = 0,
		msoAlertButtonOKCancel = 1,
		msoAlertButtonAbortRetryIgnore = 2,
		msoAlertButtonYesNoCancel = 3,
		msoAlertButtonYesNo = 4,
		msoAlertButtonRetryCancel = 5,
		msoAlertButtonYesAllNoCancel = 6,
	}

	enum MsoAlertIconType {
		msoAlertIconNoIcon = 0,
		msoAlertIconCritical = 1,
		msoAlertIconQuery = 2,
		msoAlertIconWarning = 3,
		msoAlertIconInfo = 4,
	}

	enum MsoAlertDefaultType {
		msoAlertDefaultFirst = 0,
		msoAlertDefaultSecond = 1,
		msoAlertDefaultThird = 2,
		msoAlertDefaultFourth = 3,
		msoAlertDefaultFifth = 4,
	}

	enum MsoAlertCancelType {
		msoAlertCancelDefault = -1,
		msoAlertCancelFirst = 0,
		msoAlertCancelSecond = 1,
		msoAlertCancelThird = 2,
		msoAlertCancelFourth = 3,
		msoAlertCancelFifth = 4,
	}

	enum MsoSearchIn {
		msoSearchInMyComputer = 0,
		msoSearchInOutlook = 1,
		msoSearchInMyNetworkPlaces = 2,
		msoSearchInCustom = 3,
	}

	enum MsoTargetBrowser {
		msoTargetBrowserV3 = 0,
		msoTargetBrowserV4 = 1,
		msoTargetBrowserIE4 = 2,
		msoTargetBrowserIE5 = 3,
		msoTargetBrowserIE6 = 4,
	}

	enum MsoOrgChartOrientation {
		msoOrgChartOrientationMixed = -2,
		msoOrgChartOrientationVertical = 1,
	}

	enum MsoOrgChartLayoutType {
		msoOrgChartLayoutMixed = -2,
		msoOrgChartLayoutStandard = 1,
		msoOrgChartLayoutBothHanging = 2,
		msoOrgChartLayoutLeftHanging = 3,
		msoOrgChartLayoutRightHanging = 4,
		msoOrgChartLayoutDefault = 5,
	}

	enum MsoRelativeNodePosition {
		msoBeforeNode = 1,
		msoAfterNode = 2,
		msoBeforeFirstSibling = 3,
		msoAfterLastSibling = 4,
	}

	enum MsoDiagramType {
		msoDiagramMixed = -2,
		msoDiagramOrgChart = 1,
		msoDiagramCycle = 2,
		msoDiagramRadial = 3,
		msoDiagramPyramid = 4,
		msoDiagramVenn = 5,
		msoDiagramTarget = 6,
	}

	enum MsoDiagramNodeType {
		msoDiagramNode = 1,
		msoDiagramAssistant = 2,
	}

	enum MsoMoveRow {
		msoMoveRowFirst = -4,
		msoMoveRowPrev = -3,
		msoMoveRowNext = -2,
		msoMoveRowNbr = -1,
	}

	enum MsoFilterComparison {
		msoFilterComparisonEqual = 0,
		msoFilterComparisonNotEqual = 1,
		msoFilterComparisonLessThan = 2,
		msoFilterComparisonGreaterThan = 3,
		msoFilterComparisonLessThanEqual = 4,
		msoFilterComparisonGreaterThanEqual = 5,
		msoFilterComparisonIsBlank = 6,
		msoFilterComparisonIsNotBlank = 7,
		msoFilterComparisonContains = 8,
		msoFilterComparisonNotContains = 9,
	}

	enum MsoFilterConjunction {
		msoFilterConjunctionAnd = 0,
		msoFilterConjunctionOr = 1,
	}

	enum MsoFileNewSection {
		msoOpenDocument = 0,
		msoNew = 1,
		msoNewfromExistingFile = 2,
		msoNewfromTemplate = 3,
		msoBottomSection = 4,
	}

	enum MsoFileNewAction {
		msoEditFile = 0,
		msoCreateNewFile = 1,
		msoOpenFile = 2,
	}

	enum MsoLanguageIDHidden {
		msoLanguageIDChineseHongKong = 3076,
		msoLanguageIDChineseMacao = 5124,
		msoLanguageIDEnglishTrinidad = 11273,
	}

	enum MsoSharedWorkspaceTaskStatus {
		msoSharedWorkspaceTaskStatusNotStarted = 1,
		msoSharedWorkspaceTaskStatusInProgress = 2,
		msoSharedWorkspaceTaskStatusCompleted = 3,
		msoSharedWorkspaceTaskStatusDeferred = 4,
		msoSharedWorkspaceTaskStatusWaiting = 5,
	}

	enum MsoSharedWorkspaceTaskPriority {
		msoSharedWorkspaceTaskPriorityHigh = 1,
		msoSharedWorkspaceTaskPriorityNormal = 2,
		msoSharedWorkspaceTaskPriorityLow = 3,
	}

	enum MsoSyncVersionType {
		msoSyncVersionLastViewed = 0,
		msoSyncVersionServer = 1,
	}

	enum MsoSyncConflictResolutionType {
		msoSyncConflictClientWins = 0,
		msoSyncConflictServerWins = 1,
		msoSyncConflictMerge = 2,
	}

	enum MsoSyncCompareType {
		msoSyncCompareAndMerge = 0,
		msoSyncCompareSideBySide = 1,
	}

	enum MsoSyncAvailableType {
		msoSyncAvailableNone = 0,
		msoSyncAvailableOffline = 1,
		msoSyncAvailableAnywhere = 2,
	}

	enum MsoSyncEventType {
		msoSyncEventDownloadInitiated = 0,
		msoSyncEventDownloadSucceeded = 1,
		msoSyncEventDownloadFailed = 2,
		msoSyncEventUploadInitiated = 3,
		msoSyncEventUploadSucceeded = 4,
		msoSyncEventUploadFailed = 5,
		msoSyncEventDownloadNoChange = 6,
		msoSyncEventOffline = 7,
	}

	enum MsoSyncErrorType {
		msoSyncErrorNone = 0,
		msoSyncErrorUnauthorizedUser = 1,
		msoSyncErrorCouldNotConnect = 2,
		msoSyncErrorOutOfSpace = 3,
		msoSyncErrorFileNotFound = 4,
		msoSyncErrorFileTooLarge = 5,
		msoSyncErrorFileInUse = 6,
		msoSyncErrorVirusUpload = 7,
		msoSyncErrorVirusDownload = 8,
		msoSyncErrorUnknownUpload = 9,
		msoSyncErrorUnknownDownload = 10,
		msoSyncErrorCouldNotOpen = 11,
		msoSyncErrorCouldNotUpdate = 12,
		msoSyncErrorCouldNotCompare = 13,
		msoSyncErrorCouldNotResolve = 14,
		msoSyncErrorNoNetwork = 15,
		msoSyncErrorUnknown = 16,
	}

	enum MsoSyncStatusType {
		msoSyncStatusNoSharedWorkspace = 0,
		msoSyncStatusNotRoaming = 0,
		msoSyncStatusLatest = 1,
		msoSyncStatusNewerAvailable = 2,
		msoSyncStatusLocalChanges = 3,
		msoSyncStatusConflict = 4,
		msoSyncStatusSuspended = 5,
		msoSyncStatusError = 6,
	}

	enum MsoPermission {
		msoPermissionView = 1,
		msoPermissionRead = 1,
		msoPermissionEdit = 2,
		msoPermissionSave = 4,
		msoPermissionExtract = 8,
		msoPermissionChange = 15,
		msoPermissionPrint = 16,
		msoPermissionObjModel = 32,
		msoPermissionFullControl = 64,
		msoPermissionAllCommon = 127,
	}

	enum MsoMetaPropertyType {
		msoMetaPropertyTypeUnknown = 0,
		msoMetaPropertyTypeBoolean = 1,
		msoMetaPropertyTypeChoice = 2,
		msoMetaPropertyTypeCalculated = 3,
		msoMetaPropertyTypeComputed = 4,
		msoMetaPropertyTypeCurrency = 5,
		msoMetaPropertyTypeDateTime = 6,
		msoMetaPropertyTypeFillInChoice = 7,
		msoMetaPropertyTypeGuid = 8,
		msoMetaPropertyTypeInteger = 9,
		msoMetaPropertyTypeLookup = 10,
		msoMetaPropertyTypeMultiChoiceLookup = 11,
		msoMetaPropertyTypeMultiChoice = 12,
		msoMetaPropertyTypeMultiChoiceFillIn = 13,
		msoMetaPropertyTypeNote = 14,
		msoMetaPropertyTypeNumber = 15,
		msoMetaPropertyTypeText = 16,
		msoMetaPropertyTypeUrl = 17,
		msoMetaPropertyTypeUser = 18,
		msoMetaPropertyTypeUserMulti = 19,
		msoMetaPropertyTypeBusinessData = 20,
		msoMetaPropertyTypeBusinessDataSecondary = 21,
		msoMetaPropertyTypeMax = 22,
	}

	enum MsoSignatureSubset {
		msoSignatureSubsetSignaturesAllSigs = 0,
		msoSignatureSubsetSignaturesNonVisible = 1,
		msoSignatureSubsetSignatureLines = 2,
		msoSignatureSubsetSignatureLinesSigned = 3,
		msoSignatureSubsetSignatureLinesUnsigned = 4,
		msoSignatureSubsetAll = 5,
	}

	enum MsoDocInspectorStatus {
		msoDocInspectorStatusDocOk = 0,
		msoDocInspectorStatusIssueFound = 1,
		msoDocInspectorStatusError = 2,
	}

	enum SignatureDetail {
		sigdetLocalSigningTime = 0,
		sigdetApplicationName = 1,
		sigdetApplicationVersion = 2,
		sigdetOfficeVersion = 3,
		sigdetWindowsVersion = 4,
		sigdetNumberOfMonitors = 5,
		sigdetHorizResolution = 6,
		sigdetVertResolution = 7,
		sigdetColorDepth = 8,
		sigdetSignedData = 9,
		sigdetDocPreviewImg = 10,
		sigdetIPFormHash = 11,
		sigdetIPCurrentView = 12,
		sigdetSignatureType = 13,
		sigdetHashAlgorithm = 14,
		sigdetShouldShowViewWarning = 15,
		sigdetDelSuggSigner = 16,
		sigdetDelSuggSignerSet = 17,
		sigdetDelSuggSignerLine2 = 18,
		sigdetDelSuggSignerLine2Set = 19,
		sigdetDelSuggSignerEmail = 20,
		sigdetDelSuggSignerEmailSet = 21,
	}

	enum CertificateDetail {
		certdetAvailable = 0,
		certdetSubject = 1,
		certdetIssuer = 2,
		certdetExpirationDate = 3,
		certdetThumbprint = 4,
	}

	enum ContentVerificationResults {
		contverresError = 0,
		contverresVerifying = 1,
		contverresUnverified = 2,
		contverresValid = 3,
		contverresModified = 4,
	}

	enum CertificateVerificationResults {
		certverresError = 0,
		certverresVerifying = 1,
		certverresUnverified = 2,
		certverresValid = 3,
		certverresInvalid = 4,
		certverresExpired = 5,
		certverresRevoked = 6,
		certverresUntrusted = 7,
	}

	enum SignatureLineImage {
		siglnimgSoftwareRequired = 0,
		siglnimgUnsigned = 1,
		siglnimgSignedValid = 2,
		siglnimgSignedInvalid = 3,
		siglnimgSigned = 4,
	}

	enum SignatureProviderDetail {
		sigprovdetUrl = 0,
		sigprovdetHashAlgorithm = 1,
		sigprovdetUIOnly = 2,
		sigprovdetUseOfficeUI = 3,
		sigprovdetUseOfficeStampUI = 4,
	}

	enum SignatureType {
		sigtypeUnknown = 0,
		sigtypeNonVisible = 1,
		sigtypeSignatureLine = 2,
		sigtypeMax = 3,
	}

	enum MsoCustomXMLNodeType {
		msoCustomXMLNodeElement = 1,
		msoCustomXMLNodeAttribute = 2,
		msoCustomXMLNodeText = 3,
		msoCustomXMLNodeCData = 4,
		msoCustomXMLNodeProcessingInstruction = 7,
		msoCustomXMLNodeComment = 8,
		msoCustomXMLNodeDocument = 9,
	}

	enum MsoCustomXMLValidationErrorType {
		msoCustomXMLValidationErrorSchemaGenerated = 0,
		msoCustomXMLValidationErrorAutomaticallyCleared = 1,
		msoCustomXMLValidationErrorManual = 2,
	}

	enum MsoTextureAlignment {
		msoTextureAlignmentMixed = -2,
		msoTextureTopLeft = 0,
		msoTextureTop = 1,
		msoTextureTopRight = 2,
		msoTextureLeft = 3,
		msoTextureCenter = 4,
		msoTextureRight = 5,
		msoTextureBottomLeft = 6,
		msoTextureBottom = 7,
		msoTextureBottomRight = 8,
	}

	enum MsoSoftEdgeType {
		msoSoftEdgeTypeMixed = -2,
		msoSoftEdgeTypeNone = 0,
		msoSoftEdgeType1 = 1,
		msoSoftEdgeType2 = 2,
		msoSoftEdgeType3 = 3,
		msoSoftEdgeType4 = 4,
		msoSoftEdgeType5 = 5,
		msoSoftEdgeType6 = 6,
	}

	enum MsoReflectionType {
		msoReflectionTypeMixed = -2,
		msoReflectionTypeNone = 0,
		msoReflectionType1 = 1,
		msoReflectionType2 = 2,
		msoReflectionType3 = 3,
		msoReflectionType4 = 4,
		msoReflectionType5 = 5,
		msoReflectionType6 = 6,
		msoReflectionType7 = 7,
		msoReflectionType8 = 8,
		msoReflectionType9 = 9,
	}

	enum MsoPresetCamera {
		msoPresetCameraMixed = -2,
		msoCameraLegacyObliqueTopLeft = 1,
		msoCameraLegacyObliqueTop = 2,
		msoCameraLegacyObliqueTopRight = 3,
		msoCameraLegacyObliqueLeft = 4,
		msoCameraLegacyObliqueFront = 5,
		msoCameraLegacyObliqueRight = 6,
		msoCameraLegacyObliqueBottomLeft = 7,
		msoCameraLegacyObliqueBottom = 8,
		msoCameraLegacyObliqueBottomRight = 9,
		msoCameraLegacyPerspectiveTopLeft = 10,
		msoCameraLegacyPerspectiveTop = 11,
		msoCameraLegacyPerspectiveTopRight = 12,
		msoCameraLegacyPerspectiveLeft = 13,
		msoCameraLegacyPerspectiveFront = 14,
		msoCameraLegacyPerspectiveRight = 15,
		msoCameraLegacyPerspectiveBottomLeft = 16,
		msoCameraLegacyPerspectiveBottom = 17,
		msoCameraLegacyPerspectiveBottomRight = 18,
		msoCameraOrthographicFront = 19,
		msoCameraIsometricTopUp = 20,
		msoCameraIsometricTopDown = 21,
		msoCameraIsometricBottomUp = 22,
		msoCameraIsometricBottomDown = 23,
		msoCameraIsometricLeftUp = 24,
		msoCameraIsometricLeftDown = 25,
		msoCameraIsometricRightUp = 26,
		msoCameraIsometricRightDown = 27,
		msoCameraIsometricOffAxis1Left = 28,
		msoCameraIsometricOffAxis1Right = 29,
		msoCameraIsometricOffAxis1Top = 30,
		msoCameraIsometricOffAxis2Left = 31,
		msoCameraIsometricOffAxis2Right = 32,
		msoCameraIsometricOffAxis2Top = 33,
		msoCameraIsometricOffAxis3Left = 34,
		msoCameraIsometricOffAxis3Right = 35,
		msoCameraIsometricOffAxis3Bottom = 36,
		msoCameraIsometricOffAxis4Left = 37,
		msoCameraIsometricOffAxis4Right = 38,
		msoCameraIsometricOffAxis4Bottom = 39,
		msoCameraObliqueTopLeft = 40,
		msoCameraObliqueTop = 41,
		msoCameraObliqueTopRight = 42,
		msoCameraObliqueLeft = 43,
		msoCameraObliqueRight = 44,
		msoCameraObliqueBottomLeft = 45,
		msoCameraObliqueBottom = 46,
		msoCameraObliqueBottomRight = 47,
		msoCameraPerspectiveFront = 48,
		msoCameraPerspectiveLeft = 49,
		msoCameraPerspectiveRight = 50,
		msoCameraPerspectiveAbove = 51,
		msoCameraPerspectiveBelow = 52,
		msoCameraPerspectiveAboveLeftFacing = 53,
		msoCameraPerspectiveAboveRightFacing = 54,
		msoCameraPerspectiveContrastingLeftFacing = 55,
		msoCameraPerspectiveContrastingRightFacing = 56,
		msoCameraPerspectiveHeroicLeftFacing = 57,
		msoCameraPerspectiveHeroicRightFacing = 58,
		msoCameraPerspectiveHeroicExtremeLeftFacing = 59,
		msoCameraPerspectiveHeroicExtremeRightFacing = 60,
		msoCameraPerspectiveRelaxed = 61,
		msoCameraPerspectiveRelaxedModerately = 62,
	}

	enum MsoBevelType {
		msoBevelTypeMixed = -2,
		msoBevelNone = 1,
		msoBevelRelaxedInset = 2,
		msoBevelCircle = 3,
		msoBevelSlope = 4,
		msoBevelCross = 5,
		msoBevelAngle = 6,
		msoBevelSoftRound = 7,
		msoBevelConvex = 8,
		msoBevelCoolSlant = 9,
		msoBevelDivot = 10,
		msoBevelRiblet = 11,
		msoBevelHardEdge = 12,
		msoBevelArtDeco = 13,
	}

	enum MsoLightRigType {
		msoLightRigMixed = -2,
		msoLightRigLegacyFlat1 = 1,
		msoLightRigLegacyFlat2 = 2,
		msoLightRigLegacyFlat3 = 3,
		msoLightRigLegacyFlat4 = 4,
		msoLightRigLegacyNormal1 = 5,
		msoLightRigLegacyNormal2 = 6,
		msoLightRigLegacyNormal3 = 7,
		msoLightRigLegacyNormal4 = 8,
		msoLightRigLegacyHarsh1 = 9,
		msoLightRigLegacyHarsh2 = 10,
		msoLightRigLegacyHarsh3 = 11,
		msoLightRigLegacyHarsh4 = 12,
		msoLightRigThreePoint = 13,
		msoLightRigBalanced = 14,
		msoLightRigSoft = 15,
		msoLightRigHarsh = 16,
		msoLightRigFlood = 17,
		msoLightRigContrasting = 18,
		msoLightRigMorning = 19,
		msoLightRigSunrise = 20,
		msoLightRigSunset = 21,
		msoLightRigChilly = 22,
		msoLightRigFreezing = 23,
		msoLightRigFlat = 24,
		msoLightRigTwoPoint = 25,
		msoLightRigGlow = 26,
		msoLightRigBrightRoom = 27,
	}

	enum MsoParagraphAlignment {
		msoAlignMixed = -2,
		msoAlignLeft = 1,
		msoAlignCenter = 2,
		msoAlignRight = 3,
		msoAlignJustify = 4,
		msoAlignDistribute = 5,
		msoAlignThaiDistribute = 6,
		msoAlignJustifyLow = 7,
	}

	enum MsoTextStrike {
		msoStrikeMixed = -2,
		msoNoStrike = 0,
		msoSingleStrike = 1,
		msoDoubleStrike = 2,
	}

	enum MsoTextCaps {
		msoCapsMixed = -2,
		msoNoCaps = 0,
		msoSmallCaps = 1,
		msoAllCaps = 2,
	}

	enum MsoTextUnderlineType {
		msoUnderlineMixed = -2,
		msoNoUnderline = 0,
		msoUnderlineWords = 1,
		msoUnderlineSingleLine = 2,
		msoUnderlineDoubleLine = 3,
		msoUnderlineHeavyLine = 4,
		msoUnderlineDottedLine = 5,
		msoUnderlineDottedHeavyLine = 6,
		msoUnderlineDashLine = 7,
		msoUnderlineDashHeavyLine = 8,
		msoUnderlineDashLongLine = 9,
		msoUnderlineDashLongHeavyLine = 10,
		msoUnderlineDotDashLine = 11,
		msoUnderlineDotDashHeavyLine = 12,
		msoUnderlineDotDotDashLine = 13,
		msoUnderlineDotDotDashHeavyLine = 14,
		msoUnderlineWavyLine = 15,
		msoUnderlineWavyHeavyLine = 16,
		msoUnderlineWavyDoubleLine = 17,
	}

	enum MsoTextTabAlign {
		msoTabAlignMixed = -2,
		msoTabAlignLeft = 0,
		msoTabAlignCenter = 1,
		msoTabAlignRight = 2,
		msoTabAlignDecimal = 3,
	}

	enum MsoTextCharWrap {
		msoCharWrapMixed = -2,
		msoNoCharWrap = 0,
		msoStandardCharWrap = 1,
		msoStrictCharWrap = 2,
		msoCustomCharWrap = 3,
	}

	enum MsoTextFontAlign {
		msoFontAlignMixed = -2,
		msoFontAlignAuto = 0,
		msoFontAlignTop = 1,
		msoFontAlignCenter = 2,
		msoFontAlignBaseline = 3,
		msoFontAlignBottom = 4,
	}

	enum MsoAutoSize {
		msoAutoSizeMixed = -2,
		msoAutoSizeNone = 0,
		msoAutoSizeShapeToFitText = 1,
		msoAutoSizeTextToFitShape = 2,
	}

	enum MsoPathFormat {
		msoPathTypeMixed = -2,
		msoPathTypeNone = 0,
		msoPathType1 = 1,
		msoPathType2 = 2,
		msoPathType3 = 3,
		msoPathType4 = 4,
	}

	enum MsoWarpFormat {
		msoWarpFormatMixed = -2,
		msoWarpFormat1 = 0,
		msoWarpFormat2 = 1,
		msoWarpFormat3 = 2,
		msoWarpFormat4 = 3,
		msoWarpFormat5 = 4,
		msoWarpFormat6 = 5,
		msoWarpFormat7 = 6,
		msoWarpFormat8 = 7,
		msoWarpFormat9 = 8,
		msoWarpFormat10 = 9,
		msoWarpFormat11 = 10,
		msoWarpFormat12 = 11,
		msoWarpFormat13 = 12,
		msoWarpFormat14 = 13,
		msoWarpFormat15 = 14,
		msoWarpFormat16 = 15,
		msoWarpFormat17 = 16,
		msoWarpFormat18 = 17,
		msoWarpFormat19 = 18,
		msoWarpFormat20 = 19,
		msoWarpFormat21 = 20,
		msoWarpFormat22 = 21,
		msoWarpFormat23 = 22,
		msoWarpFormat24 = 23,
		msoWarpFormat25 = 24,
		msoWarpFormat26 = 25,
		msoWarpFormat27 = 26,
		msoWarpFormat28 = 27,
		msoWarpFormat29 = 28,
		msoWarpFormat30 = 29,
		msoWarpFormat31 = 30,
		msoWarpFormat32 = 31,
		msoWarpFormat33 = 32,
		msoWarpFormat34 = 33,
		msoWarpFormat35 = 34,
		msoWarpFormat36 = 35,
		msoWarpFormat37 = 36,
	}

	enum MsoTextChangeCase {
		msoCaseSentence = 1,
		msoCaseLower = 2,
		msoCaseUpper = 3,
		msoCaseTitle = 4,
		msoCaseToggle = 5,
	}

	enum MsoDateTimeFormat {
		msoDateTimeFormatMixed = -2,
		msoDateTimeMdyy = 1,
		msoDateTimeddddMMMMddyyyy = 2,
		msoDateTimedMMMMyyyy = 3,
		msoDateTimeMMMMdyyyy = 4,
		msoDateTimedMMMyy = 5,
		msoDateTimeMMMMyy = 6,
		msoDateTimeMMyy = 7,
		msoDateTimeMMddyyHmm = 8,
		msoDateTimeMMddyyhmmAMPM = 9,
		msoDateTimeHmm = 10,
		msoDateTimeHmmss = 11,
		msoDateTimehmmAMPM = 12,
		msoDateTimehmmssAMPM = 13,
		msoDateTimeFigureOut = 14,
	}

	enum MsoThemeColorSchemeIndex {
		msoThemeDark1 = 1,
		msoThemeLight1 = 2,
		msoThemeDark2 = 3,
		msoThemeLight2 = 4,
		msoThemeAccent1 = 5,
		msoThemeAccent2 = 6,
		msoThemeAccent3 = 7,
		msoThemeAccent4 = 8,
		msoThemeAccent5 = 9,
		msoThemeAccent6 = 10,
		msoThemeHyperlink = 11,
		msoThemeFollowedHyperlink = 12,
	}

	enum MsoThemeColorIndex {
		msoThemeColorMixed = -2,
		msoNotThemeColor = 0,
		msoThemeColorDark1 = 1,
		msoThemeColorLight1 = 2,
		msoThemeColorDark2 = 3,
		msoThemeColorLight2 = 4,
		msoThemeColorAccent1 = 5,
		msoThemeColorAccent2 = 6,
		msoThemeColorAccent3 = 7,
		msoThemeColorAccent4 = 8,
		msoThemeColorAccent5 = 9,
		msoThemeColorAccent6 = 10,
		msoThemeColorHyperlink = 11,
		msoThemeColorFollowedHyperlink = 12,
		msoThemeColorText1 = 13,
		msoThemeColorBackground1 = 14,
		msoThemeColorText2 = 15,
		msoThemeColorBackground2 = 16,
	}

	enum MsoFontLanguageIndex {
		msoThemeLatin = 1,
		msoThemeComplexScript = 2,
		msoThemeEastAsian = 3,
	}

	enum MsoShapeStyleIndex {
		msoShapeStyleMixed = -2,
		msoShapeStyleNotAPreset = 0,
		msoShapeStylePreset1 = 1,
		msoShapeStylePreset2 = 2,
		msoShapeStylePreset3 = 3,
		msoShapeStylePreset4 = 4,
		msoShapeStylePreset5 = 5,
		msoShapeStylePreset6 = 6,
		msoShapeStylePreset7 = 7,
		msoShapeStylePreset8 = 8,
		msoShapeStylePreset9 = 9,
		msoShapeStylePreset10 = 10,
		msoShapeStylePreset11 = 11,
		msoShapeStylePreset12 = 12,
		msoShapeStylePreset13 = 13,
		msoShapeStylePreset14 = 14,
		msoShapeStylePreset15 = 15,
		msoShapeStylePreset16 = 16,
		msoShapeStylePreset17 = 17,
		msoShapeStylePreset18 = 18,
		msoShapeStylePreset19 = 19,
		msoShapeStylePreset20 = 20,
		msoShapeStylePreset21 = 21,
		msoShapeStylePreset22 = 22,
		msoShapeStylePreset23 = 23,
		msoShapeStylePreset24 = 24,
		msoShapeStylePreset25 = 25,
		msoShapeStylePreset26 = 26,
		msoShapeStylePreset27 = 27,
		msoShapeStylePreset28 = 28,
		msoShapeStylePreset29 = 29,
		msoShapeStylePreset30 = 30,
		msoShapeStylePreset31 = 31,
		msoShapeStylePreset32 = 32,
		msoShapeStylePreset33 = 33,
		msoShapeStylePreset34 = 34,
		msoShapeStylePreset35 = 35,
		msoShapeStylePreset36 = 36,
		msoShapeStylePreset37 = 37,
		msoShapeStylePreset38 = 38,
		msoShapeStylePreset39 = 39,
		msoShapeStylePreset40 = 40,
		msoShapeStylePreset41 = 41,
		msoShapeStylePreset42 = 42,
		msoLineStylePreset1 = 10001,
		msoLineStylePreset2 = 10002,
		msoLineStylePreset3 = 10003,
		msoLineStylePreset4 = 10004,
		msoLineStylePreset5 = 10005,
		msoLineStylePreset6 = 10006,
		msoLineStylePreset7 = 10007,
		msoLineStylePreset8 = 10008,
		msoLineStylePreset9 = 10009,
		msoLineStylePreset10 = 10010,
		msoLineStylePreset11 = 10011,
		msoLineStylePreset12 = 10012,
		msoLineStylePreset13 = 10013,
		msoLineStylePreset14 = 10014,
		msoLineStylePreset15 = 10015,
		msoLineStylePreset16 = 10016,
		msoLineStylePreset17 = 10017,
		msoLineStylePreset18 = 10018,
		msoLineStylePreset19 = 10019,
		msoLineStylePreset20 = 10020,
		msoLineStylePreset21 = 10021,
	}

	enum MsoBackgroundStyleIndex {
		msoBackgroundStyleMixed = -2,
		msoBackgroundStyleNotAPreset = 0,
		msoBackgroundStylePreset1 = 1,
		msoBackgroundStylePreset2 = 2,
		msoBackgroundStylePreset3 = 3,
		msoBackgroundStylePreset4 = 4,
		msoBackgroundStylePreset5 = 5,
		msoBackgroundStylePreset6 = 6,
		msoBackgroundStylePreset7 = 7,
		msoBackgroundStylePreset8 = 8,
		msoBackgroundStylePreset9 = 9,
		msoBackgroundStylePreset10 = 10,
		msoBackgroundStylePreset11 = 11,
		msoBackgroundStylePreset12 = 12,
	}

	enum MsoCTPDockPosition {
		msoCTPDockPositionLeft = 0,
		msoCTPDockPositionTop = 1,
		msoCTPDockPositionRight = 2,
		msoCTPDockPositionBottom = 3,
		msoCTPDockPositionFloating = 4,
	}

	enum MsoCTPDockPositionRestrict {
		msoCTPDockPositionRestrictNone = 0,
		msoCTPDockPositionRestrictNoChange = 1,
		msoCTPDockPositionRestrictNoHorizontal = 2,
		msoCTPDockPositionRestrictNoVertical = 3,
	}

	enum RibbonControlSize {
		RibbonControlSizeRegular = 0,
		RibbonControlSizeLarge = 1,
	}

	enum MsoShadowStyle {
		msoShadowStyleMixed = -2,
		msoShadowStyleInnerShadow = 1,
		msoShadowStyleOuterShadow = 2,
	}

	enum MsoTextDirection {
		msoTextDirectionMixed = -2,
		msoTextDirectionLeftToRight = 1,
		msoTextDirectionRightToLeft = 2,
	}

	enum XlChartType {
		xlColumnClustered = 51,
		xlColumnStacked = 52,
		xlColumnStacked100 = 53,
		xl3DColumnClustered = 54,
		xl3DColumnStacked = 55,
		xl3DColumnStacked100 = 56,
		xlBarClustered = 57,
		xlBarStacked = 58,
		xlBarStacked100 = 59,
		xl3DBarClustered = 60,
		xl3DBarStacked = 61,
		xl3DBarStacked100 = 62,
		xlLineStacked = 63,
		xlLineStacked100 = 64,
		xlLineMarkers = 65,
		xlLineMarkersStacked = 66,
		xlLineMarkersStacked100 = 67,
		xlPieOfPie = 68,
		xlPieExploded = 69,
		xl3DPieExploded = 70,
		xlBarOfPie = 71,
		xlXYScatterSmooth = 72,
		xlXYScatterSmoothNoMarkers = 73,
		xlXYScatterLines = 74,
		xlXYScatterLinesNoMarkers = 75,
		xlAreaStacked = 76,
		xlAreaStacked100 = 77,
		xl3DAreaStacked = 78,
		xl3DAreaStacked100 = 79,
		xlDoughnutExploded = 80,
		xlRadarMarkers = 81,
		xlRadarFilled = 82,
		xlSurface = 83,
		xlSurfaceWireframe = 84,
		xlSurfaceTopView = 85,
		xlSurfaceTopViewWireframe = 86,
		xlBubble = 15,
		xlBubble3DEffect = 87,
		xlStockHLC = 88,
		xlStockOHLC = 89,
		xlStockVHLC = 90,
		xlStockVOHLC = 91,
		xlCylinderColClustered = 92,
		xlCylinderColStacked = 93,
		xlCylinderColStacked100 = 94,
		xlCylinderBarClustered = 95,
		xlCylinderBarStacked = 96,
		xlCylinderBarStacked100 = 97,
		xlCylinderCol = 98,
		xlConeColClustered = 99,
		xlConeColStacked = 100,
		xlConeColStacked100 = 101,
		xlConeBarClustered = 102,
		xlConeBarStacked = 103,
		xlConeBarStacked100 = 104,
		xlConeCol = 105,
		xlPyramidColClustered = 106,
		xlPyramidColStacked = 107,
		xlPyramidColStacked100 = 108,
		xlPyramidBarClustered = 109,
		xlPyramidBarStacked = 110,
		xlPyramidBarStacked100 = 111,
		xlPyramidCol = 112,
		xl3DColumn = -4100,
		xlLine = 4,
		xl3DLine = -4101,
		xl3DPie = -4102,
		xlPie = 5,
		xlXYScatter = -4169,
		xl3DArea = -4098,
		xlArea = 1,
		xlDoughnut = -4120,
		xlRadar = -4151,
		xlCombo = -4152,
		xlComboColumnClusteredLine = 113,
		xlComboColumnClusteredLineSecondaryAxis = 114,
		xlComboAreaStackedColumnClustered = 115,
		xlOtherCombinations = 116,
		xlSuggestedChart = -2,
	}

	enum XlChartSplitType {
		xlSplitByPosition = 1,
		xlSplitByPercentValue = 3,
		xlSplitByCustomSplit = 4,
		xlSplitByValue = 2,
	}

	enum XlSizeRepresents {
		xlSizeIsWidth = 2,
		xlSizeIsArea = 1,
	}

	enum XlAxisGroup {
		xlPrimary = 1,
		xlSecondary = 2,
	}

	enum XlConstants {
		xlAutomatic = -4105,
		xlCombination = -4111,
		xlCustom = -4114,
		xlBar = 2,
		xlColumn = 3,
		xl3DBar = -4099,
		xl3DSurface = -4103,
		xlDefaultAutoFormat = -1,
		xlNone = -4142,
		xlAbove = 0,
		xlBelow = 1,
		xlBoth = 1,
		xlBottom = -4107,
		xlCenter = -4108,
		xlChecker = 9,
		xlCircle = 8,
		xlCorner = 2,
		xlCrissCross = 16,
		xlCross = 4,
		xlDiamond = 2,
		xlDistributed = -4117,
		xlFill = 5,
		xlFixedValue = 1,
		xlGeneral = 1,
		xlGray16 = 17,
		xlGray25 = -4124,
		xlGray50 = -4125,
		xlGray75 = -4126,
		xlGray8 = 18,
		xlGrid = 15,
		xlHigh = -4127,
		xlInside = 2,
		xlJustify = -4130,
		xlLeft = -4131,
		xlLightDown = 13,
		xlLightHorizontal = 11,
		xlLightUp = 14,
		xlLightVertical = 12,
		xlLow = -4134,
		xlMaximum = 2,
		xlMinimum = 4,
		xlMinusValues = 3,
		xlNextToAxis = 4,
		xlOpaque = 3,
		xlOutside = 3,
		xlPercent = 2,
		xlPlus = 9,
		xlPlusValues = 2,
		xlRight = -4152,
		xlScale = 3,
		xlSemiGray75 = 10,
		xlShowLabel = 4,
		xlShowLabelAndPercent = 5,
		xlShowPercent = 3,
		xlShowValue = 2,
		xlSingle = 2,
		xlSolid = 1,
		xlSquare = 1,
		xlStar = 5,
		xlStError = 4,
		xlTop = -4160,
		xlTransparent = 2,
		xlTriangle = 3,
	}

	enum XlReadingOrder {
		xlContext = -5002,
		xlLTR = -5003,
		xlRTL = -5004,
	}

	enum XlBorderWeight {
		xlHairline = 1,
		xlMedium = -4138,
		xlThick = 4,
		xlThin = 2,
	}

	enum XlLegendPosition {
		xlLegendPositionBottom = -4107,
		xlLegendPositionCorner = 2,
		xlLegendPositionLeft = -4131,
		xlLegendPositionRight = -4152,
		xlLegendPositionTop = -4160,
		xlLegendPositionCustom = -4161,
	}

	enum XlUnderlineStyle {
		xlUnderlineStyleDouble = -4119,
		xlUnderlineStyleDoubleAccounting = 5,
		xlUnderlineStyleNone = -4142,
		xlUnderlineStyleSingle = 2,
		xlUnderlineStyleSingleAccounting = 4,
	}

	enum XlColorIndex {
		xlColorIndexAutomatic = -4105,
		xlColorIndexNone = -4142,
	}

	enum XlMarkerStyle {
		xlMarkerStyleAutomatic = -4105,
		xlMarkerStyleCircle = 8,
		xlMarkerStyleDash = -4115,
		xlMarkerStyleDiamond = 2,
		xlMarkerStyleDot = -4118,
		xlMarkerStyleNone = -4142,
		xlMarkerStylePicture = -4147,
		xlMarkerStylePlus = 9,
		xlMarkerStyleSquare = 1,
		xlMarkerStyleStar = 5,
		xlMarkerStyleTriangle = 3,
		xlMarkerStyleX = -4168,
	}

	enum XlRowCol {
		xlColumns = 2,
		xlRows = 1,
	}

	enum XlDataLabelsType {
		xlDataLabelsShowNone = -4142,
		xlDataLabelsShowValue = 2,
		xlDataLabelsShowPercent = 3,
		xlDataLabelsShowLabel = 4,
		xlDataLabelsShowLabelAndPercent = 5,
		xlDataLabelsShowBubbleSizes = 6,
	}

	enum XlErrorBarInclude {
		xlErrorBarIncludeBoth = 1,
		xlErrorBarIncludeMinusValues = 3,
		xlErrorBarIncludeNone = -4142,
		xlErrorBarIncludePlusValues = 2,
	}

	enum XlErrorBarType {
		xlErrorBarTypeCustom = -4114,
		xlErrorBarTypeFixedValue = 1,
		xlErrorBarTypePercent = 2,
		xlErrorBarTypeStDev = -4155,
		xlErrorBarTypeStError = 4,
	}

	enum XlErrorBarDirection {
		xlChartX = -4168,
		xlChartY = 1,
	}

	enum XlChartPictureType {
		xlStackScale = 3,
		xlStack = 2,
		xlStretch = 1,
	}

	enum XlChartItem {
		xlDataLabel = 0,
		xlChartArea = 2,
		xlSeries = 3,
		xlChartTitle = 4,
		xlWalls = 5,
		xlCorners = 6,
		xlDataTable = 7,
		xlTrendline = 8,
		xlErrorBars = 9,
		xlXErrorBars = 10,
		xlYErrorBars = 11,
		xlLegendEntry = 12,
		xlLegendKey = 13,
		xlShape = 14,
		xlMajorGridlines = 15,
		xlMinorGridlines = 16,
		xlAxisTitle = 17,
		xlUpBars = 18,
		xlPlotArea = 19,
		xlDownBars = 20,
		xlAxis = 21,
		xlSeriesLines = 22,
		xlFloor = 23,
		xlLegend = 24,
		xlHiLoLines = 25,
		xlDropLines = 26,
		xlRadarAxisLabels = 27,
		xlNothing = 28,
		xlLeaderLines = 29,
		xlDisplayUnitLabel = 30,
		xlPivotChartFieldButton = 31,
		xlPivotChartDropZone = 32,
	}

	enum XlBarShape {
		xlBox = 0,
		xlPyramidToPoint = 1,
		xlPyramidToMax = 2,
		xlCylinder = 3,
		xlConeToPoint = 4,
		xlConeToMax = 5,
	}

	enum XlEndStyleCap {
		xlCap = 1,
		xlNoCap = 2,
	}

	enum XlTrendlineType {
		xlExponential = 5,
		xlLinear = -4132,
		xlLogarithmic = -4133,
		xlMovingAvg = 6,
		xlPolynomial = 3,
		xlPower = 4,
	}

	enum XlAxisType {
		xlCategory = 1,
		xlSeriesAxis = 3,
		xlValue = 2,
	}

	enum XlAxisCrosses {
		xlAxisCrossesAutomatic = -4105,
		xlAxisCrossesCustom = -4114,
		xlAxisCrossesMaximum = 2,
		xlAxisCrossesMinimum = 4,
	}

	enum XlTickMark {
		xlTickMarkCross = 4,
		xlTickMarkInside = 2,
		xlTickMarkNone = -4142,
		xlTickMarkOutside = 3,
	}

	enum XlScaleType {
		xlScaleLinear = -4132,
		xlScaleLogarithmic = -4133,
	}

	enum XlTickLabelPosition {
		xlTickLabelPositionHigh = -4127,
		xlTickLabelPositionLow = -4134,
		xlTickLabelPositionNextToAxis = 4,
		xlTickLabelPositionNone = -4142,
	}

	enum XlTimeUnit {
		xlDays = 0,
		xlMonths = 1,
		xlYears = 2,
	}

	enum XlCategoryType {
		xlCategoryScale = 2,
		xlTimeScale = 3,
		xlAutomaticScale = -4105,
	}

	enum XlDisplayUnit {
		xlHundreds = -2,
		xlThousands = -3,
		xlTenThousands = -4,
		xlHundredThousands = -5,
		xlMillions = -6,
		xlTenMillions = -7,
		xlHundredMillions = -8,
		xlThousandMillions = -9,
		xlMillionMillions = -10,
		xlDisplayUnitCustom = -4114,
		xlDisplayUnitNone = -4142,
	}

	enum XlChartOrientation {
		xlDownward = -4170,
		xlHorizontal = -4128,
		xlUpward = -4171,
		xlVertical = -4166,
	}

	enum XlTickLabelOrientation {
		xlTickLabelOrientationAutomatic = -4105,
		xlTickLabelOrientationDownward = -4170,
		xlTickLabelOrientationHorizontal = -4128,
		xlTickLabelOrientationUpward = -4171,
		xlTickLabelOrientationVertical = -4166,
	}

	enum XlDisplayBlanksAs {
		xlInterpolated = 3,
		xlNotPlotted = 1,
		xlZero = 2,
	}

	enum XlDataLabelPosition {
		xlLabelPositionCenter = -4108,
		xlLabelPositionAbove = 0,
		xlLabelPositionBelow = 1,
		xlLabelPositionLeft = -4131,
		xlLabelPositionRight = -4152,
		xlLabelPositionOutsideEnd = 2,
		xlLabelPositionInsideEnd = 3,
		xlLabelPositionInsideBase = 4,
		xlLabelPositionBestFit = 5,
		xlLabelPositionMixed = 6,
		xlLabelPositionCustom = 7,
	}

	enum XlPivotFieldOrientation {
		xlColumnField = 2,
		xlDataField = 4,
		xlHidden = 0,
		xlPageField = 3,
		xlRowField = 1,
	}

	enum XlHAlign {
		xlHAlignCenter = -4108,
		xlHAlignCenterAcrossSelection = 7,
		xlHAlignDistributed = -4117,
		xlHAlignFill = 5,
		xlHAlignGeneral = 1,
		xlHAlignJustify = -4130,
		xlHAlignLeft = -4131,
		xlHAlignRight = -4152,
	}

	enum XlVAlign {
		xlVAlignBottom = -4107,
		xlVAlignCenter = -4108,
		xlVAlignDistributed = -4117,
		xlVAlignJustify = -4130,
		xlVAlignTop = -4160,
	}

	enum XlChartElementPosition {
		xlChartElementPositionAutomatic = -4105,
		xlChartElementPositionCustom = -4114,
	}

	enum MsoChartElementType {
		msoElementChartTitleNone = 0,
		msoElementChartTitleCenteredOverlay = 1,
		msoElementChartTitleAboveChart = 2,
		msoElementLegendNone = 100,
		msoElementLegendRight = 101,
		msoElementLegendTop = 102,
		msoElementLegendLeft = 103,
		msoElementLegendBottom = 104,
		msoElementLegendRightOverlay = 105,
		msoElementLegendLeftOverlay = 106,
		msoElementDataLabelNone = 200,
		msoElementDataLabelShow = 201,
		msoElementDataLabelCenter = 202,
		msoElementDataLabelInsideEnd = 203,
		msoElementDataLabelInsideBase = 204,
		msoElementDataLabelOutSideEnd = 205,
		msoElementDataLabelLeft = 206,
		msoElementDataLabelRight = 207,
		msoElementDataLabelTop = 208,
		msoElementDataLabelBottom = 209,
		msoElementDataLabelBestFit = 210,
		msoElementDataLabelCallout = 211,
		msoElementPrimaryCategoryAxisTitleNone = 300,
		msoElementPrimaryCategoryAxisTitleAdjacentToAxis = 301,
		msoElementPrimaryCategoryAxisTitleBelowAxis = 302,
		msoElementPrimaryCategoryAxisTitleRotated = 303,
		msoElementPrimaryCategoryAxisTitleVertical = 304,
		msoElementPrimaryCategoryAxisTitleHorizontal = 305,
		msoElementPrimaryValueAxisTitleNone = 306,
		msoElementPrimaryValueAxisTitleAdjacentToAxis = 306,
		msoElementPrimaryValueAxisTitleBelowAxis = 308,
		msoElementPrimaryValueAxisTitleRotated = 309,
		msoElementPrimaryValueAxisTitleVertical = 310,
		msoElementPrimaryValueAxisTitleHorizontal = 311,
		msoElementSecondaryCategoryAxisTitleNone = 312,
		msoElementSecondaryCategoryAxisTitleAdjacentToAxis = 313,
		msoElementSecondaryCategoryAxisTitleBelowAxis = 314,
		msoElementSecondaryCategoryAxisTitleRotated = 315,
		msoElementSecondaryCategoryAxisTitleVertical = 316,
		msoElementSecondaryCategoryAxisTitleHorizontal = 317,
		msoElementSecondaryValueAxisTitleNone = 318,
		msoElementSecondaryValueAxisTitleAdjacentToAxis = 319,
		msoElementSecondaryValueAxisTitleBelowAxis = 320,
		msoElementSecondaryValueAxisTitleRotated = 321,
		msoElementSecondaryValueAxisTitleVertical = 322,
		msoElementSecondaryValueAxisTitleHorizontal = 323,
		msoElementSeriesAxisTitleNone = 324,
		msoElementSeriesAxisTitleRotated = 325,
		msoElementSeriesAxisTitleVertical = 326,
		msoElementSeriesAxisTitleHorizontal = 327,
		msoElementPrimaryValueGridLinesNone = 328,
		msoElementPrimaryValueGridLinesMinor = 329,
		msoElementPrimaryValueGridLinesMajor = 330,
		msoElementPrimaryValueGridLinesMinorMajor = 331,
		msoElementPrimaryCategoryGridLinesNone = 332,
		msoElementPrimaryCategoryGridLinesMinor = 333,
		msoElementPrimaryCategoryGridLinesMajor = 334,
		msoElementPrimaryCategoryGridLinesMinorMajor = 335,
		msoElementSecondaryValueGridLinesNone = 336,
		msoElementSecondaryValueGridLinesMinor = 337,
		msoElementSecondaryValueGridLinesMajor = 338,
		msoElementSecondaryValueGridLinesMinorMajor = 339,
		msoElementSecondaryCategoryGridLinesNone = 340,
		msoElementSecondaryCategoryGridLinesMinor = 341,
		msoElementSecondaryCategoryGridLinesMajor = 342,
		msoElementSecondaryCategoryGridLinesMinorMajor = 343,
		msoElementSeriesAxisGridLinesNone = 344,
		msoElementSeriesAxisGridLinesMinor = 345,
		msoElementSeriesAxisGridLinesMajor = 346,
		msoElementSeriesAxisGridLinesMinorMajor = 347,
		msoElementPrimaryCategoryAxisNone = 348,
		msoElementPrimaryCategoryAxisShow = 349,
		msoElementPrimaryCategoryAxisWithoutLabels = 350,
		msoElementPrimaryCategoryAxisReverse = 351,
		msoElementPrimaryValueAxisNone = 352,
		msoElementPrimaryValueAxisShow = 353,
		msoElementPrimaryValueAxisThousands = 354,
		msoElementPrimaryValueAxisMillions = 355,
		msoElementPrimaryValueAxisBillions = 356,
		msoElementPrimaryValueAxisLogScale = 357,
		msoElementSecondaryCategoryAxisNone = 358,
		msoElementSecondaryCategoryAxisShow = 359,
		msoElementSecondaryCategoryAxisWithoutLabels = 360,
		msoElementSecondaryCategoryAxisReverse = 361,
		msoElementSecondaryValueAxisNone = 362,
		msoElementSecondaryValueAxisShow = 363,
		msoElementSecondaryValueAxisThousands = 364,
		msoElementSecondaryValueAxisMillions = 365,
		msoElementSecondaryValueAxisBillions = 366,
		msoElementSecondaryValueAxisLogScale = 367,
		msoElementSeriesAxisNone = 368,
		msoElementSeriesAxisShow = 369,
		msoElementSeriesAxisWithoutLabeling = 370,
		msoElementSeriesAxisReverse = 371,
		msoElementPrimaryCategoryAxisThousands = 372,
		msoElementPrimaryCategoryAxisMillions = 373,
		msoElementPrimaryCategoryAxisBillions = 374,
		msoElementPrimaryCategoryAxisLogScale = 375,
		msoElementSecondaryCategoryAxisThousands = 376,
		msoElementSecondaryCategoryAxisMillions = 377,
		msoElementSecondaryCategoryAxisBillions = 378,
		msoElementSecondaryCategoryAxisLogScale = 379,
		msoElementDataTableNone = 500,
		msoElementDataTableShow = 501,
		msoElementDataTableWithLegendKeys = 502,
		msoElementTrendlineNone = 600,
		msoElementTrendlineAddLinear = 601,
		msoElementTrendlineAddExponential = 602,
		msoElementTrendlineAddLinearForecast = 603,
		msoElementTrendlineAddTwoPeriodMovingAverage = 604,
		msoElementErrorBarNone = 700,
		msoElementErrorBarStandardError = 701,
		msoElementErrorBarPercentage = 702,
		msoElementErrorBarStandardDeviation = 703,
		msoElementLineNone = 800,
		msoElementLineDropLine = 801,
		msoElementLineHiLoLine = 802,
		msoElementLineSeriesLine = 803,
		msoElementLineDropHiLoLine = 804,
		msoElementUpDownBarsNone = 900,
		msoElementUpDownBarsShow = 901,
		msoElementPlotAreaNone = 1000,
		msoElementPlotAreaShow = 1001,
		msoElementChartWallNone = 1100,
		msoElementChartWallShow = 1101,
		msoElementChartFloorNone = 1200,
		msoElementChartFloorShow = 1201,
	}

	enum MsoBulletType {
		msoBulletMixed = -2,
		msoBulletNone = 0,
		msoBulletUnnumbered = 1,
		msoBulletNumbered = 2,
		msoBulletPicture = 3,
	}

	enum MsoNumberedBulletStyle {
		msoBulletStyleMixed = -2,
		msoBulletAlphaLCPeriod = 0,
		msoBulletAlphaUCPeriod = 1,
		msoBulletArabicParenRight = 2,
		msoBulletArabicPeriod = 3,
		msoBulletRomanLCParenBoth = 4,
		msoBulletRomanLCParenRight = 5,
		msoBulletRomanLCPeriod = 6,
		msoBulletRomanUCPeriod = 7,
		msoBulletAlphaLCParenBoth = 8,
		msoBulletAlphaLCParenRight = 9,
		msoBulletAlphaUCParenBoth = 10,
		msoBulletAlphaUCParenRight = 11,
		msoBulletArabicParenBoth = 12,
		msoBulletArabicPlain = 13,
		msoBulletRomanUCParenBoth = 14,
		msoBulletRomanUCParenRight = 15,
		msoBulletSimpChinPlain = 16,
		msoBulletSimpChinPeriod = 17,
		msoBulletCircleNumDBPlain = 18,
		msoBulletCircleNumWDWhitePlain = 19,
		msoBulletCircleNumWDBlackPlain = 20,
		msoBulletTradChinPlain = 21,
		msoBulletTradChinPeriod = 22,
		msoBulletArabicAlphaDash = 23,
		msoBulletArabicAbjadDash = 24,
		msoBulletHebrewAlphaDash = 25,
		msoBulletKanjiKoreanPlain = 26,
		msoBulletKanjiKoreanPeriod = 27,
		msoBulletArabicDBPlain = 28,
		msoBulletArabicDBPeriod = 29,
		msoBulletThaiAlphaPeriod = 30,
		msoBulletThaiAlphaParenRight = 31,
		msoBulletThaiAlphaParenBoth = 32,
		msoBulletThaiNumPeriod = 33,
		msoBulletThaiNumParenRight = 34,
		msoBulletThaiNumParenBoth = 35,
		msoBulletHindiAlphaPeriod = 36,
		msoBulletHindiNumPeriod = 37,
		msoBulletKanjiSimpChinDBPeriod = 38,
		msoBulletHindiNumParenRight = 39,
		msoBulletHindiAlpha1Period = 40,
	}

	enum MsoTabStopType {
		msoTabStopMixed = -2,
		msoTabStopLeft = 1,
		msoTabStopCenter = 2,
		msoTabStopRight = 3,
		msoTabStopDecimal = 4,
	}

	enum MsoBaselineAlignment {
		msoBaselineAlignMixed = -2,
		msoBaselineAlignBaseline = 1,
		msoBaselineAlignTop = 2,
		msoBaselineAlignCenter = 3,
		msoBaselineAlignFarEast50 = 4,
		msoBaselineAlignAuto = 5,
	}

	enum EncryptionProviderDetail {
		encprovdetUrl = 0,
		encprovdetAlgorithm = 1,
		encprovdetBlockCipher = 2,
		encprovdetCipherBlockSize = 3,
		encprovdetCipherMode = 4,
	}

	enum EncryptionCipherMode {
		cipherModeECB = 0,
		cipherModeCBC = 1,
	}

	enum MsoClipboardFormat {
		msoClipboardFormatMixed = -2,
		msoClipboardFormatNative = 1,
		msoClipboardFormatHTML = 2,
		msoClipboardFormatRTF = 3,
		msoClipboardFormatPlainText = 4,
	}

	enum MsoBlogCategorySupport {
		msoBlogNoCategories = 0,
		msoBlogOneCategory = 1,
		msoBlogMultipleCategories = 2,
	}

	enum MsoBlogImageType {
		msoblogImageTypeJPEG = 1,
		msoblogImageTypeGIF = 2,
		msoblogImageTypePNG = 3,
	}

	enum XlPieSliceLocation {
		xlHorizontalCoordinate = 1,
		xlVerticalCoordinate = 2,
	}

	enum XlPieSliceIndex {
		xlOuterCounterClockwisePoint = 1,
		xlOuterCenterPoint = 2,
		xlOuterClockwisePoint = 3,
		xlMidClockwiseRadiusPoint = 4,
		xlCenterPoint = 5,
		xlMidCounterClockwiseRadiusPoint = 6,
		xlInnerClockwisePoint = 7,
		xlInnerCenterPoint = 8,
		xlInnerCounterClockwisePoint = 9,
	}

	enum MsoSmartArtNodePosition {
		msoSmartArtNodeDefault = 1,
		msoSmartArtNodeAfter = 2,
		msoSmartArtNodeBefore = 3,
		msoSmartArtNodeAbove = 4,
		msoSmartArtNodeBelow = 5,
	}

	enum MsoSmartArtNodeType {
		msoSmartArtNodeTypeDefault = 1,
		msoSmartArtNodeTypeAssistant = 2,
	}

	enum MsoPickerField {
		msoPickerFieldUnknown = 0,
		msoPickerFieldDateTime = 1,
		msoPickerFieldNumber = 2,
		msoPickerFieldText = 3,
		msoPickerFieldUser = 4,
		msoPickerFieldMax = 5,
	}

	enum MsoContactCardAddressType {
		msoContactCardAddressTypeUnknown = 0,
		msoContactCardAddressTypeOutlook = 1,
		msoContactCardAddressTypeSMTP = 2,
		msoContactCardAddressTypeIM = 3,
	}

	enum MsoContactCardType {
		msoContactCardTypeEnterpriseContact = 0,
		msoContactCardTypePersonalContact = 1,
		msoContactCardTypeUnknownContact = 2,
		msoContactCardTypeEnterpriseGroup = 3,
		msoContactCardTypePersonalDistributionList = 4,
	}

	enum MsoPictureEffectType {
		msoEffectNone = 0,
		msoEffectBackgroundRemoval = 1,
		msoEffectBlur = 2,
		msoEffectBrightnessContrast = 3,
		msoEffectCement = 4,
		msoEffectCrisscrossEtching = 5,
		msoEffectChalkSketch = 6,
		msoEffectColorTemperature = 7,
		msoEffectCutout = 8,
		msoEffectFilmGrain = 9,
		msoEffectGlass = 10,
		msoEffectGlowDiffused = 11,
		msoEffectGlowEdges = 12,
		msoEffectLightScreen = 13,
		msoEffectLineDrawing = 14,
		msoEffectMarker = 15,
		msoEffectMosiaicBubbles = 16,
		msoEffectPaintBrush = 17,
		msoEffectPaintStrokes = 18,
		msoEffectPastelsSmooth = 19,
		msoEffectPencilGrayscale = 20,
		msoEffectPencilSketch = 21,
		msoEffectPhotocopy = 22,
		msoEffectPlasticWrap = 23,
		msoEffectSaturation = 24,
		msoEffectSharpenSoften = 25,
		msoEffectTexturizer = 26,
		msoEffectWatercolorSponge = 27,
	}

	enum MsoIodGroup {
		msoIodGroupPIAs = 0,
		msoIodGroupVSTOR35Mgd = 1,
		msoIodGroupVSTOR40Mgd = 2,
	}

	enum BackstageGroupStyle {
		BackstageGroupStyleNormal = 0,
		BackstageGroupStyleWarning = 1,
		BackstageGroupStyleError = 2,
	}

	enum MsoFileValidationMode {
		msoFileValidationDefault = 0,
		msoFileValidationSkip = 1,
	}

	enum MsoContactCardStyle {
		msoContactCardHover = 0,
		msoContactCardFull = 1,
	}

	enum MsoMergeCmd {
		msoMergeUnion = 1,
		msoMergeCombine = 2,
		msoMergeIntersect = 3,
		msoMergeSubtract = 4,
		msoMergeFragment = 5,
	}

	enum MsoLineCapStyle {
		msoLineCapMixed = -2,
		msoLineCapSquare = 1,
		msoLineCapRound = 2,
		msoLineCapFlat = 3,
	}

	enum MsoLineJoinStyle {
		msoLineJoinMixed = -2,
		msoLineJoinRound = 1,
		msoLineJoinBevel = 2,
		msoLineJoinMiter = 3,
	}

	enum MsoLineFillType {
		msoLineFillMixed = -2,
		msoLineFillNone = 0,
		msoLineFillSolid = 1,
		msoLineFillPatterned = 2,
		msoLineFillGradient = 3,
		msoLineFillTextured = 4,
		msoLineFillBackground = 5,
		msoLineFillPicture = 6,
	}

	enum MsoChartFieldType {
		msoChartFieldBubbleSize = 1,
		msoChartFieldCategoryName = 2,
		msoChartFieldPercentage = 3,
		msoChartFieldSeriesName = 4,
		msoChartFieldValue = 5,
		msoChartFieldFormula = 6,
		msoChartFieldRange = 7,
	}

	enum MsoBroadcastState {
		NoBroadcast = 0,
		BroadcastStarted = 1,
		BroadcastPaused = 2,
	}

	enum MsoBroadcastCapabilities {
		BroadcastCapFileSizeLimited = 1,
		BroadcastCapSupportsMeetingNotes = 2,
		BroadcastCapSupportsUpdateDoc = 4,
	}

	enum MsoPictureCompress {
		msoPictureCompressDocDefault = -1,
		msoPictureCompressFalse = 0,
		msoPictureCompressTrue = 1,
	}

	enum XlCategoryLabelLevel {
		xlCategoryLabelLevelNone = -3,
		xlCategoryLabelLevelCustom = -2,
		xlCategoryLabelLevelAll = -1,
	}

	enum XlSeriesNameLevel {
		xlSeriesNameLevelNone = -3,
		xlSeriesNameLevelCustom = -2,
		xlSeriesNameLevelAll = -1,
	}
}